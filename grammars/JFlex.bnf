{
  classHeader="header.txt"
  parserClass="org.intellij.jflex.parser.JFlexParser"
  parserUtilClass="org.intellij.jflex.parser.JFlexParserUtil"

  implements="org.intellij.jflex.psi.JFlexCompositeElement"
  extends="org.intellij.jflex.psi.impl.JFlexCompositeElementImpl"

  psiClassPrefix="JFlex"
  psiImplClassSuffix="Impl"
  psiPackage="org.intellij.jflex.psi"
  psiImplPackage="org.intellij.jflex.psi.impl"
  psiImplUtilClass="org.intellij.jflex.psi.impl.JFlexPsiImplUtil"

  elementTypeHolderClass="org.intellij.jflex.psi.JFlexTypes"
  elementTypePrefix="FLEX_"
  elementTypeClass="org.intellij.jflex.psi.JFlexCompositeElementType"
  tokenTypeClass="org.intellij.jflex.psi.JFlexTokenType"

  tokens = [
    java = 'regexp:.*'
    newline = 'regexp:\n'
    id = 'regexp:(_|\p{Alpha})\w*'
    string = 'regexp:"([^"\\]|\\.)*"'
    number = 'regexp:\p{Digit}+'
    line_comment='regexp://.*'
    block_comment='regexp:/\*((?<!\*/)(.|\n))*'
    escaped_char='regexp:\\.'

    perc2 = '%%'
    star = '*'
    paren1 = '('
    paren2 = ')'
    brack1 = '['
    brack2 = ']'
    brace1 = '{'
    brace2 = '}'
    question = '?'
    dash = '-'
    plus = '+'
    roof = '^'
    slash2 = '/'

    dot = '.'
    comma = ','

    angle1 = '<'
    angle2 = '>'
    or = '|'
    slash = '\'
    dollar = '$'
    eq = '='
    not = '!'
    not2 = '~'

    eof = '<<EOF>>'

    class1='[:jletter:]'
    class2='[:jletterdigit:]'
    class3='[:letter:]'
    class4='[:digit:]'
    class5='[:uppercase:]'
    class6='[:lowercase:]'

    perc_1='%class'
    perc_2='%implements'
    perc_3='%extends'
    perc_4='%public'
    perc_5='%final'
    perc_6='%abstract'
    perc_7='%apiprivate'
    perc_8='%{'
    perc_9='%}'
    perc_10='%init{'
    perc_11='%init}'
    perc_12='%initthrow'
    perc_13='%initthrow{'
    perc_14='%initthrow}'
    perc_15='%ctorarg'
    perc_16='%scanerror'
    perc_17='%buffer'
    perc_18='%include'
    perc_19='%function'
    perc_20='%integer'
    perc_21='%int'
    perc_22='%intwrap'
    perc_23='%type'
    perc_24='%yylexthrow'
    perc_25='%yylexthrow{'
    perc_26='%yylexthrow}'
    perc_27='%eofval{'
    perc_28='%eofval}'
    perc_29='%eof{'
    perc_30='%eof}'
    perc_31='%eofthrow'
    perc_32='%eofthrow{'
    perc_33='%eofthrow}'
    perc_34='%eofclose'
    perc_36='%debug'
    perc_37='%standalone'
    perc_38='%cup'
    perc_39='%cupsym'
    perc_40='%cupdebug'
    perc_41='%byacc'
    perc_42='%switch'
    perc_43='%table'
    perc_44='%pack'
    perc_45='%7bit'
    perc_46='%full'
    perc_47='%8bit'
    perc_48='%unicode'
    perc_49='%16bit'
    perc_50='%caseless'
    perc_51='%ignorecase'
    perc_52='%char'
    perc_53='%line'
    perc_54='%column'
    perc_55='%notunix'
    perc_56='%yyeof'
    perc_57='%state'
    perc_58='%s'
    perc_59='%xstate'
    perc_69='%x'

    char='regexp:[^\{\}\[\]\(\)\+\*\?\\/]'
  ]
  recoverUntil(".*_section")=section_recover
  pin(".*_section")=1

  extends("option_.*")=option
  elementType("option_.*")=option
  pin("option_.*")=1
  extends(".*_expression")=expression
  name(".*_expression")="expression"
  name("option.*")="option"
  name(".*class")="char class"

  //consumeTokenMethod("character|macro_reference|.*_(recover|expression|op)")="consumeTokenFast"
  //consumeTokenMethod="consumeTokenFast"
}

flex_file ::= []
  user_code_section
  section_div
  declarations_section
  section_div
  lexical_rules_section
  {pin=1}

private meta line ::= new_line <<p>> new_line {pin=2}
private new_line ::= &<<is_new_line>>

private section_div ::= <<line '%%'>>
private section_recover ::= !'%%'

user_code_section ::= [] java_code {pin=1}
java_code ::= <<anything2 (&java | !<<is_percent>>)>>

java_fqn ::= id ( safe_dot id ) * {pin(".*")=1}
private safe_dot ::= '.' !'*'
private java_fqn_list ::= [java_fqn (',' java_fqn) *] {pin(".*")=1 recoverUntil=declaration_recover}

// ======================================================
declarations_section ::=  [] (declaration) *

private declaration ::= macro_definition | state_declaration | option  {recoverUntil=declaration_recover}
private declaration_recover ::= !(<<is_percent>> | id '=') section_recover
option ::= option_class
  | option_implements
  | option_extends
  | option_public
  | option_final
  | option_abstract
  | option_api_private
  | option_user_code
  | option_init
  | option_init_throw
  | option_ctor_arg
  | option_scan_error
  | option_buffer_size
  | option_include

  | option_function
  | option_integer
  | option_intwrap
  | option_type
  | option_yylexthrow

  | option_eof_val
  | option_eof
  | option_eof_throw
  | option_eof_close

  | option_debug
  | option_standalone

  | option_cup
  | option_cup_sym
  | option_cup_debug

  | option_byacc

  | option_switch
  | option_table
  | option_pack
  | option_7bit
  | option_full
  | option_unicode
  | option_ignore_case
  | option_count_char
  | option_count_line
  | option_count_column

  | option_obsolete


option_class ::= '%class' java_fqn
option_implements ::= '%implements' java_fqn_list
option_extends ::= '%extends' java_fqn
option_public ::= '%public'
option_final ::= '%final'
option_abstract ::= '%abstract'
option_api_private ::= '%apiprivate'
option_user_code ::= <<line '%{'>> java_code <<line '%}'>>
option_init ::= <<line '%init{'>> java_code <<line '%init}'>>
option_init_throw ::= '%initthrow' java_fqn_list | <<line '%initthrow{'>> java_fqn_list <<line '%initthrow}'>>
option_ctor_arg ::= '%ctorarg' java_fqn id
option_scan_error ::= '%scanerror' java_fqn
option_buffer_size ::= '%buffer' number
option_include ::= '%include' string // todo

option_function ::= '%function' id
option_integer ::= '%integer' | '%int'
option_intwrap ::= '%intwrap'
option_type ::= '%type' java_fqn
option_yylexthrow ::= '%yylexthrow' java_fqn_list | <<line '%yylexthrow{'>> java_fqn_list <<line '%yylexthrow}'>>

option_eof_val ::= <<line '%eofval{'>> java_code <<line '%eofval}'>>
option_eof ::= <<line '%eof{'>> java_code <<line '%eof}'>>
option_eof_throw ::= '%eofthrow' java_fqn_list | <<line '%eofthrow{'>> java_fqn_list <<line '%eofthrow}'>>
option_eof_close ::= '%eofclose' ['false']

option_debug ::= '%debug'
option_standalone ::= '%standalone'

option_cup ::= '%cup'
option_cup_sym ::= '%cupsym' java_fqn
option_cup_debug ::= '%cupdebug'

option_byacc ::= '%byacc'

option_switch ::= '%switch'
option_table ::= '%table'
option_pack ::= '%pack'
option_7bit ::= '%7bit'
option_full ::= '%full' | '%8bit'
option_unicode ::= '%unicode' | '%16bit'
option_ignore_case ::= '%caseless' | '%ignorecase'
option_count_char ::= '%char'
option_count_line ::= '%line'
option_count_column ::= '%column'

option_obsolete ::= '%notunix' | '%yyeof'

state_declaration ::= ('%state' | '%s' | '%xstate' | '%x') state_definition ((','? !(id '=')) state_definition) * ','? {pin=1}
state_definition ::= id {
  implements="com.intellij.psi.PsiNameIdentifierOwner"
  methods=[getName setName getNameIdentifier]
}

macro_definition ::= new_line id '=' expression {pin=3
  implements="com.intellij.psi.PsiNameIdentifierOwner"
  methods=[getName setName getNameIdentifier]
  recoverUntil=macro_definition_recover
}
private macro_definition_recover::=!(new_line id '=' | '%%' | <<is_percent>>)


// ======================================================
lexical_rules_section ::= [] rule +

rule ::= state_list (rule_group | rule_tail ) | rule_tail {pin(".*")=1 recoverUntil=rule_recover}
private rule_recover ::= !('}' | '.' | '<' | '<<EOF>>' | '^'| new_line | atom_group)

private rule_tail ::= rule_tail1 | rule_tail2
private rule_tail1 ::= '<<EOF>>' action {pin=1}
private rule_tail2 ::= ['^'] expression look_ahead? action {pin=2}
private rule_group ::= !('{' id '}') '{' rule + '}' {pin=2} // empty block forbidden

private state_list ::= '<' state_reference (',' state_reference) * '>' {pin(".*")=1}
state_reference ::= id { methods=[getReference] }
look_ahead ::= '$' | '/' expression
action ::= '{' java_class_statements '}' | '|' {pin(".*")=1 elementType=java_code}
private java_class_statements ::= <<anything !('}' | '<' id '>')>>

expression ::= choice_expression
  | sequence_expression
  | paren_expression
  | not_expression
  | quantifier_expression
  | atom_group

private atom_group ::= class_expression
  | predefined_class_expression
  | macro_ref_expression
  | literal_expression
choice_expression ::= expression ('|' expression) +
sequence_expression ::= expression (sequence_op expression) +
paren_expression ::= '(' expression ')' {pin=1}
not_expression ::= ('!'|'~') expression {pin=1}
quantifier_expression ::=  expression ( '*' | '+' | '?' | '{' number [ ',' number] '}' )
class_expression ::= '[' '^'? '-'? (string | predefined_class | class_char [ '-' class_char]) * '-'? ']' {pin=1}
private class_char ::= char | escaped_char
macro_ref_expression ::= '{' macro_reference '}'
macro_reference ::= id { methods=[getReference] }
literal_expression ::= string | id | allowed_chars
private allowed_chars ::= escaped_char | char | number | '-' | '=' | '<' | '>'
  | ']' /*| '}' -- allowed after <STATE> } { }  and in / part */

sequence_op ::= &( '(' | '!' | '~' | '[' | ']'
  | string | allowed_chars | predefined_class | '.'
  | '{' id '}' | !new_line id )

predefined_class_expression ::= predefined_class | '.'
private predefined_class ::= '[:jletter:]'
  | '[:jletterdigit:]'
  | '[:letter:]'
  | '[:digit:]'
  | '[:uppercase:]'
  | '[:lowercase:]'
