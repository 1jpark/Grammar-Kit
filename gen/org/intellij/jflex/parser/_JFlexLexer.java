/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

/*
 * Copyright 2011-present Greg Shrago
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.intellij.jflex.parser;

import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.intellij.jflex.parser.JFlexParserDefinition.FLEX_NEWLINE;
import static org.intellij.jflex.psi.JFlexTypes.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_JFlexLexerNew.flex</tt>
 */
public class _JFlexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int MACROS = 4;
  public static final int REGEXPSTART = 6;
  public static final int EXPRBAR = 8;
  public static final int REGEXP = 10;
  public static final int STATES = 12;
  public static final int JAVA_CODE = 14;
  public static final int STRING_CONTENT = 16;
  public static final int CHARCLASS = 18;
  public static final int COPY = 20;
  public static final int MACROUSE = 22;
  public static final int REPEATEXP = 24;
  public static final int REGEXP_CODEPOINT_SEQUENCE = 26;
  public static final int STRING_CODEPOINT_SEQUENCE = 28;
  public static final int SKIP_TOEOL = 30;
  public static final int SKIP_WSNL = 32;
  public static final int REPORT_UNCLOSED = 34;
  public static final int REGEXPSTART0 = 36;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  3,  4,  5,  6,  6,  7,  7,  8,  8,  9,  9, 
    10, 10, 11, 11, 12, 12, 13, 13, 13, 13, 14, 14, 15, 15, 16, 16, 
    17, 17, 18, 18, 19, 19
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 14864 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7"+
    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");

  /* The ZZ_CMAP_Y table has 3584 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\3\0\1\20\1\21\1\22\1\23\2\24\1\25\3\24\1\25\71\24\1\26\1\24\1\27\1\30"+
    "\1\31\1\32\2\30\16\0\1\33\1\20\1\34\1\35\2\24\1\36\11\24\1\37\21\24\1\40\1"+
    "\41\23\24\1\30\1\42\3\24\1\25\1\43\1\42\4\24\1\44\1\45\4\0\1\46\1\47\1\30"+
    "\3\24\2\50\1\30\1\51\1\52\1\0\1\53\5\24\1\54\3\0\1\55\1\56\13\24\1\57\1\46"+
    "\1\60\1\61\1\0\1\62\1\30\1\63\1\64\3\24\3\0\1\65\12\24\1\66\1\0\1\67\1\30"+
    "\1\0\1\70\3\24\1\54\1\71\1\23\2\24\1\66\1\72\1\73\1\74\2\30\3\24\1\75\10\30"+
    "\1\76\1\31\6\30\1\77\2\0\1\100\1\101\6\24\1\102\2\0\1\103\1\24\1\104\1\0\2"+
    "\42\1\105\1\106\1\107\2\24\1\76\1\110\1\111\1\112\1\113\1\63\1\114\1\104\1"+
    "\0\1\115\1\52\1\105\1\116\1\107\2\24\1\76\1\117\1\120\1\121\1\122\1\123\1"+
    "\124\1\125\1\0\1\126\1\30\1\105\1\37\1\36\2\24\1\76\1\127\1\111\1\46\1\130"+
    "\1\131\1\30\1\104\1\0\1\43\1\30\1\105\1\106\1\107\2\24\1\76\1\127\1\111\1"+
    "\112\1\122\1\125\1\114\1\104\1\0\1\43\1\30\1\132\1\133\1\134\1\135\1\136\1"+
    "\133\1\24\1\137\1\140\1\141\1\142\1\30\1\125\1\0\1\30\1\43\1\105\1\33\1\76"+
    "\2\24\1\76\1\143\1\144\1\145\1\141\1\146\1\27\1\104\1\0\2\30\1\147\1\33\1"+
    "\76\2\24\1\76\1\143\1\111\1\145\1\141\1\146\1\34\1\104\1\0\1\150\1\30\1\147"+
    "\1\33\1\76\4\24\1\151\1\145\1\152\1\63\1\30\1\104\1\0\1\30\1\41\1\147\1\24"+
    "\1\25\1\41\2\24\1\36\1\153\1\25\1\154\1\155\1\0\2\30\1\156\1\30\1\42\5\24"+
    "\1\157\1\160\1\161\1\100\1\0\1\162\4\30\1\163\1\164\1\165\1\42\1\166\1\167"+
    "\1\157\1\170\1\171\1\172\1\0\1\173\4\30\1\131\2\30\1\162\1\0\1\162\1\174\1"+
    "\175\1\24\1\42\3\24\1\31\1\45\1\0\1\145\1\176\1\0\1\45\3\0\1\51\1\177\7\30"+
    "\5\24\1\54\1\0\1\200\1\0\1\162\1\66\1\201\1\202\1\203\1\204\1\24\1\205\1\206"+
    "\1\0\1\172\4\24\1\37\1\22\5\24\1\207\51\24\1\134\1\25\1\134\5\24\1\134\4\24"+
    "\1\134\1\25\1\134\1\24\1\25\7\24\1\134\10\24\1\210\4\30\2\24\2\30\12\24\1"+
    "\31\1\30\1\42\114\24\1\106\2\24\1\42\2\24\1\50\11\24\1\133\1\131\1\30\1\24"+
    "\1\33\1\211\1\30\2\24\1\211\1\30\2\24\1\212\1\30\1\24\1\33\1\213\1\30\6\24"+
    "\1\214\3\0\1\215\1\216\1\0\1\162\3\30\1\217\1\0\1\162\13\24\1\30\5\24\1\220"+
    "\10\24\1\221\1\30\3\24\1\31\1\0\1\2\1\0\1\2\1\125\1\0\3\24\1\221\1\31\1\30"+
    "\5\24\1\115\2\0\1\56\1\162\1\0\1\162\4\30\2\24\1\161\1\2\6\24\1\176\1\100"+
    "\3\0\1\112\1\0\1\162\1\0\1\162\1\44\13\30\1\222\5\24\1\214\1\0\1\222\1\115"+
    "\1\0\1\162\1\30\1\223\1\2\1\30\1\224\3\24\1\103\1\203\1\0\1\70\4\24\1\66\1"+
    "\0\1\2\1\30\4\24\1\214\2\0\1\30\1\0\1\225\1\0\1\70\3\24\1\221\12\30\1\226"+
    "\2\0\1\227\1\230\1\30\30\24\4\0\1\100\2\30\1\77\42\24\2\221\4\24\2\221\1\24"+
    "\1\231\3\24\1\221\6\24\1\33\1\171\1\232\1\31\1\233\1\115\1\24\1\31\1\232\1"+
    "\31\1\30\1\223\3\30\1\234\1\30\1\44\1\131\1\30\1\235\1\30\1\51\1\236\1\43"+
    "\1\44\2\30\1\24\1\31\3\24\1\50\2\30\1\0\1\51\1\237\1\0\1\240\1\30\1\241\1"+
    "\41\1\153\1\242\1\32\1\243\1\24\1\244\1\245\1\246\2\30\5\24\1\131\116\30\5"+
    "\24\1\25\5\24\1\25\20\24\1\31\1\247\1\250\1\30\4\24\1\37\1\22\7\24\1\44\1"+
    "\30\1\63\2\24\1\25\1\30\10\25\4\0\5\30\1\44\72\30\1\245\3\30\1\42\1\205\1"+
    "\242\1\31\1\42\11\24\1\25\1\251\1\42\12\24\1\207\1\245\4\24\1\221\1\42\12"+
    "\24\1\25\2\30\3\24\1\50\6\30\170\24\1\221\11\30\71\24\1\31\6\30\21\24\1\31"+
    "\10\30\5\24\1\221\41\24\1\31\2\24\1\0\1\250\2\30\5\24\1\161\1\77\1\252\3\24"+
    "\1\63\12\24\1\162\3\30\1\44\1\24\1\41\14\24\1\253\1\115\1\30\1\24\1\50\11"+
    "\30\1\24\1\254\1\255\2\24\1\54\2\30\1\131\6\24\1\115\1\30\1\70\5\24\1\214"+
    "\1\0\1\51\1\30\1\0\1\162\2\0\1\70\1\52\1\0\1\70\2\24\1\66\1\172\2\24\1\161"+
    "\1\0\1\2\1\30\3\24\1\31\1\101\5\24\1\54\1\0\1\240\1\44\1\0\1\162\4\30\5\24"+
    "\1\103\1\100\1\30\1\255\1\256\1\0\1\162\2\24\1\25\1\257\6\24\1\202\1\260\1"+
    "\220\2\30\1\261\1\24\1\54\1\262\1\30\3\263\1\30\2\25\22\30\4\24\1\54\1\264"+
    "\1\0\1\162\64\24\1\115\1\30\2\24\1\25\1\265\5\24\1\115\40\30\55\24\1\221\15"+
    "\24\1\27\4\30\1\25\1\30\1\265\1\266\1\24\1\76\1\25\1\171\1\267\15\24\1\27"+
    "\3\30\1\265\54\24\1\221\2\30\10\24\1\41\6\24\5\30\1\24\1\31\2\0\2\30\1\100"+
    "\1\30\1\136\2\30\1\245\3\30\1\43\1\33\20\24\1\270\1\235\1\30\1\0\1\162\1\42"+
    "\2\24\1\116\1\42\2\24\1\50\1\271\12\24\1\25\3\41\1\272\1\273\2\30\1\274\1"+
    "\24\1\143\2\24\1\25\2\24\1\275\1\24\1\221\1\24\1\221\4\30\17\24\1\50\10\30"+
    "\6\24\1\31\20\30\1\276\20\30\3\24\1\31\6\24\1\131\5\30\3\24\1\25\2\30\3\24"+
    "\1\50\6\30\3\24\1\221\4\24\1\115\1\24\1\242\5\30\23\24\1\221\1\0\1\162\52"+
    "\30\1\221\1\76\4\24\1\37\1\277\2\24\1\221\25\30\2\24\1\221\1\30\3\24\1\27"+
    "\10\30\7\24\1\271\10\30\1\300\1\77\1\143\1\42\2\24\1\115\1\121\4\30\3\24\1"+
    "\31\20\30\6\24\1\221\1\30\2\24\1\221\1\30\2\24\1\50\21\30\11\24\1\131\66\30"+
    "\1\224\6\24\1\0\1\100\3\30\1\125\1\0\2\30\1\224\5\24\1\0\1\301\2\30\3\24\1"+
    "\131\1\0\1\162\1\224\3\24\1\161\1\0\1\145\1\0\10\30\1\224\5\24\1\54\1\0\1"+
    "\302\1\30\1\0\1\162\24\30\5\24\1\54\1\0\1\30\1\0\1\162\46\30\55\24\1\25\22"+
    "\30\14\24\1\50\63\30\5\24\1\25\72\30\7\24\1\131\130\30\10\24\1\31\1\30\1\103"+
    "\4\0\1\100\1\30\1\63\1\224\1\24\14\30\1\27\153\30\1\303\1\304\2\0\1\305\1"+
    "\2\3\30\1\306\22\30\1\307\67\30\12\24\1\33\10\24\1\33\1\310\1\311\1\24\1\312"+
    "\1\143\7\24\1\37\1\313\2\33\3\24\1\314\1\171\1\41\1\76\51\24\1\221\3\24\1"+
    "\76\2\24\1\207\3\24\1\207\2\24\1\33\3\24\1\33\2\24\1\25\3\24\1\25\3\24\1\76"+
    "\3\24\1\76\2\24\1\207\1\315\6\0\1\143\3\24\1\163\1\42\1\207\1\316\1\241\1"+
    "\317\1\163\1\231\1\163\2\207\1\124\1\24\1\36\1\24\1\115\1\320\1\36\1\24\1"+
    "\115\50\30\32\24\1\25\5\30\106\24\1\31\1\30\33\24\1\221\74\30\1\123\3\30\14"+
    "\0\20\30\36\0\2\30");

  /* The ZZ_CMAP_A table has 1672 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\10\20\1\21\1\13\1\16\2\14\1\15\6\20\4\0\1\13\1\74\1\25\1\0\1\73\1\30\1\105"+
    "\1\26\1\76\1\77\1\24\1\100\1\62\1\104\1\10\1\23\1\6\1\60\2\7\2\3\1\61\1\56"+
    "\1\57\1\1\1\106\1\0\1\64\1\63\1\70\1\101\1\0\4\2\1\65\1\67\10\17\1\66\1\110"+
    "\4\17\1\12\5\17\1\72\1\4\1\103\1\102\1\17\1\0\1\41\1\54\1\47\1\53\1\35\1\37"+
    "\1\55\1\43\1\32\1\107\1\17\1\42\1\51\1\33\1\36\1\52\1\17\1\44\1\50\1\34\1"+
    "\11\1\40\1\45\1\5\1\46\1\17\1\31\1\71\1\27\1\75\6\20\1\22\2\20\2\0\4\17\4"+
    "\0\1\17\2\0\1\20\7\0\1\17\4\0\1\17\5\0\17\17\1\0\2\17\4\0\4\17\16\0\5\17\7"+
    "\0\1\17\1\0\1\17\1\0\5\17\1\0\2\17\6\0\1\17\1\0\3\17\1\0\1\17\1\0\4\17\1\0"+
    "\13\17\1\0\3\17\1\0\5\20\2\0\6\17\1\0\7\17\1\0\1\17\15\0\1\17\1\0\15\20\1"+
    "\0\1\20\1\0\2\20\1\0\2\20\1\0\1\20\3\17\5\0\5\20\6\0\1\17\4\0\3\20\5\0\3\17"+
    "\7\20\4\0\2\17\1\20\13\17\1\0\1\17\7\20\2\17\2\20\1\0\4\20\2\17\2\20\3\17"+
    "\2\0\1\17\7\0\1\20\1\17\1\20\6\17\3\20\2\0\11\17\3\20\1\17\6\0\2\20\6\17\4"+
    "\20\2\17\2\0\2\20\1\17\11\20\1\17\3\20\1\17\5\20\2\0\1\17\3\20\4\0\1\17\1"+
    "\0\6\17\4\0\13\20\1\0\4\20\6\17\3\20\1\17\2\20\1\17\7\20\2\17\2\20\2\0\2\20"+
    "\1\0\3\20\1\0\10\17\2\0\2\17\2\0\6\17\1\0\1\17\3\0\4\17\2\0\1\20\1\17\7\20"+
    "\2\0\2\20\2\0\3\20\1\17\5\0\2\17\1\0\5\17\4\0\3\17\4\0\2\17\1\0\2\17\1\0\2"+
    "\17\1\0\2\17\2\0\1\20\1\0\5\20\4\0\2\20\2\0\3\20\3\0\1\20\7\0\4\17\1\0\1\17"+
    "\7\0\4\20\3\17\1\20\2\0\1\17\1\0\2\17\1\0\3\17\2\20\1\0\3\20\2\0\1\17\11\0"+
    "\1\20\1\17\1\0\6\17\3\0\3\17\1\0\4\17\3\0\2\17\1\0\1\17\1\0\2\17\3\0\2\17"+
    "\3\0\2\17\4\0\5\20\3\0\3\20\1\0\4\20\2\0\1\17\6\0\1\20\4\17\1\0\5\17\3\0\1"+
    "\17\7\20\1\0\2\20\5\0\2\20\3\0\2\20\1\0\3\17\1\0\2\17\5\0\3\17\2\0\1\17\3"+
    "\20\1\0\4\20\1\17\1\0\4\17\1\0\1\17\4\0\1\20\4\0\6\20\1\0\1\20\3\0\2\20\4"+
    "\0\1\17\1\20\2\17\7\20\4\0\10\17\3\20\7\0\2\17\1\0\1\17\2\0\2\17\1\0\1\17"+
    "\2\0\1\17\6\0\4\17\1\0\3\17\1\0\1\17\1\0\1\17\2\0\2\17\1\0\3\17\2\20\1\0\2"+
    "\20\1\17\2\0\5\17\1\0\1\17\1\0\6\20\2\0\2\20\2\0\4\17\5\0\1\20\1\0\1\20\1"+
    "\0\1\20\4\0\2\20\5\17\3\20\6\0\1\20\1\0\7\20\1\17\2\20\4\17\3\20\1\17\3\20"+
    "\2\17\7\20\3\17\4\20\5\17\14\20\1\17\1\20\3\17\1\0\7\17\2\0\3\20\2\17\3\20"+
    "\3\0\2\17\2\20\4\0\1\17\1\0\2\20\4\0\4\17\10\20\3\0\1\17\3\0\2\17\1\20\5\0"+
    "\3\20\2\0\1\17\1\20\1\17\5\0\6\17\2\0\5\20\3\17\3\0\10\20\5\17\2\20\3\0\3"+
    "\17\3\20\1\0\5\20\4\17\1\20\4\17\3\20\2\17\2\0\1\17\1\0\1\17\1\0\1\17\1\0"+
    "\1\17\2\0\3\17\1\0\6\17\2\0\2\17\2\14\5\20\5\0\1\17\5\0\6\20\1\0\1\20\3\0"+
    "\4\20\11\0\1\17\4\0\1\17\1\0\5\17\2\0\1\17\1\0\4\17\1\0\3\17\2\0\4\17\5\0"+
    "\5\17\4\0\1\17\4\0\4\17\3\20\2\17\5\0\2\20\2\0\3\17\6\20\1\0\2\17\2\0\4\17"+
    "\1\0\2\17\1\20\3\17\1\20\4\17\1\20\10\17\2\20\4\0\1\17\1\20\4\0\1\20\5\17"+
    "\2\20\3\0\3\17\4\0\3\17\2\20\2\0\6\17\1\0\3\20\1\0\2\20\5\0\5\17\5\0\1\17"+
    "\1\20\3\17\1\0\2\17\1\0\7\17\2\0\1\20\6\0\2\17\2\0\3\17\3\0\2\17\3\0\2\17"+
    "\2\0\3\20\4\0\3\17\1\0\2\17\1\0\1\17\5\0\1\20\2\0\1\17\3\0\1\17\2\0\2\17\3"+
    "\20\1\0\2\20\1\0\3\20\2\0\1\20\2\0\1\20\4\17\10\0\5\20\3\0\6\20\2\0\3\20\2"+
    "\0\4\20\4\0\3\20\5\0\1\17\2\0\2\17\2\0\4\17\1\0\4\17\1\0\1\17\1\0\6\17\2\0"+
    "\5\17\1\0\4\17\1\0\4\17\2\0\2\20\1\0\1\17\1\0\1\17\5\0\1\17\1\0\1\17\1\0\3"+
    "\17\1\0\3\17\1\0\3\17");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\13\0\1\1\3\0\1\2\5\0\1\1\1\3"+
    "\3\4\1\3\1\5\1\6\1\5\1\7\1\10\1\11"+
    "\3\3\1\12\1\13\1\3\2\14\1\15\1\16\1\10"+
    "\1\14\2\17\2\20\1\21\1\22\1\23\1\24\1\17"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\4\3\3\1\40\1\41\1\4"+
    "\1\3\2\42\1\43\1\17\2\44\1\45\2\17\1\46"+
    "\1\17\1\47\1\50\1\17\1\1\1\3\1\51\1\5"+
    "\2\4\2\52\1\53\1\2\1\54\1\55\1\56\1\57"+
    "\4\0\1\60\1\0\1\61\1\62\2\0\1\63\2\0"+
    "\1\64\1\0\1\65\20\0\1\66\1\67\1\70\1\71"+
    "\3\0\6\17\1\72\1\0\1\73\1\74\5\0\1\75"+
    "\3\0\1\4\4\0\5\4\1\17\1\0\1\76\1\77"+
    "\1\100\1\101\1\102\1\0\1\103\3\0\1\5\1\4"+
    "\2\0\1\104\42\0\1\105\3\0\1\106\5\0\1\4"+
    "\7\0\1\107\5\0\1\5\1\4\3\0\1\110\17\0"+
    "\1\111\22\0\1\112\6\0\1\4\11\0\1\5\1\4"+
    "\1\104\10\0\1\113\1\0\1\114\4\0\1\115\3\0"+
    "\1\116\10\0\1\117\5\0\1\120\1\121\11\0\3\4"+
    "\3\0\1\122\3\0\1\5\1\4\1\0\1\123\14\0"+
    "\1\124\2\0\1\125\6\0\1\126\3\0\1\127\1\0"+
    "\1\130\1\0\1\70\7\0\1\4\4\0\1\131\4\0"+
    "\1\5\20\0\1\132\2\0\1\133\3\0\1\134\1\135"+
    "\1\66\1\70\1\136\5\0\1\4\12\0\1\137\1\0"+
    "\1\140\1\141\1\142\2\0\1\143\1\144\1\0\1\145"+
    "\6\0\1\146\3\0\1\66\3\0\2\4\7\0\1\147"+
    "\4\0\1\150\1\151\1\152\1\0\1\153\1\0\1\154"+
    "\1\155\4\0\1\4\2\0\2\4\10\0\1\156\2\0"+
    "\1\157\3\0\1\160\2\0\4\4\3\0\1\161\1\0"+
    "\1\162\1\163\1\164\1\165\1\166\1\167\4\0\3\4"+
    "\1\0\1\170\1\0\1\171\3\0\1\4\1\172\2\0"+
    "\1\4\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[566];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\u0248\0\u0291\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe\0\u0447"+
    "\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4\0\u05fd\0\u0646\0\u068f"+
    "\0\u06d8\0\u0721\0\u076a\0\u06d8\0\u07b3\0\u07fc\0\u0845\0\u06d8"+
    "\0\u088e\0\u08d7\0\u0920\0\u0969\0\u09b2\0\u06d8\0\u06d8\0\u09fb"+
    "\0\u06d8\0\u0a44\0\u06d8\0\u0a8d\0\u0ad6\0\u0b1f\0\u06d8\0\u0b68"+
    "\0\u0bb1\0\u0bfa\0\u0c43\0\u06d8\0\u06d8\0\u0c8c\0\u0cd5\0\u06d8"+
    "\0\u0d1e\0\u07fc\0\u06d8\0\u06d8\0\u06d8\0\u06d8\0\u06d8\0\u06d8"+
    "\0\u06d8\0\u0d67\0\u0db0\0\u0df9\0\u0e42\0\u0e8b\0\u06d8\0\u06d8"+
    "\0\u0ed4\0\u0f1d\0\u06d8\0\u0f66\0\u06d8\0\u0faf\0\u06d8\0\u0ff8"+
    "\0\u06d8\0\u1041\0\u108a\0\u0d1e\0\u10d3\0\u06d8\0\u111c\0\u1165"+
    "\0\u11ae\0\u11f7\0\u06d8\0\u1240\0\u1289\0\u12d2\0\u06d8\0\u131b"+
    "\0\u06d8\0\u1364\0\u13ad\0\u06d8\0\u06d8\0\u13f6\0\u06d8\0\u143f"+
    "\0\u1488\0\u14d1\0\u06d8\0\u0721\0\u06d8\0\u06d8\0\u076a\0\u151a"+
    "\0\u06d8\0\u0969\0\u1563\0\u06d8\0\u15ac\0\u06d8\0\u15f5\0\u163e"+
    "\0\u1687\0\u16d0\0\u1719\0\u1762\0\u17ab\0\u17f4\0\u183d\0\u1886"+
    "\0\u18cf\0\u1918\0\u1961\0\u19aa\0\u19f3\0\u1a3c\0\u1a85\0\u06d8"+
    "\0\u1ace\0\u06d8\0\u1b17\0\u0b1f\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b"+
    "\0\u1c84\0\u1ccd\0\u1d16\0\u06d8\0\u0bb1\0\u06d8\0\u1d5f\0\u1da8"+
    "\0\u0c8c\0\u1df1\0\u1e3a\0\u0d67\0\u06d8\0\u0df9\0\u0e42\0\u0e8b"+
    "\0\u1e83\0\u1ecc\0\u1f15\0\u1f5e\0\u1fa7\0\u1ff0\0\u2039\0\u2082"+
    "\0\u20cb\0\u2114\0\u215d\0\u21a6\0\u06d8\0\u06d8\0\u06d8\0\u06d8"+
    "\0\u06d8\0\u21ef\0\u06d8\0\u2238\0\u2281\0\u22ca\0\u2313\0\u235c"+
    "\0\u23a5\0\u23ee\0\u2437\0\u2480\0\u24c9\0\u2512\0\u255b\0\u25a4"+
    "\0\u25ed\0\u2636\0\u267f\0\u26c8\0\u2711\0\u275a\0\u27a3\0\u27ec"+
    "\0\u2835\0\u287e\0\u28c7\0\u2910\0\u2959\0\u29a2\0\u29eb\0\u2a34"+
    "\0\u2a7d\0\u2ac6\0\u2b0f\0\u2b58\0\u2ba1\0\u2bea\0\u2c33\0\u2c7c"+
    "\0\u2cc5\0\u2d0e\0\u2d57\0\u2da0\0\u2de9\0\u06d8\0\u2e32\0\u2e7b"+
    "\0\u2ec4\0\u06d8\0\u2f0d\0\u2f56\0\u2f9f\0\u2fe8\0\u3031\0\u307a"+
    "\0\u30c3\0\u310c\0\u3155\0\u319e\0\u31e7\0\u3230\0\u3279\0\u06d8"+
    "\0\u32c2\0\u330b\0\u3354\0\u339d\0\u33e6\0\u342f\0\u3478\0\u34c1"+
    "\0\u350a\0\u3553\0\u359c\0\u35e5\0\u362e\0\u3677\0\u36c0\0\u3709"+
    "\0\u3752\0\u379b\0\u37e4\0\u382d\0\u3876\0\u38bf\0\u3908\0\u3951"+
    "\0\u399a\0\u39e3\0\u3a2c\0\u3a75\0\u3abe\0\u3b07\0\u3b50\0\u3b99"+
    "\0\u3be2\0\u3c2b\0\u3c74\0\u3cbd\0\u3d06\0\u3d4f\0\u3d98\0\u3de1"+
    "\0\u3e2a\0\u3e73\0\u3ebc\0\u1bf2\0\u3f05\0\u06d8\0\u3f4e\0\u3f97"+
    "\0\u3fe0\0\u4029\0\u4072\0\u40bb\0\u4104\0\u414d\0\u4196\0\u41df"+
    "\0\u2039\0\u4228\0\u4271\0\u42ba\0\u4303\0\u434c\0\u4395\0\u43de"+
    "\0\u34c1\0\u4427\0\u4470\0\u44b9\0\u4502\0\u454b\0\u4594\0\u45dd"+
    "\0\u4626\0\u06d8\0\u466f\0\u06d8\0\u46b8\0\u4701\0\u474a\0\u4793"+
    "\0\u06d8\0\u47dc\0\u4825\0\u486e\0\u06d8\0\u48b7\0\u4900\0\u4949"+
    "\0\u4992\0\u49db\0\u4a24\0\u4a6d\0\u4ab6\0\u06d8\0\u4aff\0\u4b48"+
    "\0\u4b91\0\u4bda\0\u4c23\0\u06d8\0\u06d8\0\u4c6c\0\u4cb5\0\u4cfe"+
    "\0\u4d47\0\u4d90\0\u4dd9\0\u4e22\0\u4e6b\0\u4eb4\0\u4efd\0\u4f46"+
    "\0\u4f8f\0\u4fd8\0\u5021\0\u506a\0\u06d8\0\u50b3\0\u50fc\0\u5145"+
    "\0\u518e\0\u3230\0\u51d7\0\u06d8\0\u5220\0\u5269\0\u52b2\0\u52fb"+
    "\0\u5344\0\u538d\0\u53d6\0\u541f\0\u5468\0\u54b1\0\u54fa\0\u5543"+
    "\0\u06d8\0\u558c\0\u55d5\0\u06d8\0\u561e\0\u5667\0\u56b0\0\u56f9"+
    "\0\u5742\0\u578b\0\u06d8\0\u57d4\0\u581d\0\u5866\0\u06d8\0\u58af"+
    "\0\u06d8\0\u58f8\0\u5941\0\u598a\0\u59d3\0\u5a1c\0\u5a65\0\u5aae"+
    "\0\u5af7\0\u5b40\0\u5b89\0\u5bd2\0\u5c1b\0\u5c64\0\u5cad\0\u06d8"+
    "\0\u5cf6\0\u5d3f\0\u5d88\0\u5dd1\0\u06d8\0\u5e1a\0\u5e63\0\u5eac"+
    "\0\u5ef5\0\u5f3e\0\u5f87\0\u5fd0\0\u6019\0\u6062\0\u60ab\0\u60f4"+
    "\0\u613d\0\u6186\0\u61cf\0\u6218\0\u6261\0\u06d8\0\u62aa\0\u62f3"+
    "\0\u06d8\0\u633c\0\u6385\0\u63ce\0\u06d8\0\u06d8\0\u6417\0\u06d8"+
    "\0\u06d8\0\u6460\0\u64a9\0\u64f2\0\u653b\0\u6584\0\u65cd\0\u6616"+
    "\0\u665f\0\u66a8\0\u66f1\0\u673a\0\u6783\0\u67cc\0\u6815\0\u685e"+
    "\0\u68a7\0\u06d8\0\u68f0\0\u06d8\0\u06d8\0\u06d8\0\u6939\0\u6982"+
    "\0\u06d8\0\u06d8\0\u69cb\0\u06d8\0\u6a14\0\u6a5d\0\u6aa6\0\u6aef"+
    "\0\u6b38\0\u6b81\0\u06d8\0\u6bca\0\u6c13\0\u6c5c\0\u06d8\0\u6ca5"+
    "\0\u6cee\0\u6d37\0\u6d80\0\u6dc9\0\u6e12\0\u6e5b\0\u6ea4\0\u6eed"+
    "\0\u6f36\0\u6f7f\0\u6fc8\0\u06d8\0\u7011\0\u705a\0\u70a3\0\u70ec"+
    "\0\u7135\0\u06d8\0\u06d8\0\u717e\0\u06d8\0\u71c7\0\u06d8\0\u06d8"+
    "\0\u7210\0\u7259\0\u72a2\0\u72eb\0\u7334\0\u737d\0\u73c6\0\u740f"+
    "\0\u7458\0\u74a1\0\u74ea\0\u7533\0\u757c\0\u75c5\0\u760e\0\u7657"+
    "\0\u76a0\0\u76e9\0\u7732\0\u777b\0\u06d8\0\u77c4\0\u780d\0\u7856"+
    "\0\u06d8\0\u789f\0\u78e8\0\u7931\0\u797a\0\u79c3\0\u7a0c\0\u7a55"+
    "\0\u7a9e\0\u7ae7\0\u06d8\0\u7b30\0\u06d8\0\u06d8\0\u06d8\0\u06d8"+
    "\0\u7b79\0\u06d8\0\u7bc2\0\u7c0b\0\u7c54\0\u7c9d\0\u7ce6\0\u7d2f"+
    "\0\u7d78\0\u7dc1\0\u06d8\0\u7e0a\0\u06d8\0\u7e53\0\u7e9c\0\u7ee5"+
    "\0\u7f2e\0\u06d8\0\u7f77\0\u7fc0\0\u8009\0\u8052";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[566];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\30\27\1\30\60\27\23\31\1\32\1\33\64\31\1\34"+
    "\1\35\1\36\1\35\1\34\1\36\1\37\1\35\1\40"+
    "\2\36\1\41\3\42\1\36\1\34\1\41\1\42\1\43"+
    "\1\34\1\44\2\34\1\45\1\34\24\36\4\35\1\46"+
    "\1\47\1\34\3\36\3\34\1\36\13\34\2\36\1\34"+
    "\1\35\1\36\1\35\1\34\1\36\1\37\1\35\1\40"+
    "\2\36\1\41\3\42\1\36\1\34\1\41\1\42\1\43"+
    "\1\34\1\44\2\34\1\50\1\34\24\36\4\35\1\46"+
    "\1\47\1\34\3\36\3\34\1\36\13\34\2\36\13\51"+
    "\1\41\3\42\2\51\1\41\1\42\1\52\3\51\1\53"+
    "\34\51\1\54\37\51\1\55\3\42\2\51\1\55\1\42"+
    "\1\52\3\51\1\53\1\56\33\51\1\54\37\51\1\41"+
    "\3\42\2\51\1\41\1\42\66\51\1\57\1\37\1\36"+
    "\1\37\1\60\1\36\2\37\1\40\2\36\1\41\1\61"+
    "\1\62\1\61\1\36\1\57\1\41\1\61\1\63\1\64"+
    "\1\65\3\57\1\66\24\36\4\37\2\57\1\67\3\36"+
    "\1\57\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\4\57\2\36\2\34\1\36\2\34"+
    "\1\36\3\34\2\36\1\41\3\42\1\36\1\34\1\41"+
    "\1\42\7\34\24\36\4\34\1\46\2\34\3\36\1\102"+
    "\2\34\1\36\13\34\2\36\23\103\1\104\1\103\1\105"+
    "\1\106\1\107\1\103\1\110\57\103\4\111\1\112\7\111"+
    "\1\113\1\114\1\113\3\111\1\113\2\111\1\115\63\111"+
    "\4\57\1\116\7\57\1\117\1\120\1\117\3\57\1\117"+
    "\2\57\1\121\3\57\1\122\37\57\1\123\1\124\2\57"+
    "\1\125\4\57\1\101\1\126\1\127\1\130\3\57\30\131"+
    "\1\132\60\131\1\51\1\37\1\36\1\37\1\51\1\36"+
    "\2\37\1\51\2\36\1\41\3\34\1\36\1\51\1\41"+
    "\1\34\4\51\1\133\2\51\24\36\4\37\1\46\2\51"+
    "\3\36\3\51\1\36\13\51\2\36\1\34\3\134\2\34"+
    "\2\134\3\34\1\41\3\42\2\34\1\41\1\42\4\34"+
    "\1\133\5\34\1\134\1\34\1\134\1\34\1\134\5\34"+
    "\1\134\3\34\2\134\1\34\4\134\3\34\1\134\1\34"+
    "\1\134\22\34\3\135\2\34\2\135\3\34\1\136\1\137"+
    "\1\140\1\137\2\34\1\136\1\137\4\34\1\141\5\34"+
    "\1\135\1\34\1\135\1\34\1\135\5\34\1\135\3\34"+
    "\2\135\1\34\4\135\3\34\1\135\1\34\1\135\21\34"+
    "\14\142\3\143\3\142\1\143\66\142\13\144\1\41\3\42"+
    "\2\144\1\41\1\42\66\144\111\145\31\34\1\146\57\34"+
    "\14\0\1\147\1\150\1\147\3\0\1\147\72\0\1\151"+
    "\3\0\1\151\12\0\3\151\3\0\1\151\37\0\12\151"+
    "\6\0\30\27\1\152\110\27\1\153\60\27\134\0\1\154"+
    "\1\155\107\0\1\156\1\157\65\0\1\35\1\0\1\35"+
    "\2\0\2\35\1\160\45\0\4\35\30\0\3\36\1\0"+
    "\3\36\1\0\2\36\4\0\4\36\7\0\30\36\3\0"+
    "\3\36\3\0\1\36\13\0\2\36\1\0\1\37\1\0"+
    "\1\37\2\0\2\37\46\0\4\37\42\0\1\41\5\0"+
    "\1\41\103\0\3\42\3\0\1\42\111\0\1\142\1\161"+
    "\64\0\4\162\1\163\7\162\3\0\3\162\1\0\2\162"+
    "\1\164\63\162\11\0\1\165\17\0\1\166\1\167\1\170"+
    "\1\171\1\172\1\0\1\173\1\0\1\174\1\175\3\0"+
    "\1\176\1\177\1\200\1\0\1\201\1\202\1\203\1\0"+
    "\1\204\1\205\1\206\35\0\1\207\3\0\1\165\16\0"+
    "\1\210\1\166\1\167\1\170\1\171\1\172\1\0\1\173"+
    "\1\0\1\174\1\175\3\0\1\176\1\177\1\211\1\0"+
    "\1\201\1\202\1\203\1\0\1\204\1\205\1\206\53\0"+
    "\1\142\1\212\150\0\1\213\37\0\1\55\5\0\1\55"+
    "\6\0\1\214\112\0\1\215\56\0\3\57\1\216\1\57"+
    "\1\217\2\220\1\57\1\221\1\222\1\57\3\0\3\57"+
    "\1\0\27\57\1\223\3\57\1\216\1\57\1\220\1\216"+
    "\26\57\1\223\4\0\1\224\3\0\1\224\2\0\4\225"+
    "\2\0\2\225\3\224\3\0\1\224\37\0\12\224\12\0"+
    "\1\224\3\0\1\224\2\0\3\225\1\61\2\0\2\225"+
    "\3\224\3\0\1\224\37\0\12\224\31\0\1\142\1\226"+
    "\65\0\1\227\1\230\1\227\1\0\1\230\2\227\1\0"+
    "\2\230\1\231\3\0\1\230\1\0\1\231\10\0\24\230"+
    "\4\227\3\0\3\230\3\0\1\230\13\0\2\230\64\0"+
    "\1\232\132\0\1\233\15\0\4\234\2\0\2\234\6\0"+
    "\1\235\57\0\23\103\1\236\1\103\1\237\1\240\1\0"+
    "\1\103\1\0\102\103\1\241\1\242\64\103\4\237\1\243"+
    "\7\237\3\0\3\237\1\0\2\237\1\103\63\237\4\244"+
    "\1\245\7\244\3\0\3\244\1\0\3\244\1\0\62\244"+
    "\4\111\1\0\7\111\3\0\3\111\1\0\2\111\1\0"+
    "\63\111\3\31\1\246\1\31\1\247\2\250\1\31\1\251"+
    "\1\252\1\31\3\0\3\31\1\0\33\31\1\246\1\31"+
    "\1\250\1\246\27\31\16\0\1\113\72\0\3\57\1\216"+
    "\1\57\1\217\2\220\1\57\1\253\1\222\1\57\3\0"+
    "\3\57\1\0\27\57\1\223\3\57\1\216\1\57\1\220"+
    "\1\216\26\57\1\223\16\0\1\117\74\0\1\254\2\0"+
    "\1\254\3\0\2\254\4\0\1\254\12\0\24\254\7\0"+
    "\3\254\3\0\1\254\13\0\2\254\71\0\1\255\114\0"+
    "\1\256\116\0\1\257\1\260\111\0\1\261\3\0\30\131"+
    "\1\262\107\131\1\263\2\131\1\264\2\131\1\265\10\131"+
    "\1\266\42\131\1\0\3\267\2\0\2\267\25\0\1\267"+
    "\1\0\1\267\1\0\1\267\5\0\1\267\3\0\2\267"+
    "\1\0\4\267\3\0\1\267\1\0\1\267\22\0\3\270"+
    "\2\0\2\270\25\0\1\270\1\0\1\270\1\0\1\270"+
    "\5\0\1\270\3\0\2\270\1\0\4\270\3\0\1\270"+
    "\1\0\1\270\34\0\1\136\5\0\1\136\105\0\1\137"+
    "\72\0\14\142\3\0\3\142\1\0\66\142\14\0\3\143"+
    "\3\0\1\143\70\0\1\230\2\0\1\230\3\0\2\230"+
    "\1\271\3\0\1\230\1\0\1\271\7\0\1\272\24\230"+
    "\7\0\3\230\3\0\1\230\13\0\2\230\16\0\1\147"+
    "\105\0\4\151\2\0\2\151\66\0\30\27\1\0\60\27"+
    "\1\0\1\273\1\0\1\273\2\0\2\273\46\0\4\273"+
    "\27\0\14\162\3\0\3\162\1\0\66\162\33\0\1\274"+
    "\110\0\1\275\15\0\1\276\3\0\1\277\71\0\1\300"+
    "\120\0\1\301\47\0\1\302\30\0\1\303\63\0\1\304"+
    "\20\0\1\305\130\0\1\306\1\0\1\307\66\0\1\310"+
    "\124\0\1\311\53\0\1\312\22\0\1\313\1\0\1\314"+
    "\2\0\1\315\1\316\1\317\101\0\1\320\12\0\1\321"+
    "\52\0\1\322\134\0\1\323\64\0\1\324\153\0\1\325"+
    "\110\0\1\326\115\0\1\327\77\0\1\330\74\0\1\331"+
    "\12\0\1\321\126\0\1\332\56\0\1\333\60\0\1\57"+
    "\2\0\2\57\46\0\1\57\1\0\2\57\30\0\3\334"+
    "\2\0\2\334\25\0\1\334\1\0\1\334\1\0\1\334"+
    "\5\0\1\334\3\0\2\334\1\0\4\334\3\0\1\334"+
    "\1\0\1\334\24\0\1\216\2\0\2\216\46\0\1\216"+
    "\1\0\2\216\30\0\3\335\2\0\2\335\21\0\1\336"+
    "\3\0\1\335\1\0\1\335\1\0\1\335\5\0\1\335"+
    "\3\0\2\335\1\0\4\335\3\0\1\335\1\0\1\335"+
    "\22\0\3\337\2\0\2\337\25\0\1\337\1\0\1\337"+
    "\1\0\1\337\5\0\1\337\3\0\2\337\1\0\4\337"+
    "\3\0\1\337\1\0\1\337\52\0\1\340\60\0\1\227"+
    "\1\0\1\227\2\0\2\227\46\0\4\227\30\0\3\230"+
    "\1\0\3\230\1\0\2\230\1\341\3\0\4\230\4\0"+
    "\1\342\2\0\30\230\3\0\3\230\3\0\1\230\13\0"+
    "\2\230\65\0\1\343\34\0\1\344\30\0\1\345\10\0"+
    "\1\346\33\0\1\347\1\0\14\241\3\103\3\241\1\103"+
    "\1\350\65\241\24\242\1\351\64\242\14\237\3\0\3\237"+
    "\1\0\66\237\26\0\1\103\62\0\3\244\1\352\1\353"+
    "\1\244\2\354\1\244\1\355\2\244\3\0\3\244\1\0"+
    "\33\244\1\352\1\244\1\354\1\352\27\244\3\0\1\31"+
    "\2\0\2\31\46\0\1\31\1\0\2\31\30\0\3\356"+
    "\2\0\2\356\25\0\1\356\1\0\1\356\1\0\1\356"+
    "\5\0\1\356\3\0\2\356\1\0\4\356\3\0\1\356"+
    "\1\0\1\356\24\0\1\246\2\0\2\246\46\0\1\246"+
    "\1\0\2\246\30\0\3\357\2\0\2\357\21\0\1\360"+
    "\3\0\1\357\1\0\1\357\1\0\1\357\5\0\1\357"+
    "\3\0\2\357\1\0\4\357\3\0\1\357\1\0\1\357"+
    "\22\0\3\361\2\0\2\361\25\0\1\361\1\0\1\361"+
    "\1\0\1\361\5\0\1\361\3\0\2\361\1\0\4\361"+
    "\3\0\1\361\1\0\1\361\22\0\3\335\2\0\2\335"+
    "\21\0\1\362\3\0\1\335\1\0\1\335\1\0\1\335"+
    "\5\0\1\335\3\0\2\335\1\0\4\335\3\0\1\335"+
    "\1\0\1\335\22\0\3\254\1\0\3\254\1\0\2\254"+
    "\4\0\4\254\4\0\1\57\2\0\30\254\3\0\3\254"+
    "\3\0\1\254\13\0\2\254\27\131\1\0\2\131\1\0"+
    "\2\131\1\0\10\131\1\0\42\131\33\0\1\363\113\0"+
    "\1\364\120\0\1\365\43\0\3\366\2\0\2\366\25\0"+
    "\1\366\1\0\1\366\1\0\1\366\5\0\1\366\3\0"+
    "\2\366\1\0\4\366\3\0\1\366\1\0\1\366\22\0"+
    "\3\367\2\0\2\367\25\0\1\367\1\0\1\367\1\0"+
    "\1\367\5\0\1\367\3\0\2\367\1\0\4\367\3\0"+
    "\1\367\1\0\1\367\23\0\1\230\2\0\1\230\3\0"+
    "\2\230\1\271\3\0\1\230\1\0\1\271\10\0\24\230"+
    "\7\0\3\230\3\0\1\230\13\0\2\230\1\0\1\227"+
    "\1\0\1\227\2\0\2\227\3\0\1\272\5\0\1\272"+
    "\34\0\4\227\30\0\1\273\1\0\1\273\2\0\2\273"+
    "\1\370\45\0\4\273\61\0\1\371\110\0\1\372\1\0"+
    "\1\373\12\0\1\374\113\0\1\375\71\0\1\376\111\0"+
    "\1\377\126\0\1\u0100\72\0\1\u0101\113\0\1\u0102\104\0"+
    "\1\u0103\6\0\1\u0104\101\0\1\u0105\107\0\1\u0106\126\0"+
    "\1\u0107\73\0\1\u0108\112\0\1\u0109\4\0\1\u010a\120\0"+
    "\1\u010b\74\0\1\u010c\114\0\1\u010d\116\0\1\u010e\101\0"+
    "\1\u010f\110\0\1\u0110\110\0\1\u0111\110\0\1\u0112\123\0"+
    "\1\u0113\110\0\1\u0114\73\0\1\u0115\103\0\1\u0116\110\0"+
    "\1\u0117\132\0\1\u0118\70\0\1\u0119\115\0\1\u011a\135\0"+
    "\1\u011b\71\0\1\374\42\0\3\57\2\0\2\57\25\0"+
    "\1\57\1\0\1\57\1\0\1\57\5\0\1\57\3\0"+
    "\2\57\1\0\4\57\3\0\1\57\1\0\1\57\22\0"+
    "\3\u011c\2\0\2\u011c\25\0\1\u011c\1\0\1\u011c\1\0"+
    "\1\u011c\5\0\1\u011c\3\0\2\u011c\1\0\4\u011c\3\0"+
    "\1\u011c\1\0\1\u011c\22\0\3\u011d\2\0\2\u011d\25\0"+
    "\1\u011d\1\0\1\u011d\1\0\1\u011d\5\0\1\u011d\3\0"+
    "\2\u011d\1\0\4\u011d\3\0\1\u011d\1\0\1\u011d\21\0"+
    "\27\340\1\u011e\61\340\13\0\1\341\5\0\1\341\5\0"+
    "\1\342\147\0\1\u011f\74\0\1\u0120\73\0\1\u0121\1\u0122"+
    "\104\0\1\u0123\120\0\1\u0124\46\0\14\241\3\103\3\241"+
    "\1\103\1\350\1\u0125\64\241\23\242\1\103\1\351\64\242"+
    "\3\0\1\244\2\0\2\244\16\0\1\103\27\0\1\244"+
    "\1\0\2\244\33\0\1\u0126\4\0\1\u0127\14\0\1\103"+
    "\65\0\1\352\2\0\2\352\16\0\1\103\27\0\1\352"+
    "\1\0\2\352\30\0\3\u0128\2\0\2\u0128\16\0\1\103"+
    "\6\0\1\u0128\1\0\1\u0128\1\0\1\u0128\5\0\1\u0128"+
    "\3\0\2\u0128\1\0\4\u0128\3\0\1\u0128\1\0\1\u0128"+
    "\22\0\3\31\2\0\2\31\25\0\1\31\1\0\1\31"+
    "\1\0\1\31\5\0\1\31\3\0\2\31\1\0\4\31"+
    "\3\0\1\31\1\0\1\31\22\0\3\u0129\2\0\2\u0129"+
    "\25\0\1\u0129\1\0\1\u0129\1\0\1\u0129\5\0\1\u0129"+
    "\3\0\2\u0129\1\0\4\u0129\3\0\1\u0129\1\0\1\u0129"+
    "\22\0\3\u012a\2\0\2\u012a\25\0\1\u012a\1\0\1\u012a"+
    "\1\0\1\u012a\5\0\1\u012a\3\0\2\u012a\1\0\4\u012a"+
    "\3\0\1\u012a\1\0\1\u012a\22\0\3\u012b\2\0\2\u012b"+
    "\25\0\1\u012b\1\0\1\u012b\1\0\1\u012b\5\0\1\u012b"+
    "\3\0\2\u012b\1\0\4\u012b\3\0\1\u012b\1\0\1\u012b"+
    "\53\0\1\u012c\115\0\1\u012d\113\0\1\u012e\47\0\3\u012f"+
    "\2\0\2\u012f\25\0\1\u012f\1\0\1\u012f\1\0\1\u012f"+
    "\5\0\1\u012f\3\0\2\u012f\1\0\4\u012f\3\0\1\u012f"+
    "\1\0\1\u012f\22\0\3\u0130\2\0\2\u0130\25\0\1\u0130"+
    "\1\0\1\u0130\1\0\1\u0130\5\0\1\u0130\3\0\2\u0130"+
    "\1\0\4\u0130\3\0\1\u0130\1\0\1\u0130\22\0\1\u0131"+
    "\1\0\1\u0131\2\0\2\u0131\46\0\4\u0131\76\0\1\u0132"+
    "\75\0\1\u0133\111\0\1\u0134\7\0\1\u0135\105\0\1\u0136"+
    "\110\0\1\u0137\104\0\1\u0138\63\0\1\u0139\134\0\1\u013a"+
    "\110\0\1\u013b\104\0\1\u013c\2\0\1\u013d\3\0\1\u013e"+
    "\6\0\1\u013f\110\0\1\u0140\103\0\1\u0141\107\0\1\u0142"+
    "\121\0\1\u0143\72\0\1\u0144\111\0\1\u0145\111\0\1\u0146"+
    "\107\0\1\u0147\123\0\1\u0148\2\0\1\u0149\101\0\1\u014a"+
    "\55\0\1\u014b\134\0\1\u014c\123\0\1\u014d\104\0\1\u014e"+
    "\77\0\1\u014f\110\0\1\u0150\117\0\1\u0151\57\0\1\u0152"+
    "\136\0\1\u0153\105\0\1\u0154\110\0\1\u0155\106\0\1\u0156"+
    "\117\0\1\u0157\102\0\1\u014f\1\u0158\143\0\1\u0159\22\0"+
    "\3\335\2\0\2\335\25\0\1\335\1\0\1\335\1\0"+
    "\1\335\5\0\1\335\3\0\2\335\1\0\4\335\3\0"+
    "\1\335\1\0\1\335\110\0\1\u015a\73\0\1\u015b\72\0"+
    "\1\u015c\121\0\1\u015b\120\0\1\u015d\70\0\1\u015e\53\0"+
    "\14\u0125\3\u015f\3\u0125\1\u015f\1\u0160\1\u0161\64\u0125\4\0"+
    "\1\u0126\4\0\1\u0127\100\0\3\u0128\2\0\2\u0128\25\0"+
    "\1\u0128\1\0\1\u0128\1\0\1\u0128\5\0\1\u0128\3\0"+
    "\2\u0128\1\0\4\u0128\3\0\1\u0128\1\0\1\u0128\22\0"+
    "\3\u0162\2\0\2\u0162\25\0\1\u0162\1\0\1\u0162\1\0"+
    "\1\u0162\5\0\1\u0162\3\0\2\u0162\1\0\4\u0162\3\0"+
    "\1\u0162\1\0\1\u0162\22\0\3\357\2\0\2\357\25\0"+
    "\1\357\1\0\1\357\1\0\1\357\5\0\1\357\3\0"+
    "\2\357\1\0\4\357\3\0\1\357\1\0\1\357\22\0"+
    "\3\u0163\2\0\2\u0163\17\0\1\57\5\0\1\u0163\1\0"+
    "\1\u0163\1\0\1\u0163\5\0\1\u0163\3\0\2\u0163\1\0"+
    "\4\u0163\3\0\1\u0163\1\0\1\u0163\55\0\1\u0164\103\0"+
    "\1\u0165\4\0\1\u0166\3\0\1\u0167\105\0\1\u0168\54\0"+
    "\3\u0169\2\0\2\u0169\25\0\1\u0169\1\0\1\u0169\1\0"+
    "\1\u0169\5\0\1\u0169\3\0\2\u0169\1\0\4\u0169\3\0"+
    "\1\u0169\1\0\1\u0169\22\0\3\u016a\2\0\2\u016a\25\0"+
    "\1\u016a\1\0\1\u016a\1\0\1\u016a\5\0\1\u016a\3\0"+
    "\2\u016a\1\0\4\u016a\3\0\1\u016a\1\0\1\u016a\57\0"+
    "\1\u016b\103\0\1\u016c\2\0\1\u016d\131\0\1\u016e\77\0"+
    "\1\u016f\55\0\1\u0170\134\0\1\u0171\117\0\1\u0172\77\0"+
    "\1\u0173\110\0\1\u0174\120\0\1\u0175\106\0\1\u0176\111\0"+
    "\1\u0177\102\0\1\u0178\116\0\1\u0179\112\0\1\u017a\110\0"+
    "\1\u017b\103\0\1\u017c\56\0\1\u017d\151\0\1\u017e\77\0"+
    "\1\u017f\114\0\1\u0180\120\0\1\u0181\101\0\1\u0182\116\0"+
    "\1\u0183\113\0\1\u0184\72\0\1\u0185\105\0\1\u0186\133\0"+
    "\1\u0187\70\0\1\u0188\107\0\1\u0189\110\0\1\u018a\111\0"+
    "\1\u018b\143\0\1\u018c\110\0\1\u018d\55\0\1\u018e\107\0"+
    "\1\u018f\106\0\1\u0190\112\0\1\u0191\54\0\23\u015f\1\u0192"+
    "\1\u0193\1\u0194\1\u0195\1\242\1\u015f\1\242\57\u015f\14\u0125"+
    "\3\u015f\3\u0125\1\u015f\1\u0160\101\u0125\3\u015f\3\u0125\1\u015f"+
    "\1\350\1\u0161\64\u0125\1\0\3\u0196\2\0\2\u0196\25\0"+
    "\1\u0196\1\0\1\u0196\1\0\1\u0196\5\0\1\u0196\3\0"+
    "\2\u0196\1\0\4\u0196\3\0\1\u0196\1\0\1\u0196\22\0"+
    "\3\u0197\2\0\2\u0197\17\0\1\57\5\0\1\u0197\1\0"+
    "\1\u0197\1\0\1\u0197\5\0\1\u0197\3\0\2\u0197\1\0"+
    "\4\u0197\3\0\1\u0197\1\0\1\u0197\50\0\1\u0198\4\0"+
    "\1\u0199\117\0\1\u019a\106\0\1\u019b\54\0\1\u019c\104\0"+
    "\3\u019d\2\0\2\u019d\25\0\1\u019d\1\0\1\u019d\1\0"+
    "\1\u019d\5\0\1\u019d\3\0\2\u019d\1\0\4\u019d\3\0"+
    "\1\u019d\1\0\1\u019d\74\0\1\u019e\100\0\1\u019f\102\0"+
    "\1\u01a0\114\0\1\u01a1\122\0\1\u01a2\106\0\1\u01a3\74\0"+
    "\1\u01a4\105\0\1\u01a5\131\0\1\u01a6\101\0\1\u01a7\106\0"+
    "\1\u01a8\104\0\1\u01a9\104\0\1\u01aa\110\0\1\u01ab\117\0"+
    "\1\u01ac\103\0\1\u01ad\125\0\1\u01ae\113\0\1\u01af\100\0"+
    "\1\u01b0\77\0\1\u01b1\112\0\1\u01b2\114\0\1\u01b3\113\0"+
    "\1\u01b4\113\0\1\u01b5\105\0\1\u01b6\101\0\1\u01b7\123\0"+
    "\1\u01b8\130\0\1\51\110\0\1\u01b9\64\0\1\u01ba\101\0"+
    "\1\u01bb\107\0\1\u01bc\110\0\1\u01bd\54\0\23\u015f\1\u0125"+
    "\1\u01be\107\u015f\1\u01bf\1\u0193\1\u0194\1\u0195\1\242\1\u015f"+
    "\1\242\57\u015f\4\u0194\1\u01c0\7\u0194\3\242\3\u0194\1\242"+
    "\1\u0194\1\u01c1\1\u015f\63\u0194\4\u01c2\1\u01c3\7\u01c2\3\242"+
    "\3\u01c2\1\242\1\u01c2\1\u01c4\1\u01c2\1\242\62\u01c2\1\0"+
    "\3\244\2\0\2\244\25\0\1\244\1\0\1\244\1\0"+
    "\1\244\5\0\1\244\3\0\2\244\1\0\4\244\3\0"+
    "\1\244\1\0\1\244\22\0\3\u01c5\2\0\2\u01c5\17\0"+
    "\1\57\5\0\1\u01c5\1\0\1\u01c5\1\0\1\u01c5\5\0"+
    "\1\u01c5\3\0\2\u01c5\1\0\4\u01c5\3\0\1\u01c5\1\0"+
    "\1\u01c5\64\0\1\u01c6\111\0\1\u01c7\106\0\1\u01c8\102\0"+
    "\1\u01c9\111\0\1\u01ca\117\0\1\u01cb\110\0\1\u01cc\116\0"+
    "\1\u01cd\73\0\1\u01ce\110\0\1\u01cf\122\0\1\u01d0\46\0"+
    "\1\u01d1\153\0\1\u01d2\76\0\1\u01d3\103\0\1\u01d4\127\0"+
    "\1\u01d5\76\0\1\u01d6\112\0\1\u01d7\117\0\1\u01d8\104\0"+
    "\1\u01d9\56\0\1\u01da\154\0\1\u01db\103\0\1\u01dc\102\0"+
    "\1\u01dd\112\0\1\u01de\114\0\1\u01df\107\0\1\u01e0\105\0"+
    "\1\u01bc\152\0\1\u01e1\37\0\1\u01e2\53\0\23\242\1\u015f"+
    "\1\351\64\242\23\103\1\350\1\u015f\1\u01e3\1\u01e4\62\103"+
    "\14\u0194\3\242\3\u0194\1\242\1\u0194\1\u01c1\70\u0194\1\u01c0"+
    "\7\u0194\3\242\3\u0194\1\242\1\u01e3\1\u01c1\1\u015f\63\u0194"+
    "\24\242\1\351\1\242\1\u015f\62\242\3\u01c2\1\u01e5\1\u01e6"+
    "\1\u01c2\2\u01e7\1\u01c2\1\u01e8\2\u01c2\3\242\3\u01c2\1\242"+
    "\1\u01c2\1\u01c4\31\u01c2\1\u01e5\1\u01c2\1\u01e7\1\u01e5\27\u01c2"+
    "\23\242\1\103\1\351\1\242\1\u015f\62\242\1\0\3\u01e9"+
    "\2\0\2\u01e9\17\0\1\57\5\0\1\u01e9\1\0\1\u01e9"+
    "\1\0\1\u01e9\5\0\1\u01e9\3\0\2\u01e9\1\0\4\u01e9"+
    "\3\0\1\u01e9\1\0\1\u01e9\65\0\1\u01ea\102\0\1\u01eb"+
    "\101\0\1\u01ec\124\0\1\u01ed\103\0\1\u01ee\105\0\1\u01ef"+
    "\116\0\1\u01f0\114\0\1\u01f1\100\0\1\u01f2\106\0\1\u01f3"+
    "\116\0\1\u01f4\103\0\1\u01f5\120\0\1\u01f6\121\0\1\u01f7"+
    "\103\0\1\u01f8\76\0\1\u01f9\110\0\1\u01fa\113\0\1\u01fb"+
    "\152\0\1\u011e\51\0\1\u01fc\44\0\4\u01e3\1\u01fd\7\u01e3"+
    "\3\103\3\u01e3\1\103\1\u01fe\2\u01e3\1\u01ff\1\237\1\u01e3"+
    "\1\237\57\u01e3\4\u0200\1\u0201\7\u0200\3\103\3\u0200\1\103"+
    "\1\236\1\u0200\1\u0202\1\240\1\244\1\u0200\1\244\57\u0200"+
    "\3\242\1\u01c2\2\242\2\u01c2\14\242\1\351\1\242\1\u015f"+
    "\27\242\1\u01c2\1\242\2\u01c2\33\242\1\u0203\4\242\1\u0204"+
    "\12\242\1\351\1\242\1\u015f\65\242\1\u01e5\2\242\2\u01e5"+
    "\14\242\1\351\1\242\1\u015f\27\242\1\u01e5\1\242\2\u01e5"+
    "\30\242\3\u0205\2\242\2\u0205\14\242\1\351\1\242\1\u015f"+
    "\6\242\1\u0205\1\242\1\u0205\1\242\1\u0205\5\242\1\u0205"+
    "\3\242\2\u0205\1\242\4\u0205\3\242\1\u0205\1\242\1\u0205"+
    "\21\242\1\0\3\u0206\2\0\2\u0206\17\0\1\57\5\0"+
    "\1\u0206\1\0\1\u0206\1\0\1\u0206\5\0\1\u0206\3\0"+
    "\2\u0206\1\0\4\u0206\3\0\1\u0206\1\0\1\u0206\57\0"+
    "\1\u0207\117\0\1\u0208\107\0\1\u0209\111\0\1\u020a\77\0"+
    "\1\u020b\124\0\1\u020c\71\0\1\u020d\113\0\1\u020e\112\0"+
    "\1\u020f\105\0\1\u0210\121\0\1\u0211\114\0\1\u0212\113\0"+
    "\1\346\32\0\1\u01e1\2\0\14\u01e3\3\103\3\u01e3\1\103"+
    "\1\u01fe\1\u01e3\1\237\1\u01ff\1\237\1\u01e3\1\237\63\u01e3"+
    "\1\u01fd\7\u01e3\3\103\3\u01e3\1\103\1\241\1\u0194\1\103"+
    "\63\u01e3\4\u0202\1\u0213\7\u0202\3\0\3\u0202\1\0\2\u0202"+
    "\1\u0200\1\237\62\u0202\23\103\1\236\1\103\1\237\1\u01e4"+
    "\1\0\1\103\1\0\57\103\3\u0200\1\u0214\1\u0215\1\u0200"+
    "\2\u0216\1\u0200\1\u0217\2\u0200\3\103\3\u0200\1\103\1\236"+
    "\1\u0200\1\u0202\1\u0218\1\244\1\u0200\1\244\24\u0200\1\u0214"+
    "\1\u0200\1\u0216\1\u0214\27\u0200\4\237\1\243\7\237\3\0"+
    "\3\237\1\0\2\237\1\103\1\u01e3\62\237\4\242\1\u0203"+
    "\4\242\1\u0204\12\242\1\351\65\242\3\u0205\2\242\2\u0205"+
    "\14\242\1\351\10\242\1\u0205\1\242\1\u0205\1\242\1\u0205"+
    "\5\242\1\u0205\3\242\2\u0205\1\242\4\u0205\3\242\1\u0205"+
    "\1\242\1\u0205\22\242\3\u0219\2\242\2\u0219\14\242\1\351"+
    "\10\242\1\u0219\1\242\1\u0219\1\242\1\u0219\5\242\1\u0219"+
    "\3\242\2\u0219\1\242\4\u0219\3\242\1\u0219\1\242\1\u0219"+
    "\21\242\27\0\1\57\126\0\1\u021a\72\0\1\u021b\117\0"+
    "\1\u021c\103\0\1\u021d\127\0\1\u021e\75\0\1\u021f\110\0"+
    "\1\u0220\120\0\1\u0221\100\0\1\u0222\110\0\1\u01bc\53\0"+
    "\3\u0202\1\u0223\1\u0224\1\u0202\2\u0225\1\u0202\1\u0226\2\u0202"+
    "\3\0\3\u0202\1\0\33\u0202\1\u0223\1\u0202\1\u0225\1\u0223"+
    "\27\u0202\3\103\1\u0200\2\103\2\u0200\13\103\1\236\1\103"+
    "\1\237\1\u01e4\1\0\1\103\1\0\24\103\1\u0200\1\103"+
    "\2\u0200\33\103\1\u0227\4\103\1\u0228\11\103\1\236\1\103"+
    "\1\237\1\u01e4\1\0\1\103\1\0\62\103\1\u0214\2\103"+
    "\2\u0214\13\103\1\236\1\103\1\237\1\u01e4\1\0\1\103"+
    "\1\0\24\103\1\u0214\1\103\2\u0214\30\103\3\u0229\2\103"+
    "\2\u0229\13\103\1\236\1\103\1\237\1\u01e4\1\0\1\103"+
    "\1\0\3\103\1\u0229\1\103\1\u0229\1\103\1\u0229\5\103"+
    "\1\u0229\3\103\2\u0229\1\103\4\u0229\3\103\1\u0229\1\103"+
    "\1\u0229\21\103\4\244\1\245\7\244\3\0\3\244\1\0"+
    "\3\244\1\103\62\244\1\242\3\u022a\2\242\2\u022a\14\242"+
    "\1\351\10\242\1\u022a\1\242\1\u022a\1\242\1\u022a\5\242"+
    "\1\u022a\3\242\2\u022a\1\242\4\u022a\3\242\1\u022a\1\242"+
    "\1\u022a\21\242\27\0\1\u022b\126\0\1\u022c\74\0\1\u022d"+
    "\57\0\3\237\1\u0202\1\243\1\237\2\u0202\4\237\3\0"+
    "\3\237\1\0\2\237\1\103\1\u01e3\27\237\1\u0202\1\237"+
    "\2\u0202\33\237\1\u022e\4\237\1\u022f\2\237\3\0\3\237"+
    "\1\0\2\237\1\103\1\u01e3\65\237\1\u0223\1\243\1\237"+
    "\2\u0223\4\237\3\0\3\237\1\0\2\237\1\103\1\u01e3"+
    "\27\237\1\u0223\1\237\2\u0223\30\237\3\u0230\1\243\1\237"+
    "\2\u0230\4\237\3\0\3\237\1\0\2\237\1\103\1\u01e3"+
    "\6\237\1\u0230\1\237\1\u0230\1\237\1\u0230\5\237\1\u0230"+
    "\3\237\2\u0230\1\237\4\u0230\3\237\1\u0230\1\237\1\u0230"+
    "\21\237\4\103\1\u0227\4\103\1\u0228\11\103\1\236\1\103"+
    "\1\237\1\240\1\0\1\103\1\0\60\103\3\u0229\2\103"+
    "\2\u0229\13\103\1\236\1\103\1\237\1\240\1\0\1\103"+
    "\1\0\3\103\1\u0229\1\103\1\u0229\1\103\1\u0229\5\103"+
    "\1\u0229\3\103\2\u0229\1\103\4\u0229\3\103\1\u0229\1\103"+
    "\1\u0229\22\103\3\u0231\2\103\2\u0231\13\103\1\236\1\103"+
    "\1\237\1\240\1\0\1\103\1\0\3\103\1\u0231\1\103"+
    "\1\u0231\1\103\1\u0231\5\103\1\u0231\3\103\2\u0231\1\103"+
    "\4\u0231\3\103\1\u0231\1\103\1\u0231\21\103\1\242\3\u01c2"+
    "\2\242\2\u01c2\14\242\1\351\10\242\1\u01c2\1\242\1\u01c2"+
    "\1\242\1\u01c2\5\242\1\u01c2\3\242\2\u01c2\1\242\4\u01c2"+
    "\3\242\1\u01c2\1\242\1\u01c2\21\242\27\0\1\u0232\61\0"+
    "\4\237\1\u0233\4\237\1\u022f\2\237\3\0\3\237\1\0"+
    "\67\237\3\u0230\1\243\1\237\2\u0230\4\237\3\0\3\237"+
    "\1\0\2\237\1\103\7\237\1\u0230\1\237\1\u0230\1\237"+
    "\1\u0230\5\237\1\u0230\3\237\2\u0230\1\237\4\u0230\3\237"+
    "\1\u0230\1\237\1\u0230\22\237\3\u0234\1\243\1\237\2\u0234"+
    "\4\237\3\0\3\237\1\0\2\237\1\103\7\237\1\u0234"+
    "\1\237\1\u0234\1\237\1\u0234\5\237\1\u0234\3\237\2\u0234"+
    "\1\237\4\u0234\3\237\1\u0234\1\237\1\u0234\21\237\1\103"+
    "\3\u0235\2\103\2\u0235\13\103\1\236\1\103\1\237\1\240"+
    "\1\0\1\103\1\0\3\103\1\u0235\1\103\1\u0235\1\103"+
    "\1\u0235\5\103\1\u0235\3\103\2\u0235\1\103\4\u0235\3\103"+
    "\1\u0235\1\103\1\u0235\21\103\4\237\1\u022e\4\237\1\u022f"+
    "\2\237\3\0\3\237\1\0\2\237\1\103\64\237\3\u0236"+
    "\1\243\1\237\2\u0236\4\237\3\0\3\237\1\0\2\237"+
    "\1\103\7\237\1\u0236\1\237\1\u0236\1\237\1\u0236\5\237"+
    "\1\u0236\3\237\2\u0236\1\237\4\u0236\3\237\1\u0236\1\237"+
    "\1\u0236\21\237\1\103\3\u0200\2\103\2\u0200\13\103\1\236"+
    "\1\103\1\237\1\240\1\0\1\103\1\0\3\103\1\u0200"+
    "\1\103\1\u0200\1\103\1\u0200\5\103\1\u0200\3\103\2\u0200"+
    "\1\103\4\u0200\3\103\1\u0200\1\103\1\u0200\21\103\1\237"+
    "\3\u0202\1\243\1\237\2\u0202\4\237\3\0\3\237\1\0"+
    "\2\237\1\103\7\237\1\u0202\1\237\1\u0202\1\237\1\u0202"+
    "\5\237\1\u0202\3\237\2\u0202\1\237\4\u0202\3\237\1\u0202"+
    "\1\237\1\u0202\21\237";

  private static int [] zzUnpackTrans() {
    int [] result = new int[32923];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\13\0\1\1\3\0\1\1\5\0\2\1\1\11"+
    "\2\1\1\11\3\1\1\11\5\1\2\11\1\1\1\11"+
    "\1\1\1\11\3\1\1\11\4\1\2\11\2\1\1\11"+
    "\2\1\7\11\5\1\2\11\2\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\4\1\1\11\4\1\1\11"+
    "\3\1\1\11\1\1\1\11\2\1\2\11\1\1\1\11"+
    "\2\1\1\0\1\11\1\0\2\11\2\0\1\11\2\0"+
    "\1\11\1\0\1\11\20\0\1\1\1\11\1\1\1\11"+
    "\3\0\6\1\1\11\1\0\1\11\1\1\5\0\1\11"+
    "\3\0\1\1\4\0\6\1\1\0\5\11\1\0\1\11"+
    "\3\0\2\1\2\0\1\1\42\0\1\11\3\0\1\11"+
    "\5\0\1\1\7\0\1\11\5\0\2\1\3\0\1\1"+
    "\17\0\1\1\22\0\1\11\6\0\1\1\11\0\3\1"+
    "\10\0\1\11\1\0\1\11\4\0\1\11\3\0\1\11"+
    "\10\0\1\11\5\0\2\11\11\0\3\1\3\0\1\11"+
    "\3\0\2\1\1\0\1\11\14\0\1\11\2\0\1\11"+
    "\6\0\1\11\3\0\1\11\1\0\1\11\1\0\1\1"+
    "\7\0\1\1\4\0\1\11\4\0\1\11\20\0\1\11"+
    "\2\0\1\11\3\0\2\11\1\1\2\11\5\0\1\1"+
    "\12\0\1\11\1\0\3\11\2\0\2\11\1\0\1\11"+
    "\6\0\1\11\3\0\1\11\3\0\2\1\7\0\1\11"+
    "\4\0\1\1\2\11\1\0\1\11\1\0\2\11\4\0"+
    "\1\1\2\0\2\1\10\0\1\1\2\0\1\11\3\0"+
    "\1\11\2\0\4\1\3\0\1\11\1\0\4\11\1\1"+
    "\1\11\4\0\3\1\1\0\1\11\1\0\1\11\3\0"+
    "\1\1\1\11\2\0\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[566];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
  int nextState;
  boolean macroDefinition;

  int braceCount;
  int bracketCount;
  int commentCount;

  public _JFlexLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _JFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case COMMENT: {
              yybegin(REPORT_UNCLOSED); return FLEX_BLOCK_COMMENT;
            }
            case 567: break;
            case STATES: {
              nextState=REGEXPSTART; yybegin(REPORT_UNCLOSED);
            }
            case 568: break;
            case JAVA_CODE: {
              nextState=REGEXPSTART; yybegin(REPORT_UNCLOSED); return FLEX_RAW;
            }
            case 569: break;
            case STRING_CONTENT: {
              yybegin(REPORT_UNCLOSED); return FLEX_STRING;
            }
            case 570: break;
            case CHARCLASS: {
              nextState=REGEXP; yybegin(REPORT_UNCLOSED); return FLEX_BRACK2;
            }
            case 571: break;
            case COPY: {
              yybegin(REPORT_UNCLOSED); return FLEX_RAW;
            }
            case 572: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return FLEX_RAW;
            }
          case 123: break;
          case 2: 
            { return FLEX_LINE_COMMENT;
            }
          case 124: break;
          case 3: 
            { return BAD_CHARACTER;
            }
          case 125: break;
          case 4: 
            { 
            }
          case 126: break;
          case 5: 
            { return FLEX_NUMBER;
            }
          case 127: break;
          case 6: 
            { return FLEX_ID;
            }
          case 128: break;
          case 7: 
            { return FLEX_DOT;
            }
          case 129: break;
          case 8: 
            { return WHITE_SPACE;
            }
          case 130: break;
          case 9: 
            { return FLEX_NEWLINE;
            }
          case 131: break;
          case 10: 
            { return FLEX_COMMA;
            }
          case 132: break;
          case 11: 
            { yybegin(REGEXP); return FLEX_EQ;
            }
          case 133: break;
          case 12: 
            { yypushback(yylength()); yybegin(REGEXP);
            }
          case 134: break;
          case 13: 
            { return FLEX_BRACE2;
            }
          case 135: break;
          case 14: 
            { yybegin(STATES); return FLEX_ANGLE1;
            }
          case 136: break;
          case 15: 
            { return FLEX_CHAR;
            }
          case 137: break;
          case 16: 
            { yypushback(yylength()); if (macroDefinition) yybegin(MACROS); else yybegin(REGEXPSTART);
            }
          case 138: break;
          case 17: 
            { return FLEX_FSLASH;
            }
          case 139: break;
          case 18: 
            { return FLEX_STAR;
            }
          case 140: break;
          case 19: 
            { nextState = REGEXP; yybegin(STRING_CONTENT);
            }
          case 141: break;
          case 20: 
            { if (macroDefinition) return FLEX_CHAR; else yybegin(JAVA_CODE); return FLEX_BRACE1;
            }
          case 142: break;
          case 21: 
            { if (macroDefinition) yybegin(EXPRBAR); return FLEX_BAR;
            }
          case 143: break;
          case 22: 
            { yybegin(CHARCLASS); return FLEX_BRACK1;
            }
          case 144: break;
          case 23: 
            { return FLEX_DOLLAR;
            }
          case 145: break;
          case 24: 
            { return FLEX_BANG;
            }
          case 146: break;
          case 25: 
            { return FLEX_TILDE;
            }
          case 147: break;
          case 26: 
            { return FLEX_PAREN1;
            }
          case 148: break;
          case 27: 
            { return FLEX_PAREN2;
            }
          case 149: break;
          case 28: 
            { return FLEX_PLUS;
            }
          case 150: break;
          case 29: 
            { return FLEX_QUESTION;
            }
          case 151: break;
          case 30: 
            { return FLEX_HAT;
            }
          case 152: break;
          case 31: 
            { nextState=REGEXP; yybegin(SKIP_WSNL); return FLEX_ANGLE2;
            }
          case 153: break;
          case 32: 
            { if (braceCount > 0) braceCount--; else { yypushback(1); yybegin(REGEXPSTART); return FLEX_RAW; }
            }
          case 154: break;
          case 33: 
            { braceCount++;
            }
          case 155: break;
          case 34: 
            { yypushback(yylength()); yybegin(nextState); return FLEX_STRING;
            }
          case 156: break;
          case 35: 
            { yybegin(nextState); return FLEX_STRING;
            }
          case 157: break;
          case 36: 
            { bracketCount=0; yypushback(yylength()); nextState=REGEXP; yybegin(REPORT_UNCLOSED);
            }
          case 158: break;
          case 37: 
            { nextState=CHARCLASS; yybegin(STRING_CONTENT);
            }
          case 159: break;
          case 38: 
            { bracketCount++; return FLEX_BRACK1;
            }
          case 160: break;
          case 39: 
            { if (bracketCount > 0) bracketCount--; else yybegin(REGEXP); return FLEX_BRACK2;
            }
          case 161: break;
          case 40: 
            { return FLEX_DASH;
            }
          case 162: break;
          case 41: 
            { yybegin(REGEXP); return FLEX_BRACE2;
            }
          case 163: break;
          case 42: 
            { yypushback(yylength()); yybegin(REPORT_UNCLOSED); return FLEX_STRING;
            }
          case 164: break;
          case 43: 
            { yybegin(STRING_CONTENT);
            }
          case 165: break;
          case 44: 
            { yybegin(nextState); return FLEX_NEWLINE;
            }
          case 166: break;
          case 45: 
            { yypushback(yylength()); yybegin(nextState);
            }
          case 167: break;
          case 46: 
            { yypushback(yylength()); yybegin(nextState); return FLEX_UNCLOSED;
            }
          case 168: break;
          case 47: 
            { yybegin(REGEXPSTART); return FLEX_BRACE1;
            }
          case 169: break;
          case 48: 
            { macroDefinition = true; nextState = MACROS; yybegin(SKIP_TOEOL); return FLEX_TWO_PERCS;
            }
          case 170: break;
          case 49: 
            { commentCount++;
            }
          case 171: break;
          case 50: 
            { if (commentCount > 0) commentCount--; else { yybegin(nextState); return FLEX_BLOCK_COMMENT; }
            }
          case 172: break;
          case 51: 
            { nextState=MACROS; yybegin(COMMENT);
            }
          case 173: break;
          case 52: 
            { return FLEX_STRING;
            }
          case 174: break;
          case 53: 
            { nextState=COPY; yybegin(SKIP_TOEOL); return FLEX_OPT_CODE1;
            }
          case 175: break;
          case 54: 
            { return FLEX_OPT_XSTATE;
            }
          case 176: break;
          case 55: 
            { macroDefinition=false; nextState=REGEXPSTART; yybegin(SKIP_TOEOL); return FLEX_TWO_PERCS;
            }
          case 177: break;
          case 56: 
            { return FLEX_OPT_STATE;
            }
          case 178: break;
          case 57: 
            { nextState = REGEXPSTART; yybegin(COMMENT);
            }
          case 179: break;
          case 58: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 20;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 21;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { yypushback(1); nextState=REGEXP; yybegin(SKIP_WSNL);
            }
          case 180: break;
          case 59: 
            { nextState=REGEXP; yybegin(COMMENT);
            }
          case 181: break;
          case 60: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(REPEATEXP); return FLEX_BRACE1;
            }
          case 182: break;
          case 61: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { nextState=REGEXPSTART0; yybegin(SKIP_WSNL); return FLEX_ANGLE2;
            }
          case 183: break;
          case 62: 
            { return FLEX_BARBAR;
            }
          case 184: break;
          case 63: 
            { return FLEX_TILDETILDE;
            }
          case 185: break;
          case 64: 
            { yypushback(1); return FLEX_CHAR;
            }
          case 186: break;
          case 65: 
            { return FLEX_DASHDASH;
            }
          case 187: break;
          case 66: 
            { return FLEX_AMPAMP;
            }
          case 188: break;
          case 67: 
            { nextState=MACROS; yybegin(SKIP_TOEOL); return FLEX_OPT_CODE2;
            }
          case 189: break;
          case 68: 
            { return FLEX_VERSION;
            }
          case 190: break;
          case 69: 
            { yybegin(REGEXP_CODEPOINT_SEQUENCE);
            }
          case 191: break;
          case 70: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(MACROUSE); return FLEX_BRACE1;
            }
          case 192: break;
          case 71: 
            { yybegin(STRING_CODEPOINT_SEQUENCE);
            }
          case 193: break;
          case 72: 
            { return FLEX_OPT_INT;
            }
          case 194: break;
          case 73: 
            { return FLEX_OPT_CUP;
            }
          case 195: break;
          case 74: 
            { return FLEX_CHAR_CLASS;
            }
          case 196: break;
          case 75: 
            { return FLEX_OPT_TYPE;
            }
          case 197: break;
          case 76: 
            { nextState=COPY; yybegin(SKIP_TOEOL); return FLEX_OPT_EOF1;
            }
          case 198: break;
          case 77: 
            { return FLEX_OPT_FULL;
            }
          case 199: break;
          case 78: 
            { return FLEX_OPT_LINE;
            }
          case 200: break;
          case 79: 
            { return FLEX_OPT_CHAR;
            }
          case 201: break;
          case 80: 
            { return FLEX_OPT_7BIT;
            }
          case 202: break;
          case 81: 
            { return FLEX_OPT_8BIT;
            }
          case 203: break;
          case 82: 
            { nextState=MACROS; yybegin(SKIP_TOEOL); return FLEX_OPT_EOF2;
            }
          case 204: break;
          case 83: 
            { nextState=COPY; yybegin(SKIP_TOEOL); return FLEX_OPT_INIT1;
            }
          case 205: break;
          case 84: 
            { return FLEX_OPT_FINAL;
            }
          case 206: break;
          case 85: 
            { return FLEX_OPT_YYEOF;
            }
          case 207: break;
          case 86: 
            { return FLEX_OPT_CLASS;
            }
          case 208: break;
          case 87: 
            { return FLEX_OPT_DEBUG;
            }
          case 209: break;
          case 88: 
            { return FLEX_OPT16BIT;
            }
          case 210: break;
          case 89: 
            { nextState=MACROS; yybegin(SKIP_TOEOL); return FLEX_OPT_INIT2;
            }
          case 211: break;
          case 90: 
            { return FLEX_OPT_CUPSYM;
            }
          case 212: break;
          case 91: 
            { return FLEX_OPT_COLUMN;
            }
          case 213: break;
          case 92: 
            { return FLEX_OPT_PUBLIC;
            }
          case 214: break;
          case 93: 
            { return FLEX_OPT_BUFFER;
            }
          case 215: break;
          case 94: 
            { return FLEX_EOF;
            }
          case 216: break;
          case 95: 
            { return FLEX_OPT_UNICODE;
            }
          case 217: break;
          case 96: 
            { return FLEX_OPT_INTEGER;
            }
          case 218: break;
          case 97: 
            { return FLEX_OPT_INTWRAP;
            }
          case 219: break;
          case 98: 
            { return FLEX_OPT_INCLUDE;
            }
          case 220: break;
          case 99: 
            { return FLEX_OPT_NOTUNIX;
            }
          case 221: break;
          case 100: 
            { return FLEX_OPT_EXTENDS;
            }
          case 222: break;
          case 101: 
            { nextState=COPY; yybegin(SKIP_TOEOL); return FLEX_OPT_EOFVAL1;
            }
          case 223: break;
          case 102: 
            { return FLEX_OPT_CTORARG;
            }
          case 224: break;
          case 103: 
            { nextState=MACROS; yybegin(SKIP_TOEOL); return FLEX_OPT_EOFVAL2;
            }
          case 225: break;
          case 104: 
            { return FLEX_OPT_EOFTHROW;
            }
          case 226: break;
          case 105: 
            { return FLEX_OPT_EOFCLOSE;
            }
          case 227: break;
          case 106: 
            { return FLEX_OPT_FUNCTION;
            }
          case 228: break;
          case 107: 
            { return FLEX_OPT_ABSTRACT;
            }
          case 229: break;
          case 108: 
            { return FLEX_OPT_CUPDEBUG;
            }
          case 230: break;
          case 109: 
            { return FLEX_OPT_CASELESS;
            }
          case 231: break;
          case 110: 
            { return FLEX_OPT_INITTHROW;
            }
          case 232: break;
          case 111: 
            { nextState=COPY; yybegin(SKIP_TOEOL); return FLEX_OPT_EOFTHROW1;
            }
          case 233: break;
          case 112: 
            { return FLEX_OPT_SCANERROR;
            }
          case 234: break;
          case 113: 
            { nextState=MACROS; yybegin(SKIP_TOEOL); return FLEX_OPT_EOFTHROW2;
            }
          case 235: break;
          case 114: 
            { nextState=COPY; yybegin(SKIP_TOEOL); return FLEX_OPT_INITTHROW1;
            }
          case 236: break;
          case 115: 
            { return FLEX_OPT_IMPLEMENTS;
            }
          case 237: break;
          case 116: 
            { return FLEX_OPT_IGNORECASE;
            }
          case 238: break;
          case 117: 
            { return FLEX_OPT_APIPRIVATE;
            }
          case 239: break;
          case 118: 
            { return FLEX_OPT_YYLEXTHROW;
            }
          case 240: break;
          case 119: 
            { return FLEX_OPT_STANDALONE;
            }
          case 241: break;
          case 120: 
            { nextState=MACROS; yybegin(SKIP_TOEOL); return FLEX_OPT_INITTHROW2;
            }
          case 242: break;
          case 121: 
            { nextState=COPY; yybegin(SKIP_TOEOL); return FLEX_OPT_YYLEXTHROW1;
            }
          case 243: break;
          case 122: 
            { nextState=MACROS; yybegin(SKIP_TOEOL); return FLEX_OPT_YYLEXTHROW2;
            }
          case 244: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
