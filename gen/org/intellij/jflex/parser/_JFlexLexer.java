/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

/*
 * Copyright 2011-present Greg Shrago
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.intellij.jflex.parser;

import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.intellij.jflex.parser.JFlexParserDefinition.FLEX_NEWLINE;
import static org.intellij.jflex.psi.JFlexTypes.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_JFlexLexer.flex</tt>
 */
public class _JFlexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int MACROS = 4;
  public static final int CODE = 6;
  public static final int REGEXPSTART = 8;
  public static final int EXPRBAR = 10;
  public static final int REGEXP = 12;
  public static final int STATES = 14;
  public static final int ACTION_CODE = 16;
  public static final int STRING_CONTENT = 18;
  public static final int CHARCLASS = 20;
  public static final int MACROUSE = 22;
  public static final int REPEATEXP = 24;
  public static final int CLASSCHARS = 26;
  public static final int CHARRANGE = 28;
  public static final int REGEXP_CODEPOINT = 30;
  public static final int STRING_CODEPOINT = 32;
  public static final int SKIP_TOEOL = 34;
  public static final int SKIP_WSNL = 36;
  public static final int REPORT_UNCLOSED = 38;
  public static final int REGEXPSTART0 = 40;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  3,  4,  4,  5,  6,  7,  7,  8,  8,  9,  9, 
    10, 10, 11, 11, 12, 12, 13, 13, 13, 13, 14, 14, 15, 15, 16, 16, 
    17, 17, 18, 18, 19, 19, 20, 20, 21, 21
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [13, 6, 2]
   * Total runtime size is 23072 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>8]<<6)|((ch>>2)&0x3f)]<<2)|(ch&0x3)];
  }

  /* The ZZ_CMAP_Z table has 4352 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\1\1\21\1\22\1\23\1\1\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\1\1\34"+
    "\1\35\1\36\2\37\1\40\7\37\1\41\1\42\1\43\1\37\1\44\1\45\2\37\31\1\1\46\121"+
    "\1\1\47\4\1\1\50\1\1\1\51\1\52\1\53\1\54\1\55\1\56\53\1\1\57\41\37\1\1\1\60"+
    "\1\61\1\1\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\3\37\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\1\37\1\113\5\37\3\1\1\114\1\115\1\116\12\37\4\1\1\117\17\37\2\73\1\120\41"+
    "\37\2\1\1\121\1\122\3\37\1\123\100\37\1\124\13\37\1\125\24\37\1\126\1\127"+
    "\1\37\1\130\1\131\1\132\1\133\20\37\1\134\5\37\1\135\2\37\1\136\16\37\246"+
    "\1\1\137\20\1\1\140\1\141\25\73\1\142\51\37\2\1\1\143\u0b05\37\1\144\1\145"+
    "\u02fe\37");

  /* The ZZ_CMAP_Y table has 6528 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\2\0\1\1\1\2\3\0\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\0\1\34\6"+
    "\0\1\35\1\36\1\37\1\40\1\3\1\41\1\37\1\3\5\16\1\42\7\16\1\42\162\16\1\43\1"+
    "\44\2\16\1\43\3\3\1\16\1\45\1\3\1\46\4\3\21\0\1\47\12\0\1\16\1\50\1\44\1\51"+
    "\1\3\1\37\1\42\1\50\4\16\1\52\24\16\1\52\42\16\1\53\1\0\1\44\47\16\2\54\1"+
    "\55\10\16\1\42\1\41\1\3\1\55\11\16\1\3\1\56\1\57\7\0\3\60\1\61\1\62\1\61\2"+
    "\3\6\16\1\42\1\3\1\42\3\3\1\0\1\63\1\56\1\3\2\60\1\64\1\3\12\16\1\65\3\60"+
    "\1\66\3\60\1\67\1\44\1\70\30\16\1\71\1\60\1\72\1\66\1\73\1\74\1\75\2\60\1"+
    "\76\1\77\3\3\1\100\1\101\7\16\4\60\2\0\1\102\1\55\25\16\1\103\2\60\1\104\3"+
    "\3\2\60\1\76\7\16\1\105\2\0\1\43\1\37\1\3\5\16\1\103\1\106\2\60\2\107\1\110"+
    "\4\3\6\16\1\111\21\3\1\112\2\16\1\113\1\54\1\114\12\3\1\115\1\60\1\116\1\0"+
    "\3\60\1\117\1\60\15\16\1\103\1\120\3\60\1\121\1\111\1\66\2\16\1\103\1\122"+
    "\2\60\1\55\1\16\1\123\1\16\1\124\1\55\1\16\2\77\5\16\1\50\1\16\1\46\1\44\1"+
    "\43\1\120\1\60\2\125\1\126\1\3\1\127\1\3\1\52\1\103\1\122\2\60\1\130\1\3\1"+
    "\56\1\3\1\131\1\55\1\42\1\132\1\77\5\16\1\50\1\16\1\50\1\133\1\43\1\134\1"+
    "\64\1\127\1\125\1\110\1\135\1\3\1\55\1\46\1\3\1\122\2\60\1\76\1\136\2\3\1"+
    "\131\1\55\1\16\2\52\5\16\1\50\1\16\1\50\1\55\1\43\1\120\1\60\2\61\1\110\1"+
    "\45\3\3\1\103\1\122\2\60\1\137\1\3\1\140\1\3\1\131\1\55\1\16\2\77\5\16\1\50"+
    "\1\16\1\50\1\55\1\43\1\120\1\60\2\125\1\110\1\3\1\122\1\3\1\52\1\103\1\122"+
    "\2\60\1\41\3\3\1\141\1\55\1\42\1\44\1\50\1\43\1\133\1\50\1\132\1\45\1\42\1"+
    "\44\2\16\1\43\1\122\1\64\1\122\1\142\1\110\1\45\1\127\3\3\1\122\2\60\2\3\1"+
    "\137\1\3\1\124\1\55\1\16\2\50\5\16\1\50\2\16\1\123\1\43\1\71\1\60\2\142\1"+
    "\110\1\3\1\62\1\143\1\3\1\103\1\122\2\60\4\3\1\144\1\55\1\16\2\50\5\16\1\50"+
    "\2\16\1\55\1\43\1\120\1\60\2\142\1\110\1\3\1\62\1\3\1\37\1\103\1\122\2\60"+
    "\1\133\3\3\1\144\1\55\1\16\2\50\11\16\1\42\1\71\1\60\2\142\1\126\1\3\1\127"+
    "\1\3\1\115\1\103\1\122\2\60\2\3\1\44\1\16\1\122\1\55\3\16\1\42\1\44\5\16\1"+
    "\52\2\16\1\41\1\16\1\42\1\145\1\127\1\60\1\146\2\60\1\3\1\147\2\54\1\122\3"+
    "\3\1\55\13\16\1\101\1\60\1\64\1\56\1\16\1\105\1\0\1\150\2\60\1\67\11\3\1\133"+
    "\1\77\1\46\1\41\1\3\1\16\1\55\1\16\1\55\1\151\1\44\1\55\1\101\1\60\1\61\1"+
    "\104\1\16\1\46\1\0\1\152\2\60\1\67\1\16\10\3\1\45\5\3\1\153\1\3\2\60\1\67"+
    "\2\3\1\154\1\40\1\155\2\16\1\55\10\16\1\45\1\131\3\60\1\116\1\156\1\16\1\107"+
    "\2\60\1\131\10\60\1\157\1\3\1\145\16\3\12\16\1\65\2\60\1\160\1\161\1\162\2"+
    "\60\1\67\1\3\1\16\1\103\1\76\1\103\1\163\1\164\1\165\1\166\1\107\1\70\2\16"+
    "\1\103\1\160\1\0\1\167\2\60\1\116\1\67\11\16\1\52\1\3\1\41\12\16\1\42\23\16"+
    "\1\50\1\43\1\16\1\42\1\50\1\43\12\16\1\50\1\43\10\16\1\50\1\43\1\16\1\42\1"+
    "\50\1\43\3\16\1\42\16\16\1\50\1\43\20\16\1\42\1\170\10\3\4\16\4\3\25\16\1"+
    "\171\1\54\1\172\1\55\132\16\1\77\4\16\1\55\5\16\1\42\1\3\22\16\1\42\1\44\1"+
    "\113\1\54\1\114\1\3\3\16\1\50\1\103\1\63\2\3\4\16\1\103\1\63\2\3\4\16\1\103"+
    "\3\3\3\16\1\50\1\173\3\3\15\16\1\174\4\60\1\165\2\0\1\132\1\56\1\175\2\60"+
    "\1\67\7\3\1\100\1\153\2\60\1\67\1\3\26\16\2\3\12\16\1\176\1\3\21\16\1\43\2"+
    "\3\7\16\1\177\3\60\1\3\2\60\1\165\2\3\1\122\2\60\7\16\1\43\1\16\1\45\2\3\13"+
    "\16\1\3\4\60\1\70\1\16\1\67\1\3\2\60\1\67\11\3\5\16\1\65\1\60\1\3\15\16\1"+
    "\107\1\60\1\64\1\66\4\60\1\165\1\0\1\200\2\60\1\67\1\3\2\60\1\67\2\3\1\132"+
    "\26\3\1\60\1\70\13\16\1\66\3\60\1\201\1\16\1\3\2\60\1\67\3\3\1\100\2\0\3\3"+
    "\1\162\7\16\1\107\1\60\1\116\1\76\2\60\1\76\12\16\1\202\2\60\1\116\3\3\11"+
    "\16\4\60\1\116\2\3\2\60\1\67\1\55\2\60\1\76\10\16\1\43\24\3\1\102\5\0\1\201"+
    "\1\203\1\103\1\204\2\3\60\16\11\0\1\205\3\54\1\114\1\3\1\0\5\16\1\43\1\16"+
    "\1\43\11\16\1\43\1\16\1\43\2\16\2\151\7\16\1\43\15\16\1\50\1\16\1\46\1\44"+
    "\1\50\1\16\1\45\1\16\1\44\1\16\1\3\3\16\1\45\1\44\1\50\1\16\1\45\2\3\1\100"+
    "\1\0\6\3\1\206\1\102\3\3\1\56\1\207\4\3\1\207\2\3\1\0\1\63\1\155\1\0\1\41"+
    "\2\3\1\132\4\3\3\16\1\45\6\210\1\211\5\3\3\0\1\63\1\40\1\57\2\0\1\63\3\3\1"+
    "\37\1\132\1\44\2\16\1\41\1\55\1\43\1\3\1\46\1\50\1\52\2\16\1\43\1\16\1\3\1"+
    "\55\1\43\1\37\4\3\12\16\1\45\212\3\1\147\14\54\1\172\5\3\13\16\1\42\13\16"+
    "\1\42\41\16\1\45\1\132\1\105\1\166\3\3\11\16\1\52\1\3\1\41\16\16\1\3\1\132"+
    "\3\3\1\100\5\16\1\42\2\3\1\16\1\42\1\16\1\42\1\16\1\42\1\16\1\42\1\16\1\42"+
    "\1\16\1\42\1\16\1\42\1\16\1\42\10\60\13\3\1\132\65\3\1\55\6\3\1\55\1\16\1"+
    "\212\1\0\1\55\1\43\1\16\1\45\1\55\24\16\1\42\1\213\2\55\25\16\1\42\1\16\1"+
    "\3\1\55\11\16\1\43\1\55\26\16\1\42\4\3\6\16\1\42\15\3\61\16\1\43\22\3\63\16"+
    "\1\113\1\54\1\172\12\3\43\16\1\45\20\3\13\16\1\43\3\16\1\45\4\16\2\60\1\76"+
    "\5\3\13\16\1\105\1\3\2\60\1\214\6\16\1\54\1\215\24\16\1\153\10\3\1\132\2\16"+
    "\1\44\31\16\1\77\1\216\1\16\3\54\2\16\1\216\1\172\2\54\17\3\1\115\2\16\2\217"+
    "\1\105\5\16\1\65\1\60\4\3\1\207\1\3\15\16\3\3\1\76\14\16\4\60\1\63\2\3\2\60"+
    "\1\67\1\3\4\0\1\166\1\16\1\132\1\140\2\60\1\76\6\16\1\103\1\160\1\153\5\16"+
    "\1\65\2\60\1\160\3\3\7\16\1\45\1\60\13\16\1\105\3\60\1\63\2\3\1\132\2\60\1"+
    "\67\1\3\1\54\1\220\5\54\1\221\12\16\1\107\2\60\1\64\2\3\1\65\2\16\1\67\2\60"+
    "\1\67\1\3\5\16\1\42\1\222\1\147\14\16\1\223\1\73\1\70\1\224\1\225\5\3\1\132"+
    "\1\43\2\16\1\65\1\60\1\44\1\226\2\3\1\55\1\42\1\55\1\42\1\55\1\42\2\3\1\16"+
    "\1\42\1\16\1\42\12\54\1\221\2\54\1\172\2\3\24\54\10\16\1\65\1\60\1\64\1\153"+
    "\2\60\1\67\1\3\51\16\3\3\5\16\1\42\1\132\14\16\1\3\33\16\1\43\32\16\1\43\11"+
    "\3\1\16\1\42\2\3\1\132\1\16\1\3\1\227\2\16\1\50\2\16\1\42\1\16\1\46\1\52\1"+
    "\50\32\16\1\43\7\3\1\132\32\16\1\43\4\3\20\16\1\44\15\16\12\3\3\16\1\207\4"+
    "\0\4\3\1\0\1\102\2\3\1\56\1\207\5\3\1\230\6\3\1\137\1\3\1\16\1\50\41\16\1"+
    "\231\1\3\1\207\2\3\2\60\1\67\1\3\1\55\5\16\1\42\1\56\1\55\5\16\1\42\2\3\1"+
    "\44\25\16\1\42\1\44\1\16\1\44\1\16\1\44\1\16\1\44\1\45\1\36\1\232\4\3\1\57"+
    "\1\3\3\16\1\55\5\16\1\42\4\16\1\42\1\52\3\16\1\43\3\16\1\43\10\3\36\16\1\42"+
    "\21\3\15\16\1\45\41\3\1\40\40\3\7\16\1\45\14\16\1\45\13\3\7\16\1\216\4\3\6"+
    "\16\1\42\1\3\12\54\1\221\1\3\7\16\1\43\11\16\1\3\2\16\1\55\1\43\12\3\47\16"+
    "\1\43\2\60\1\67\25\3\12\54\2\3\15\54\47\3\115\54\1\221\2\3\5\54\1\172\2\3"+
    "\2\54\46\3\1\16\1\43\1\50\12\16\1\52\1\45\1\77\5\16\1\43\2\3\5\54\1\221\2"+
    "\3\7\54\1\221\20\3\4\54\1\221\1\172\2\3\5\16\1\43\2\3\6\16\1\43\21\3\16\16"+
    "\1\3\1\44\20\3\1\107\1\62\1\3\1\60\1\16\2\55\6\16\1\3\1\102\1\100\10\3\7\16"+
    "\1\45\7\54\1\114\10\3\2\54\1\233\6\54\1\114\6\3\15\16\1\43\2\3\5\16\1\43\2"+
    "\3\4\16\1\42\3\3\4\54\1\172\33\3\22\16\1\45\15\3\14\54\1\221\3\3\14\54\1\221"+
    "\3\3\1\162\15\16\3\60\1\234\7\3\1\122\2\60\4\3\1\235\13\16\2\60\1\236\1\40"+
    "\4\3\6\16\1\45\1\3\2\60\1\67\1\3\1\162\10\16\1\65\2\60\1\160\1\134\2\60\4"+
    "\3\10\54\1\221\1\237\2\3\1\162\13\16\1\65\3\60\1\201\1\45\2\3\2\60\1\240\1"+
    "\114\10\3\4\54\1\241\10\54\1\242\22\3\1\54\1\221\1\220\1\241\3\54\1\241\2"+
    "\54\1\114\1\3\16\54\1\114\1\3\2\54\1\172\1\3\1\54\1\233\1\54\2\242\5\54\1"+
    "\220\1\54\1\220\1\233\1\172\1\233\1\54\2\242\2\114\1\115\1\3\1\233\1\54\107"+
    "\3\20\54\1\172\1\241\2\3\2\54\1\172\51\3\15\54\1\172\1\54\1\221\6\3\1\54\1"+
    "\172\10\3\17\54\1\221\2\114\2\3\2\54\1\172\11\3\12\16\1\65\2\60\1\116\2\3"+
    "\2\60\1\67\15\3\6\54\1\172\1\233\2\54\1\221\1\3\2\54\1\172\131\3\22\54\1\172"+
    "\4\3\1\115\60\3\16\54\1\114\1\3\33\16\1\216\12\54\1\172\31\3\30\16\1\216\2"+
    "\54\1\221\4\3\61\54\57\3\13\16\1\42\64\3\21\54\1\221\56\3\16\16\1\45\1\3\7"+
    "\54\1\221\2\54\1\172\31\3\7\54\1\172\4\3\15\54\1\221\2\3\1\54\3\3\2\54\1\172"+
    "\1\3\1\115\5\54\1\3\1\233\4\54\34\3\21\16\1\45\2\3\1\107\12\60\1\64\3\3\1"+
    "\100\1\243\3\16\30\3\1\43\77\3\32\54\1\221\1\3\3\54\1\114\2\54\1\114\1\3\2"+
    "\54\1\172\1\237\61\3\1\57\1\153\1\57\4\0\1\102\1\57\1\0\7\3\1\155\1\153\44"+
    "\3\1\155\1\63\56\3\25\16\1\50\21\16\1\50\1\37\1\133\1\55\1\50\2\16\1\52\1"+
    "\55\1\16\1\55\17\16\1\52\1\42\1\55\1\16\1\50\1\16\1\50\6\16\1\52\1\42\1\16"+
    "\1\46\1\44\1\16\1\50\124\16\1\43\6\16\1\50\5\16\1\42\7\16\1\42\6\16\1\50\7"+
    "\16\1\50\5\16\1\42\7\16\1\42\6\16\1\50\7\16\1\50\5\16\1\42\2\16\1\122\14\60"+
    "\61\54\1\114\16\3\1\16\1\55\6\16\1\133\1\77\1\55\1\16\1\42\1\16\1\151\1\3"+
    "\1\37\1\132\1\151\1\55\1\133\1\77\2\151\1\133\1\77\1\42\1\16\1\42\1\16\1\55"+
    "\1\46\2\16\1\52\4\16\1\3\2\55\1\52\4\16\35\3\6\54\1\172\1\3\6\54\1\172\1\3"+
    "\6\54\1\172\35\3\65\16\1\42\12\3\15\16\1\45\2\3\67\16\1\43\140\54\1\172\27"+
    "\3\7\16\1\43\70\3\1\40\7\3\30\0\40\3\74\0\4\3");

  /* The ZZ_CMAP_A table has 656 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\4\20\1\21\1\13\1\16\2\14\1\15\2\20\4\0\1\13\1\77\1\30\1\0\1\76\1\33\1\111"+
    "\1\31\1\101\1\102\1\27\1\103\1\65\1\110\1\10\1\26\1\6\1\63\2\7\2\3\1\64\1"+
    "\61\1\62\1\1\1\112\1\0\1\67\1\66\1\73\1\104\1\0\3\2\1\114\1\70\1\72\10\24"+
    "\1\71\1\116\1\24\1\106\1\115\1\24\1\12\1\24\1\115\3\24\1\75\1\4\1\107\1\105"+
    "\1\24\1\0\1\44\1\57\1\52\1\56\1\40\1\42\1\60\1\46\1\35\1\113\1\24\1\45\1\54"+
    "\1\36\1\41\1\55\1\24\1\47\1\53\1\37\1\11\1\43\1\50\1\5\1\51\1\24\1\34\1\74"+
    "\1\32\1\100\2\20\1\22\2\20\2\0\4\17\4\0\1\24\2\0\1\20\3\0\1\24\2\0\3\24\1"+
    "\0\2\24\4\0\3\24\3\0\1\24\1\0\1\24\1\0\1\20\1\25\2\20\1\24\1\0\4\24\1\0\1"+
    "\23\2\24\1\0\3\24\1\0\1\20\4\23\1\0\3\24\3\0\1\17\1\0\3\20\6\25\1\0\1\25\1"+
    "\0\2\25\1\0\1\20\3\0\3\25\1\0\3\24\1\25\1\20\5\25\2\0\1\25\3\24\1\0\1\24\3"+
    "\25\1\20\1\0\1\20\1\25\2\24\2\25\1\0\3\20\1\25\2\24\2\25\3\24\2\0\1\24\3\0"+
    "\1\20\1\24\1\25\2\24\3\20\1\0\2\24\3\25\1\24\2\0\3\24\3\20\1\24\1\25\1\24"+
    "\4\25\1\20\2\0\1\24\3\20\1\24\1\23\3\24\4\23\6\0\1\23\2\25\2\20\3\25\1\23"+
    "\1\20\1\24\3\25\1\20\2\25\2\0\2\25\1\23\3\24\1\23\4\25\2\0\2\25\1\20\1\24"+
    "\4\0\1\25\2\24\2\17\1\0\3\25\3\0\1\24\1\0\2\24\1\0\1\20\1\0\2\25\1\0\1\25"+
    "\2\0\1\24\1\25\3\0\1\17\3\0\1\23\4\0\1\25\1\24\1\25\1\0\2\25\2\24\1\23\2\0"+
    "\1\23\2\25\2\0\1\20\1\0\1\25\1\0\1\25\3\0\2\23\1\20\1\25\1\20\2\0\1\24\1\0"+
    "\1\24\1\20\1\25\2\0\2\20\3\0\1\20\1\0\1\20\2\0\3\20\1\0\2\20\1\25\3\0\3\25"+
    "\1\20\1\25\2\20\4\25\1\24\1\25\1\24\1\25\2\20\2\24\2\25\5\20\2\24\2\20\1\24"+
    "\1\20\1\0\2\20\1\25\1\24\1\23\2\0\2\23\2\0\1\24\1\0\2\25\2\20\2\25\1\24\1"+
    "\20\2\0\1\24\1\25\1\24\1\0\1\24\2\23\1\0\1\20\2\0\2\20\5\24\1\20\1\25\1\24"+
    "\1\20\2\24\1\20\2\24\1\0\3\20\1\23\2\14\2\20\1\17\3\0\7\17\1\0\2\24\2\20\1"+
    "\0\2\20\1\0\2\20\1\0\1\24\3\23\1\25\3\24\1\23\2\24\1\20\1\24\1\23\1\0\5\23"+
    "\3\0\1\24\1\20\1\25\1\24\2\25\2\24\1\25\1\20\1\24\1\20\1\24\1\0\1\24\1\25"+
    "\1\20\2\0\1\24\1\25\1\24\1\0\3\17\1\24\2\0\1\20\1\0\2\17\2\0\3\23\2\25\1\20"+
    "\1\0\2\20\1\25\1\24\1\25\2\20\3\0\1\23\1\0\2\25\1\23\1\0\2\23\1\0\2\23\2\0"+
    "\1\23\3\20\1\24");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\3\0\1\1\15\0\1\2\5\0\1\1\1\3"+
    "\3\4\1\3\1\5\1\6\1\5\1\7\1\10\1\11"+
    "\3\3\1\12\1\13\1\3\1\1\1\3\2\14\1\15"+
    "\1\16\1\10\1\14\3\17\2\20\1\21\1\22\1\23"+
    "\1\24\1\17\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\4\3\3\1\40"+
    "\1\41\1\4\1\3\2\42\1\43\1\17\1\44\1\17"+
    "\2\45\1\46\2\17\1\47\1\17\1\50\2\17\1\51"+
    "\1\52\1\53\1\4\1\54\1\55\1\56\1\5\1\57"+
    "\2\4\2\60\1\61\1\2\1\62\1\63\1\64\4\0"+
    "\1\65\1\0\1\66\1\67\2\0\1\70\2\0\1\71"+
    "\1\0\1\72\20\0\1\73\1\74\1\75\1\0\1\76"+
    "\3\0\1\77\3\0\5\17\1\100\1\17\1\101\1\0"+
    "\1\102\1\103\5\0\1\104\3\0\1\4\4\0\5\4"+
    "\1\105\1\17\1\45\1\0\1\106\1\107\1\110\1\111"+
    "\1\112\1\113\1\5\1\4\2\0\1\114\45\0\1\115"+
    "\3\0\1\116\5\0\1\4\7\0\1\117\1\0\1\120"+
    "\1\0\1\121\1\122\1\5\1\4\3\0\1\123\17\0"+
    "\1\124\33\0\1\4\6\0\1\5\1\4\1\114\10\0"+
    "\1\125\1\0\1\126\4\0\1\127\3\0\1\130\10\0"+
    "\1\131\5\0\1\132\1\133\4\0\1\134\11\0\3\4"+
    "\2\0\1\5\1\4\1\0\1\135\14\0\1\136\2\0"+
    "\1\137\6\0\1\140\3\0\1\141\1\0\1\142\1\0"+
    "\1\75\1\143\13\0\1\4\4\0\1\5\20\0\1\144"+
    "\2\0\1\145\3\0\1\146\1\147\1\73\1\75\4\0"+
    "\1\150\5\0\1\4\6\0\1\151\1\0\1\152\1\153"+
    "\1\154\2\0\1\155\1\156\1\0\1\157\6\0\1\160"+
    "\3\0\1\73\2\0\1\161\4\0\2\4\10\0\1\162"+
    "\1\163\1\164\1\0\1\165\1\0\1\166\1\167\7\0"+
    "\1\4\2\0\2\4\5\0\1\170\2\0\1\171\3\0"+
    "\1\172\1\0\1\173\3\0\4\4\2\0\1\174\1\175"+
    "\1\176\1\177\1\200\1\201\1\202\5\0\3\4\1\0"+
    "\1\203\1\204\3\0\1\4\2\0\1\4\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[583];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\117\0\236\0\355\0\u013c\0\u018b\0\u01da\0\u0229"+
    "\0\u0278\0\u02c7\0\u0316\0\u0365\0\u03b4\0\u0403\0\u0452\0\u04a1"+
    "\0\u04f0\0\u053f\0\u058e\0\u05dd\0\u062c\0\u067b\0\u06ca\0\u0719"+
    "\0\u0768\0\u07b7\0\u0806\0\u0855\0\u08a4\0\u0806\0\u08f3\0\u0942"+
    "\0\u0991\0\u0806\0\u09e0\0\u0a2f\0\u0a7e\0\u0acd\0\u0b1c\0\u0806"+
    "\0\u0806\0\u0b6b\0\u0bba\0\u0c09\0\u0806\0\u0c58\0\u0806\0\u0ca7"+
    "\0\u0cf6\0\u0d45\0\u0806\0\u0d94\0\u0de3\0\u0e32\0\u0e81\0\u0ed0"+
    "\0\u0806\0\u0806\0\u0f1f\0\u0f6e\0\u0806\0\u0fbd\0\u0806\0\u0806"+
    "\0\u0806\0\u0806\0\u0806\0\u0806\0\u0806\0\u0806\0\u100c\0\u105b"+
    "\0\u10aa\0\u10f9\0\u1148\0\u0806\0\u0806\0\u1197\0\u11e6\0\u0806"+
    "\0\u1235\0\u0806\0\u1284\0\u1284\0\u12d3\0\u1284\0\u1322\0\u0806"+
    "\0\u1371\0\u13c0\0\u140f\0\u145e\0\u1284\0\u14ad\0\u14fc\0\u0806"+
    "\0\u0806\0\u0806\0\u154b\0\u0806\0\u0806\0\u159a\0\u15e9\0\u0806"+
    "\0\u1638\0\u1687\0\u0806\0\u16d6\0\u0806\0\u1725\0\u1774\0\u0806"+
    "\0\u17c3\0\u0806\0\u1812\0\u1861\0\u18b0\0\u0806\0\u0855\0\u0806"+
    "\0\u0806\0\u08a4\0\u18ff\0\u0806\0\u0acd\0\u194e\0\u0806\0\u199d"+
    "\0\u0806\0\u19ec\0\u1a3b\0\u1a8a\0\u1ad9\0\u1b28\0\u1b77\0\u1bc6"+
    "\0\u1c15\0\u1c64\0\u1cb3\0\u1d02\0\u1d51\0\u1da0\0\u1def\0\u1e3e"+
    "\0\u1e8d\0\u1edc\0\u0806\0\u1f2b\0\u1f7a\0\u0806\0\u1fc9\0\u2018"+
    "\0\u2067\0\u0806\0\u20b6\0\u0d45\0\u2105\0\u2154\0\u21a3\0\u21f2"+
    "\0\u2241\0\u2290\0\u0806\0\u22df\0\u0806\0\u0e32\0\u0806\0\u232e"+
    "\0\u237d\0\u0f1f\0\u23cc\0\u241b\0\u100c\0\u0806\0\u10aa\0\u10f9"+
    "\0\u1148\0\u246a\0\u24b9\0\u2508\0\u2557\0\u25a6\0\u25f5\0\u2644"+
    "\0\u2693\0\u26e2\0\u2731\0\u2780\0\u27cf\0\u0806\0\u281e\0\u0806"+
    "\0\u0806\0\u2780\0\u0806\0\u286d\0\u0806\0\u28bc\0\u290b\0\u295a"+
    "\0\u29a9\0\u29f8\0\u2a47\0\u2a96\0\u2ae5\0\u2b34\0\u2b83\0\u2bd2"+
    "\0\u2c21\0\u2c70\0\u2cbf\0\u2d0e\0\u2d5d\0\u2dac\0\u2dfb\0\u2e4a"+
    "\0\u2e99\0\u2ee8\0\u2f37\0\u2f86\0\u2fd5\0\u3024\0\u3073\0\u30c2"+
    "\0\u3111\0\u3160\0\u31af\0\u31fe\0\u324d\0\u329c\0\u32eb\0\u333a"+
    "\0\u3389\0\u33d8\0\u3427\0\u3476\0\u34c5\0\u3514\0\u3563\0\u0806"+
    "\0\u35b2\0\u3601\0\u3650\0\u0806\0\u369f\0\u36ee\0\u373d\0\u378c"+
    "\0\u37db\0\u382a\0\u3879\0\u38c8\0\u3917\0\u3966\0\u39b5\0\u3a04"+
    "\0\u3a53\0\u0806\0\u3aa2\0\u0806\0\u3af1\0\u0806\0\u0806\0\u3b40"+
    "\0\u3b8f\0\u3bde\0\u3c2d\0\u3c7c\0\u3ccb\0\u3d1a\0\u3d69\0\u3db8"+
    "\0\u3e07\0\u3e56\0\u3ea5\0\u3ef4\0\u3f43\0\u3f92\0\u3fe1\0\u4030"+
    "\0\u407f\0\u40ce\0\u411d\0\u416c\0\u41bb\0\u420a\0\u4259\0\u42a8"+
    "\0\u42f7\0\u4346\0\u4395\0\u43e4\0\u4433\0\u4482\0\u44d1\0\u4520"+
    "\0\u456f\0\u45be\0\u460d\0\u465c\0\u46ab\0\u46fa\0\u4749\0\u4798"+
    "\0\u21a3\0\u47e7\0\u4836\0\u4885\0\u48d4\0\u4923\0\u4972\0\u49c1"+
    "\0\u4a10\0\u4a5f\0\u4aae\0\u4afd\0\u2644\0\u4b4c\0\u4b9b\0\u4bea"+
    "\0\u4c39\0\u3bde\0\u4c88\0\u4cd7\0\u4d26\0\u4d75\0\u4dc4\0\u4e13"+
    "\0\u4e62\0\u4eb1\0\u0806\0\u4f00\0\u0806\0\u4f4f\0\u4f9e\0\u4fed"+
    "\0\u503c\0\u0806\0\u508b\0\u50da\0\u5129\0\u0806\0\u5178\0\u51c7"+
    "\0\u5216\0\u5265\0\u52b4\0\u5303\0\u5352\0\u53a1\0\u0806\0\u53f0"+
    "\0\u543f\0\u548e\0\u54dd\0\u552c\0\u0806\0\u0806\0\u557b\0\u55ca"+
    "\0\u5619\0\u5668\0\u0806\0\u56b7\0\u5706\0\u5755\0\u57a4\0\u57f3"+
    "\0\u5842\0\u5891\0\u58e0\0\u592f\0\u597e\0\u59cd\0\u5a1c\0\u5a6b"+
    "\0\u5aba\0\u5b09\0\u3a04\0\u5b58\0\u0806\0\u5ba7\0\u5bf6\0\u5c45"+
    "\0\u5c94\0\u5ce3\0\u5d32\0\u5d81\0\u5dd0\0\u5e1f\0\u5e6e\0\u5ebd"+
    "\0\u5f0c\0\u0806\0\u5f5b\0\u5faa\0\u0806\0\u5ff9\0\u6048\0\u6097"+
    "\0\u60e6\0\u6135\0\u6184\0\u0806\0\u61d3\0\u6222\0\u6271\0\u0806"+
    "\0\u62c0\0\u0806\0\u630f\0\u635e\0\u0806\0\u63ad\0\u63fc\0\u644b"+
    "\0\u649a\0\u64e9\0\u6538\0\u6587\0\u65d6\0\u6625\0\u6674\0\u66c3"+
    "\0\u6712\0\u6761\0\u67b0\0\u67ff\0\u684e\0\u0806\0\u689d\0\u68ec"+
    "\0\u693b\0\u698a\0\u69d9\0\u6a28\0\u6a77\0\u6ac6\0\u6b15\0\u6b64"+
    "\0\u6bb3\0\u6c02\0\u6c51\0\u6ca0\0\u6cef\0\u6d3e\0\u0806\0\u6d8d"+
    "\0\u6ddc\0\u0806\0\u6e2b\0\u6e7a\0\u6ec9\0\u0806\0\u0806\0\u6f18"+
    "\0\u0806\0\u6f67\0\u6fb6\0\u7005\0\u7054\0\u0806\0\u70a3\0\u70f2"+
    "\0\u7141\0\u7190\0\u71df\0\u722e\0\u727d\0\u72cc\0\u731b\0\u736a"+
    "\0\u73b9\0\u7408\0\u0806\0\u7457\0\u0806\0\u0806\0\u0806\0\u74a6"+
    "\0\u74f5\0\u0806\0\u0806\0\u7544\0\u0806\0\u7593\0\u75e2\0\u7631"+
    "\0\u7680\0\u76cf\0\u771e\0\u0806\0\u776d\0\u77bc\0\u780b\0\u0806"+
    "\0\u785a\0\u78a9\0\u0806\0\u78f8\0\u7947\0\u7996\0\u79e5\0\u7a34"+
    "\0\u7a83\0\u7ad2\0\u7b21\0\u7b70\0\u7bbf\0\u7c0e\0\u7c5d\0\u7cac"+
    "\0\u7cfb\0\u7d4a\0\u0806\0\u0806\0\u7d99\0\u0806\0\u7de8\0\u0806"+
    "\0\u0806\0\u7e37\0\u7e86\0\u7ed5\0\u7f24\0\u7f73\0\u7fc2\0\u8011"+
    "\0\u8060\0\u80af\0\u80fe\0\u814d\0\u819c\0\u81eb\0\u823a\0\u8289"+
    "\0\u82d8\0\u8327\0\u8376\0\u83c5\0\u8414\0\u0806\0\u8463\0\u84b2"+
    "\0\u8501\0\u0806\0\u8550\0\u0806\0\u859f\0\u85ee\0\u863d\0\u868c"+
    "\0\u86db\0\u872a\0\u8779\0\u87c8\0\u8817\0\u0806\0\u0806\0\u0806"+
    "\0\u0806\0\u8866\0\u0806\0\u0806\0\u88b5\0\u8904\0\u8953\0\u89a2"+
    "\0\u89f1\0\u8a40\0\u8a8f\0\u8ade\0\u8b2d\0\u0806\0\u0806\0\u8b7c"+
    "\0\u8bcb\0\u8c1a\0\u8c69\0\u8cb8\0\u8d07\0\u8d56\0\u8da5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[583];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\33\31\1\32\63\31\26\33\1\34\1\35\67\33\1\36"+
    "\1\37\1\40\1\37\1\36\1\40\1\41\1\37\1\42"+
    "\2\40\1\43\3\44\1\40\1\36\1\43\1\44\1\36"+
    "\1\40\1\36\1\45\1\36\1\46\2\36\1\47\1\36"+
    "\24\40\4\37\1\50\1\51\1\36\3\40\3\36\1\40"+
    "\7\36\1\40\4\36\4\40\1\36\1\37\1\40\1\37"+
    "\1\36\1\40\1\41\1\37\1\42\2\40\1\43\3\44"+
    "\1\40\1\36\1\43\1\44\1\36\1\40\1\36\1\45"+
    "\1\36\1\46\2\36\1\52\1\36\24\40\4\37\1\50"+
    "\1\51\1\36\3\40\3\36\1\40\7\36\1\40\4\36"+
    "\4\40\33\53\1\54\63\53\13\55\1\43\3\44\2\55"+
    "\1\43\1\44\3\55\1\56\3\55\1\57\34\55\1\60"+
    "\42\55\1\61\3\44\2\55\1\61\1\44\3\55\1\56"+
    "\3\55\1\57\1\62\33\55\1\60\42\55\1\43\3\44"+
    "\2\55\1\43\1\44\74\55\1\63\3\64\1\65\3\64"+
    "\1\42\2\64\1\43\1\66\1\67\1\66\2\63\1\43"+
    "\1\66\3\64\1\70\1\71\1\72\3\63\1\73\30\64"+
    "\2\63\1\74\3\64\1\63\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\64\4\63"+
    "\4\64\2\36\1\40\2\36\1\40\3\36\2\40\1\43"+
    "\3\44\1\40\1\36\1\43\1\44\1\36\1\40\10\36"+
    "\24\40\4\36\1\50\2\36\3\40\1\107\2\36\1\40"+
    "\7\36\1\40\4\36\4\40\26\110\1\111\1\110\1\112"+
    "\1\113\1\114\1\110\1\115\62\110\4\116\1\117\7\116"+
    "\1\120\1\121\1\120\3\116\1\120\5\116\1\122\66\116"+
    "\1\123\3\124\1\125\3\124\1\123\2\124\1\123\1\126"+
    "\1\127\1\126\3\123\1\126\3\124\2\123\1\130\3\123"+
    "\1\131\30\124\3\123\3\124\1\123\1\132\1\133\2\123"+
    "\1\134\4\123\1\106\1\124\1\135\1\136\1\137\1\123"+
    "\4\124\1\140\1\41\1\40\1\41\1\140\1\40\2\41"+
    "\1\140\2\40\1\43\3\36\1\40\1\140\1\43\1\36"+
    "\1\140\1\40\5\140\1\141\2\140\24\40\4\41\1\50"+
    "\2\140\3\40\3\140\1\40\7\140\1\40\4\140\4\40"+
    "\1\142\3\143\1\142\3\143\1\142\2\143\10\142\3\143"+
    "\7\142\30\143\3\142\3\143\13\142\1\143\4\142\4\143"+
    "\1\144\3\145\1\144\3\145\1\144\2\145\1\144\3\36"+
    "\3\144\1\36\3\145\7\144\30\145\3\144\3\145\13\144"+
    "\1\145\1\144\1\146\2\144\4\145\1\36\3\147\2\36"+
    "\2\147\3\36\1\43\3\44\2\36\1\43\1\44\7\36"+
    "\1\150\5\36\1\147\1\36\1\147\1\36\1\147\5\36"+
    "\1\147\3\36\2\147\1\36\4\147\3\36\1\147\1\36"+
    "\1\147\21\36\1\147\3\36\3\151\2\36\2\151\3\36"+
    "\1\152\1\153\1\154\1\153\2\36\1\152\1\153\7\36"+
    "\1\155\5\36\1\151\1\36\1\151\1\36\1\151\5\36"+
    "\1\151\3\36\2\151\1\36\4\151\3\36\1\151\1\36"+
    "\1\151\21\36\1\151\2\36\14\156\3\157\3\156\1\157"+
    "\74\156\13\140\1\43\3\44\2\140\1\43\1\44\74\140"+
    "\117\160\34\36\1\161\62\36\14\0\1\162\1\163\1\162"+
    "\3\0\1\162\100\0\1\164\3\0\1\164\15\0\3\164"+
    "\3\0\1\164\37\0\12\164\11\0\33\31\1\165\116\31"+
    "\1\166\63\31\145\0\1\167\1\170\115\0\1\171\1\172"+
    "\70\0\1\37\1\0\1\37\2\0\2\37\1\173\50\0"+
    "\4\37\33\0\3\40\1\0\3\40\1\0\2\40\4\0"+
    "\4\40\1\0\2\40\7\0\30\40\3\0\3\40\3\0"+
    "\1\40\7\0\1\40\4\0\4\40\1\0\1\41\1\0"+
    "\1\41\2\0\2\41\51\0\4\41\45\0\1\43\5\0"+
    "\1\43\111\0\3\44\3\0\1\44\122\0\1\156\1\174"+
    "\67\0\4\175\1\176\7\175\3\0\3\175\1\0\5\175"+
    "\1\177\66\175\11\0\1\200\22\0\1\201\1\202\1\203"+
    "\1\204\1\205\1\0\1\206\1\0\1\207\1\210\3\0"+
    "\1\211\1\212\1\213\1\0\1\214\1\215\1\216\1\0"+
    "\1\217\1\220\1\221\40\0\1\222\3\0\1\200\21\0"+
    "\1\223\1\201\1\202\1\203\1\204\1\205\1\0\1\206"+
    "\1\0\1\207\1\210\3\0\1\211\1\212\1\224\1\0"+
    "\1\214\1\215\1\216\1\0\1\217\1\220\1\221\33\0"+
    "\33\53\1\225\115\53\1\226\2\53\1\227\2\53\1\230"+
    "\10\53\1\231\45\53\26\0\1\156\1\232\156\0\1\233"+
    "\42\0\1\61\5\0\1\61\11\0\1\234\120\0\1\235"+
    "\62\0\3\64\1\0\3\64\1\0\2\64\10\0\3\64"+
    "\7\0\30\64\3\0\3\64\13\0\1\64\4\0\4\64"+
    "\3\63\1\236\1\63\1\237\2\240\1\63\1\241\1\242"+
    "\1\63\3\0\3\63\1\0\25\63\1\243\2\63\1\243"+
    "\1\63\1\244\1\243\2\63\1\236\1\63\1\240\1\236"+
    "\21\63\1\243\5\63\2\243\1\244\4\0\1\245\3\0"+
    "\1\245\2\0\4\246\2\0\2\246\3\0\3\245\3\0"+
    "\1\245\37\0\12\245\15\0\1\245\3\0\1\245\2\0"+
    "\3\246\1\66\2\0\2\246\3\0\3\245\3\0\1\245"+
    "\37\0\12\245\37\0\1\156\1\247\70\0\1\250\1\251"+
    "\1\250\1\0\1\251\2\250\1\0\2\251\1\252\3\0"+
    "\1\251\1\0\1\252\2\0\1\251\10\0\24\251\4\250"+
    "\3\0\3\251\3\0\1\251\7\0\1\251\4\0\4\251"+
    "\67\0\1\253\141\0\1\254\17\0\4\255\2\0\2\255"+
    "\11\0\1\256\62\0\26\110\1\257\1\110\1\260\1\261"+
    "\1\0\1\110\1\0\110\110\1\262\1\263\67\110\4\260"+
    "\1\264\7\260\3\0\3\260\1\0\5\260\1\110\66\260"+
    "\4\265\1\266\7\265\3\0\3\265\1\0\6\265\1\0"+
    "\65\265\4\116\1\0\7\116\3\0\3\116\1\0\5\116"+
    "\1\0\66\116\3\33\1\267\1\33\1\270\2\271\1\33"+
    "\1\272\1\273\1\33\3\0\3\33\1\0\36\33\1\267"+
    "\1\33\1\271\1\267\32\33\16\0\1\120\210\0\1\274"+
    "\6\0\3\63\1\236\1\63\1\237\2\240\1\63\1\275"+
    "\1\242\1\63\3\0\3\63\1\0\25\63\1\243\2\63"+
    "\1\243\1\63\1\244\1\243\2\63\1\236\1\63\1\240"+
    "\1\236\27\63\2\243\1\244\16\0\1\276\71\0\1\274"+
    "\10\0\1\277\2\0\1\277\3\0\2\277\4\0\1\277"+
    "\4\0\1\277\10\0\24\277\7\0\3\277\3\0\1\277"+
    "\7\0\1\277\1\0\1\274\2\0\4\277\74\0\1\300"+
    "\13\0\1\274\116\0\1\274\1\0\1\254\104\0\1\301"+
    "\7\0\1\274\116\0\1\302\116\0\1\274\1\303\115\0"+
    "\1\304\115\0\1\305\10\0\3\306\2\0\2\306\30\0"+
    "\1\306\1\0\1\306\1\0\1\306\5\0\1\306\3\0"+
    "\2\306\1\0\4\306\3\0\1\306\1\0\1\306\21\0"+
    "\1\306\3\0\3\307\2\0\2\307\30\0\1\307\1\0"+
    "\1\307\1\0\1\307\5\0\1\307\3\0\2\307\1\0"+
    "\4\307\3\0\1\307\1\0\1\307\21\0\1\307\15\0"+
    "\1\152\5\0\1\152\113\0\1\153\100\0\14\156\3\0"+
    "\3\156\1\0\74\156\14\0\3\157\3\0\1\157\76\0"+
    "\1\251\2\0\1\251\3\0\2\251\1\310\3\0\1\251"+
    "\1\0\1\310\2\0\1\251\7\0\1\311\24\251\7\0"+
    "\3\251\3\0\1\251\7\0\1\251\4\0\4\251\16\0"+
    "\1\162\113\0\4\164\2\0\2\164\74\0\33\31\1\0"+
    "\63\31\1\0\1\312\1\0\1\312\2\0\2\312\51\0"+
    "\4\312\32\0\14\175\3\0\3\175\1\0\74\175\36\0"+
    "\1\313\116\0\1\314\15\0\1\315\3\0\1\316\77\0"+
    "\1\317\126\0\1\320\52\0\1\321\33\0\1\322\66\0"+
    "\1\323\23\0\1\324\136\0\1\325\1\0\1\326\74\0"+
    "\1\327\132\0\1\330\56\0\1\331\25\0\1\332\1\0"+
    "\1\333\2\0\1\334\1\335\1\336\107\0\1\337\12\0"+
    "\1\340\55\0\1\341\145\0\1\342\67\0\1\343\164\0"+
    "\1\344\116\0\1\345\123\0\1\346\105\0\1\347\102\0"+
    "\1\350\12\0\1\340\44\0\32\53\1\0\2\53\1\0"+
    "\2\53\1\0\10\53\1\0\45\53\36\0\1\351\121\0"+
    "\1\352\126\0\1\353\135\0\1\354\64\0\1\355\63\0"+
    "\1\63\2\0\2\63\51\0\1\63\1\0\2\63\33\0"+
    "\3\356\2\0\2\356\30\0\1\356\1\0\1\356\1\0"+
    "\1\356\5\0\1\356\3\0\2\356\1\0\4\356\3\0"+
    "\1\356\1\0\1\356\21\0\1\356\5\0\1\236\2\0"+
    "\2\236\51\0\1\236\1\0\2\236\33\0\3\357\2\0"+
    "\2\357\24\0\1\360\3\0\1\357\1\0\1\357\1\0"+
    "\1\357\5\0\1\357\3\0\2\357\1\0\4\357\3\0"+
    "\1\357\1\0\1\357\21\0\1\357\3\0\3\361\2\0"+
    "\2\361\30\0\1\361\1\0\1\361\1\0\1\361\5\0"+
    "\1\361\3\0\2\361\1\0\4\361\3\0\1\361\1\0"+
    "\1\361\21\0\1\361\36\0\1\362\63\0\1\250\1\0"+
    "\1\250\2\0\2\250\51\0\4\250\33\0\3\251\1\0"+
    "\3\251\1\0\2\251\1\363\3\0\4\251\1\0\2\251"+
    "\4\0\1\364\2\0\30\251\3\0\3\251\3\0\1\251"+
    "\7\0\1\251\4\0\4\251\70\0\1\365\37\0\1\366"+
    "\33\0\1\367\10\0\1\370\34\0\1\371\3\0\14\262"+
    "\3\110\3\262\1\110\3\262\1\372\70\262\27\263\1\373"+
    "\67\263\14\260\3\0\3\260\1\0\74\260\31\0\1\110"+
    "\65\0\3\265\1\374\1\375\1\265\2\376\1\265\1\377"+
    "\2\265\3\0\3\265\1\0\36\265\1\374\1\265\1\376"+
    "\1\374\32\265\3\0\1\33\2\0\2\33\51\0\1\33"+
    "\1\0\2\33\33\0\3\u0100\2\0\2\u0100\30\0\1\u0100"+
    "\1\0\1\u0100\1\0\1\u0100\5\0\1\u0100\3\0\2\u0100"+
    "\1\0\4\u0100\3\0\1\u0100\1\0\1\u0100\21\0\1\u0100"+
    "\5\0\1\267\2\0\2\267\51\0\1\267\1\0\2\267"+
    "\33\0\3\u0101\2\0\2\u0101\24\0\1\u0102\3\0\1\u0101"+
    "\1\0\1\u0101\1\0\1\u0101\5\0\1\u0101\3\0\2\u0101"+
    "\1\0\4\u0101\3\0\1\u0101\1\0\1\u0101\21\0\1\u0101"+
    "\3\0\3\u0103\2\0\2\u0103\30\0\1\u0103\1\0\1\u0103"+
    "\1\0\1\u0103\5\0\1\u0103\3\0\2\u0103\1\0\4\u0103"+
    "\3\0\1\u0103\1\0\1\u0103\21\0\1\u0103\112\0\1\u0104"+
    "\7\0\3\357\2\0\2\357\24\0\1\u0105\3\0\1\357"+
    "\1\0\1\357\1\0\1\357\5\0\1\357\3\0\2\357"+
    "\1\0\4\357\3\0\1\357\1\0\1\357\21\0\1\357"+
    "\3\0\3\277\1\0\3\277\1\0\2\277\4\0\4\277"+
    "\1\0\2\277\4\0\1\u0106\2\0\30\277\3\0\3\277"+
    "\3\0\1\277\7\0\1\277\4\0\4\277\110\0\1\u0107"+
    "\7\0\3\u0108\2\0\2\u0108\30\0\1\u0108\1\0\1\u0108"+
    "\1\0\1\u0108\5\0\1\u0108\3\0\2\u0108\1\0\4\u0108"+
    "\3\0\1\u0108\1\0\1\u0108\21\0\1\u0108\3\0\3\u0109"+
    "\2\0\2\u0109\30\0\1\u0109\1\0\1\u0109\1\0\1\u0109"+
    "\5\0\1\u0109\3\0\2\u0109\1\0\4\u0109\3\0\1\u0109"+
    "\1\0\1\u0109\21\0\1\u0109\4\0\1\251\2\0\1\251"+
    "\3\0\2\251\1\310\3\0\1\251\1\0\1\310\2\0"+
    "\1\251\10\0\24\251\7\0\3\251\3\0\1\251\7\0"+
    "\1\251\4\0\4\251\1\0\1\250\1\0\1\250\2\0"+
    "\2\250\3\0\1\311\5\0\1\311\37\0\4\250\33\0"+
    "\1\312\1\0\1\312\2\0\2\312\1\u010a\50\0\4\312"+
    "\67\0\1\u010b\116\0\1\u010c\1\0\1\u010d\12\0\1\u010e"+
    "\121\0\1\u010f\77\0\1\u0110\117\0\1\u0111\134\0\1\u0112"+
    "\100\0\1\u0113\121\0\1\u0114\112\0\1\u0115\6\0\1\u0116"+
    "\107\0\1\u0117\115\0\1\u0118\134\0\1\u0119\101\0\1\u011a"+
    "\120\0\1\u011b\4\0\1\u011c\126\0\1\u011d\102\0\1\u011e"+
    "\122\0\1\u011f\124\0\1\u0120\107\0\1\u0121\116\0\1\u0122"+
    "\116\0\1\u0123\116\0\1\u0124\131\0\1\u0125\116\0\1\u0126"+
    "\101\0\1\u0127\111\0\1\u0128\116\0\1\u0129\140\0\1\u012a"+
    "\76\0\1\u012b\123\0\1\u012c\107\0\1\u012d\123\0\1\u012e"+
    "\121\0\1\u012f\142\0\1\u0130\77\0\1\u010e\45\0\3\63"+
    "\2\0\2\63\30\0\1\63\1\0\1\63\1\0\1\63"+
    "\5\0\1\63\3\0\2\63\1\0\4\63\3\0\1\63"+
    "\1\0\1\63\21\0\1\63\3\0\3\u0131\2\0\2\u0131"+
    "\30\0\1\u0131\1\0\1\u0131\1\0\1\u0131\5\0\1\u0131"+
    "\3\0\2\u0131\1\0\4\u0131\3\0\1\u0131\1\0\1\u0131"+
    "\21\0\1\u0131\3\0\3\u0132\2\0\2\u0132\30\0\1\u0132"+
    "\1\0\1\u0132\1\0\1\u0132\5\0\1\u0132\3\0\2\u0132"+
    "\1\0\4\u0132\3\0\1\u0132\1\0\1\u0132\21\0\1\u0132"+
    "\2\0\32\362\1\243\64\362\13\0\1\363\5\0\1\363"+
    "\10\0\1\364\155\0\1\u0133\102\0\1\u0134\101\0\1\u0135"+
    "\1\u0136\112\0\1\u0137\126\0\1\u0138\51\0\14\262\3\110"+
    "\3\262\1\110\3\262\1\372\1\u0139\67\262\26\263\1\110"+
    "\1\373\67\263\3\0\1\265\2\0\2\265\21\0\1\110"+
    "\27\0\1\265\1\0\2\265\36\0\1\u013a\4\0\1\u013b"+
    "\17\0\1\110\70\0\1\374\2\0\2\374\21\0\1\110"+
    "\27\0\1\374\1\0\2\374\33\0\3\u013c\2\0\2\u013c"+
    "\21\0\1\110\6\0\1\u013c\1\0\1\u013c\1\0\1\u013c"+
    "\5\0\1\u013c\3\0\2\u013c\1\0\4\u013c\3\0\1\u013c"+
    "\1\0\1\u013c\21\0\1\u013c\3\0\3\33\2\0\2\33"+
    "\30\0\1\33\1\0\1\33\1\0\1\33\5\0\1\33"+
    "\3\0\2\33\1\0\4\33\3\0\1\33\1\0\1\33"+
    "\21\0\1\33\3\0\3\u013d\2\0\2\u013d\30\0\1\u013d"+
    "\1\0\1\u013d\1\0\1\u013d\5\0\1\u013d\3\0\2\u013d"+
    "\1\0\4\u013d\3\0\1\u013d\1\0\1\u013d\21\0\1\u013d"+
    "\3\0\3\u013e\2\0\2\u013e\30\0\1\u013e\1\0\1\u013e"+
    "\1\0\1\u013e\5\0\1\u013e\3\0\2\u013e\1\0\4\u013e"+
    "\3\0\1\u013e\1\0\1\u013e\21\0\1\u013e\3\0\3\u013f"+
    "\2\0\2\u013f\30\0\1\u013f\1\0\1\u013f\1\0\1\u013f"+
    "\5\0\1\u013f\3\0\2\u013f\1\0\4\u013f\3\0\1\u013f"+
    "\1\0\1\u013f\21\0\1\u013f\3\0\3\u0140\2\0\2\u0140"+
    "\30\0\1\u0140\1\0\1\u0140\1\0\1\u0140\5\0\1\u0140"+
    "\3\0\2\u0140\1\0\4\u0140\3\0\1\u0140\1\0\1\u0140"+
    "\21\0\1\u0140\3\0\3\u0141\2\0\2\u0141\30\0\1\u0141"+
    "\1\0\1\u0141\1\0\1\u0141\5\0\1\u0141\3\0\2\u0141"+
    "\1\0\4\u0141\3\0\1\u0141\1\0\1\u0141\21\0\1\u0141"+
    "\3\0\1\u0142\1\0\1\u0142\2\0\2\u0142\51\0\4\u0142"+
    "\104\0\1\u0143\103\0\1\u0144\117\0\1\u0145\7\0\1\u0146"+
    "\113\0\1\u0147\116\0\1\u0148\112\0\1\u0149\66\0\1\u014a"+
    "\145\0\1\u014b\116\0\1\u014c\112\0\1\u014d\2\0\1\u014e"+
    "\3\0\1\u014f\6\0\1\u0150\116\0\1\u0151\111\0\1\u0152"+
    "\115\0\1\u0153\127\0\1\u0154\100\0\1\u0155\117\0\1\u0156"+
    "\117\0\1\u0157\115\0\1\u0158\131\0\1\u0159\2\0\1\u015a"+
    "\107\0\1\u015b\60\0\1\u015c\145\0\1\u015d\131\0\1\u015e"+
    "\112\0\1\u015f\105\0\1\u0160\116\0\1\u0161\125\0\1\u0162"+
    "\62\0\1\u0163\147\0\1\u0164\113\0\1\u0165\116\0\1\u0166"+
    "\114\0\1\u0167\125\0\1\u0168\110\0\1\u0160\1\u0169\116\0"+
    "\1\u016a\111\0\1\u016b\4\0\1\u016c\3\0\1\u016d\113\0"+
    "\1\u016e\150\0\1\u016f\25\0\3\357\2\0\2\357\30\0"+
    "\1\357\1\0\1\357\1\0\1\357\5\0\1\357\3\0"+
    "\2\357\1\0\4\357\3\0\1\357\1\0\1\357\21\0"+
    "\1\357\74\0\1\u0170\101\0\1\u0171\100\0\1\u0172\127\0"+
    "\1\u0171\126\0\1\u0173\76\0\1\u0174\56\0\14\u0139\3\u0175"+
    "\3\u0139\1\u0175\3\u0139\1\u0176\1\u0177\67\u0139\4\0\1\u013a"+
    "\4\0\1\u013b\106\0\3\u013c\2\0\2\u013c\30\0\1\u013c"+
    "\1\0\1\u013c\1\0\1\u013c\5\0\1\u013c\3\0\2\u013c"+
    "\1\0\4\u013c\3\0\1\u013c\1\0\1\u013c\21\0\1\u013c"+
    "\3\0\3\u0178\2\0\2\u0178\30\0\1\u0178\1\0\1\u0178"+
    "\1\0\1\u0178\5\0\1\u0178\3\0\2\u0178\1\0\4\u0178"+
    "\3\0\1\u0178\1\0\1\u0178\21\0\1\u0178\3\0\3\u0101"+
    "\2\0\2\u0101\30\0\1\u0101\1\0\1\u0101\1\0\1\u0101"+
    "\5\0\1\u0101\3\0\2\u0101\1\0\4\u0101\3\0\1\u0101"+
    "\1\0\1\u0101\21\0\1\u0101\3\0\3\u0179\2\0\2\u0179"+
    "\22\0\1\63\5\0\1\u0179\1\0\1\u0179\1\0\1\u0179"+
    "\5\0\1\u0179\3\0\2\u0179\1\0\4\u0179\3\0\1\u0179"+
    "\1\0\1\u0179\21\0\1\u0179\3\0\3\u017a\2\0\2\u017a"+
    "\30\0\1\u017a\1\0\1\u017a\1\0\1\u017a\5\0\1\u017a"+
    "\3\0\2\u017a\1\0\4\u017a\3\0\1\u017a\1\0\1\u017a"+
    "\21\0\1\u017a\3\0\3\u017b\2\0\2\u017b\30\0\1\u017b"+
    "\1\0\1\u017b\1\0\1\u017b\5\0\1\u017b\3\0\2\u017b"+
    "\1\0\4\u017b\3\0\1\u017b\1\0\1\u017b\21\0\1\u017b"+
    "\43\0\1\u017c\111\0\1\u017d\2\0\1\u017e\137\0\1\u017f"+
    "\105\0\1\u0180\60\0\1\u0181\145\0\1\u0182\125\0\1\u0183"+
    "\105\0\1\u0184\116\0\1\u0185\126\0\1\u0186\114\0\1\u0187"+
    "\117\0\1\u0188\110\0\1\u0189\124\0\1\u018a\120\0\1\u018b"+
    "\116\0\1\u018c\111\0\1\u018d\61\0\1\u018e\162\0\1\u018f"+
    "\105\0\1\u0190\122\0\1\u0191\126\0\1\u0192\107\0\1\u0193"+
    "\124\0\1\u0194\121\0\1\u0195\100\0\1\u0196\113\0\1\u0197"+
    "\141\0\1\u0198\76\0\1\u0199\115\0\1\u019a\116\0\1\u019b"+
    "\117\0\1\u019c\110\0\1\u019d\4\0\1\u019e\125\0\1\u019f"+
    "\114\0\1\u01a0\57\0\1\u01a1\204\0\1\u01a2\116\0\1\u01a3"+
    "\63\0\1\u01a4\115\0\1\u01a5\114\0\1\u01a6\120\0\1\u01a7"+
    "\57\0\26\u0175\1\u01a8\1\u01a9\1\u01aa\1\u01ab\1\263\1\u0175"+
    "\1\263\62\u0175\14\u0139\3\u0175\3\u0139\1\u0175\3\u0139\1\u0176"+
    "\104\u0139\3\u0175\3\u0139\1\u0175\3\u0139\1\372\1\u0177\67\u0139"+
    "\1\0\3\u01ac\2\0\2\u01ac\30\0\1\u01ac\1\0\1\u01ac"+
    "\1\0\1\u01ac\5\0\1\u01ac\3\0\2\u01ac\1\0\4\u01ac"+
    "\3\0\1\u01ac\1\0\1\u01ac\21\0\1\u01ac\3\0\3\u01ad"+
    "\2\0\2\u01ad\22\0\1\63\5\0\1\u01ad\1\0\1\u01ad"+
    "\1\0\1\u01ad\5\0\1\u01ad\3\0\2\u01ad\1\0\4\u01ad"+
    "\3\0\1\u01ad\1\0\1\u01ad\21\0\1\u01ad\3\0\3\u01ae"+
    "\2\0\2\u01ae\30\0\1\u01ae\1\0\1\u01ae\1\0\1\u01ae"+
    "\5\0\1\u01ae\3\0\2\u01ae\1\0\4\u01ae\3\0\1\u01ae"+
    "\1\0\1\u01ae\21\0\1\u01ae\60\0\1\u01af\106\0\1\u01b0"+
    "\110\0\1\u01b1\122\0\1\u01b2\130\0\1\u01b3\114\0\1\u01b4"+
    "\102\0\1\u01b5\113\0\1\u01b6\137\0\1\u01b7\107\0\1\u01b8"+
    "\114\0\1\u01b9\112\0\1\u01ba\112\0\1\u01bb\116\0\1\u01bc"+
    "\125\0\1\u01bd\111\0\1\u01be\133\0\1\u01bf\121\0\1\u01c0"+
    "\106\0\1\u01c1\105\0\1\u01c2\120\0\1\u01c3\122\0\1\u01c4"+
    "\121\0\1\u01c5\121\0\1\u01c6\113\0\1\u01c7\107\0\1\u01c8"+
    "\131\0\1\u01c9\111\0\1\u01ca\117\0\1\u01cb\114\0\1\u01cc"+
    "\110\0\1\u01cd\152\0\1\55\116\0\1\u01ce\72\0\1\u01cf"+
    "\107\0\1\u01d0\115\0\1\u01d1\116\0\1\u01d2\57\0\26\u0175"+
    "\1\u0139\1\u01d3\115\u0175\1\u01d4\1\u01a9\1\u01aa\1\u01ab\1\263"+
    "\1\u0175\1\263\62\u0175\4\u01aa\1\u01d5\7\u01aa\3\263\3\u01aa"+
    "\1\263\4\u01aa\1\u01d6\1\u0175\66\u01aa\4\u01d7\1\u01d8\7\u01d7"+
    "\3\263\3\u01d7\1\263\4\u01d7\1\u01d9\1\u01d7\1\263\65\u01d7"+
    "\1\0\3\265\2\0\2\265\30\0\1\265\1\0\1\265"+
    "\1\0\1\265\5\0\1\265\3\0\2\265\1\0\4\265"+
    "\3\0\1\265\1\0\1\265\21\0\1\265\3\0\3\u01da"+
    "\2\0\2\u01da\22\0\1\63\5\0\1\u01da\1\0\1\u01da"+
    "\1\0\1\u01da\5\0\1\u01da\3\0\2\u01da\1\0\4\u01da"+
    "\3\0\1\u01da\1\0\1\u01da\21\0\1\u01da\42\0\1\u01db"+
    "\125\0\1\u01dc\116\0\1\u01dd\124\0\1\u01de\101\0\1\u01df"+
    "\116\0\1\u01e0\130\0\1\u01e1\51\0\1\u01e2\164\0\1\u01e3"+
    "\104\0\1\u01e4\111\0\1\u01e5\135\0\1\u01e6\104\0\1\u01e7"+
    "\120\0\1\u01e8\125\0\1\u01e9\112\0\1\u01ea\61\0\1\u01eb"+
    "\165\0\1\u01ec\111\0\1\u01ed\110\0\1\u01ee\120\0\1\u01ef"+
    "\122\0\1\u01f0\112\0\1\u01f1\110\0\1\u01f2\107\0\1\u01f3"+
    "\132\0\1\u01f4\122\0\1\u01f5\113\0\1\u01d1\161\0\1\u01f6"+
    "\44\0\1\u01f7\56\0\26\263\1\u0175\1\373\67\263\26\110"+
    "\1\372\1\u0175\1\u01f8\1\u01f9\65\110\14\u01aa\3\263\3\u01aa"+
    "\1\263\4\u01aa\1\u01d6\73\u01aa\1\u01d5\7\u01aa\3\263\3\u01aa"+
    "\1\263\3\u01aa\1\u01f8\1\u01d6\1\u0175\66\u01aa\27\263\1\373"+
    "\1\263\1\u0175\65\263\3\u01d7\1\u01fa\1\u01fb\1\u01d7\2\u01fc"+
    "\1\u01d7\1\u01fd\2\u01d7\3\263\3\u01d7\1\263\4\u01d7\1\u01d9"+
    "\31\u01d7\1\u01fa\1\u01d7\1\u01fc\1\u01fa\32\u01d7\26\263\1\110"+
    "\1\373\1\263\1\u0175\65\263\1\0\3\u01fe\2\0\2\u01fe"+
    "\22\0\1\63\5\0\1\u01fe\1\0\1\u01fe\1\0\1\u01fe"+
    "\5\0\1\u01fe\3\0\2\u01fe\1\0\4\u01fe\3\0\1\u01fe"+
    "\1\0\1\u01fe\21\0\1\u01fe\43\0\1\u01ff\113\0\1\u0200"+
    "\124\0\1\u0201\122\0\1\u0202\106\0\1\u0203\114\0\1\u0204"+
    "\124\0\1\u0205\111\0\1\u0206\126\0\1\u0207\127\0\1\u0208"+
    "\111\0\1\u0209\104\0\1\u020a\116\0\1\u020b\116\0\1\u020c"+
    "\125\0\1\u020d\115\0\1\u020e\113\0\1\u020f\161\0\1\243"+
    "\56\0\1\u0210\47\0\4\u01f8\1\u0211\7\u01f8\3\110\3\u01f8"+
    "\1\110\3\u01f8\1\u0212\2\u01f8\1\u0213\1\260\1\u01f8\1\260"+
    "\62\u01f8\4\u0214\1\u0215\7\u0214\3\110\3\u0214\1\110\3\u0214"+
    "\1\257\1\u0214\1\u0216\1\261\1\265\1\u0214\1\265\62\u0214"+
    "\3\263\1\u01d7\2\263\2\u01d7\17\263\1\373\1\263\1\u0175"+
    "\27\263\1\u01d7\1\263\2\u01d7\36\263\1\u0217\4\263\1\u0218"+
    "\15\263\1\373\1\263\1\u0175\70\263\1\u01fa\2\263\2\u01fa"+
    "\17\263\1\373\1\263\1\u0175\27\263\1\u01fa\1\263\2\u01fa"+
    "\33\263\3\u0219\2\263\2\u0219\17\263\1\373\1\263\1\u0175"+
    "\6\263\1\u0219\1\263\1\u0219\1\263\1\u0219\5\263\1\u0219"+
    "\3\263\2\u0219\1\263\4\u0219\3\263\1\u0219\1\263\1\u0219"+
    "\21\263\1\u0219\2\263\1\0\3\u021a\2\0\2\u021a\22\0"+
    "\1\63\5\0\1\u021a\1\0\1\u021a\1\0\1\u021a\5\0"+
    "\1\u021a\3\0\2\u021a\1\0\4\u021a\3\0\1\u021a\1\0"+
    "\1\u021a\21\0\1\u021a\52\0\1\u021b\105\0\1\u021c\132\0"+
    "\1\u021d\77\0\1\u021e\121\0\1\u021f\120\0\1\u0220\113\0"+
    "\1\u0221\127\0\1\u0222\117\0\1\u0223\100\0\1\u0224\125\0"+
    "\1\u0225\130\0\1\u0226\121\0\1\370\33\0\1\u01f6\4\0"+
    "\14\u01f8\3\110\3\u01f8\1\110\3\u01f8\1\u0212\1\u01f8\1\260"+
    "\1\u0213\1\260\1\u01f8\1\260\66\u01f8\1\u0211\7\u01f8\3\110"+
    "\3\u01f8\1\110\3\u01f8\1\262\1\u01aa\1\110\66\u01f8\4\u0216"+
    "\1\u0227\7\u0216\3\0\3\u0216\1\0\5\u0216\1\u0214\1\260"+
    "\65\u0216\26\110\1\257\1\110\1\260\1\u01f9\1\0\1\110"+
    "\1\0\62\110\3\u0214\1\u0228\1\u0229\1\u0214\2\u022a\1\u0214"+
    "\1\u022b\2\u0214\3\110\3\u0214\1\110\3\u0214\1\257\1\u0214"+
    "\1\u0216\1\u022c\1\265\1\u0214\1\265\24\u0214\1\u0228\1\u0214"+
    "\1\u022a\1\u0228\32\u0214\4\260\1\264\7\260\3\0\3\260"+
    "\1\0\5\260\1\110\1\u01f8\65\260\4\263\1\u0217\4\263"+
    "\1\u0218\15\263\1\373\70\263\3\u0219\2\263\2\u0219\17\263"+
    "\1\373\10\263\1\u0219\1\263\1\u0219\1\263\1\u0219\5\263"+
    "\1\u0219\3\263\2\u0219\1\263\4\u0219\3\263\1\u0219\1\263"+
    "\1\u0219\21\263\1\u0219\3\263\3\u022d\2\263\2\u022d\17\263"+
    "\1\373\10\263\1\u022d\1\263\1\u022d\1\263\1\u022d\5\263"+
    "\1\u022d\3\263\2\u022d\1\263\4\u022d\3\263\1\u022d\1\263"+
    "\1\u022d\21\263\1\u022d\2\263\32\0\1\63\120\0\1\u022e"+
    "\135\0\1\u022f\103\0\1\u0230\116\0\1\u0231\126\0\1\u0232"+
    "\106\0\1\u0233\110\0\1\u0234\134\0\1\u0235\106\0\1\u01d1"+
    "\56\0\3\u0216\1\u0236\1\u0237\1\u0216\2\u0238\1\u0216\1\u0239"+
    "\2\u0216\3\0\3\u0216\1\0\36\u0216\1\u0236\1\u0216\1\u0238"+
    "\1\u0236\32\u0216\3\110\1\u0214\2\110\2\u0214\16\110\1\257"+
    "\1\110\1\260\1\u01f9\1\0\1\110\1\0\24\110\1\u0214"+
    "\1\110\2\u0214\36\110\1\u023a\4\110\1\u023b\14\110\1\257"+
    "\1\110\1\260\1\u01f9\1\0\1\110\1\0\65\110\1\u0228"+
    "\2\110\2\u0228\16\110\1\257\1\110\1\260\1\u01f9\1\0"+
    "\1\110\1\0\24\110\1\u0228\1\110\2\u0228\33\110\3\u023c"+
    "\2\110\2\u023c\16\110\1\257\1\110\1\260\1\u01f9\1\0"+
    "\1\110\1\0\3\110\1\u023c\1\110\1\u023c\1\110\1\u023c"+
    "\5\110\1\u023c\3\110\2\u023c\1\110\4\u023c\3\110\1\u023c"+
    "\1\110\1\u023c\21\110\1\u023c\2\110\4\265\1\266\7\265"+
    "\3\0\3\265\1\0\6\265\1\110\65\265\1\263\3\u023d"+
    "\2\263\2\u023d\17\263\1\373\10\263\1\u023d\1\263\1\u023d"+
    "\1\263\1\u023d\5\263\1\u023d\3\263\2\u023d\1\263\4\u023d"+
    "\3\263\1\u023d\1\263\1\u023d\21\263\1\u023d\2\263\34\0"+
    "\1\u023e\114\0\1\u023f\64\0\3\260\1\u0216\1\264\1\260"+
    "\2\u0216\4\260\3\0\3\260\1\0\5\260\1\110\1\u01f8"+
    "\27\260\1\u0216\1\260\2\u0216\36\260\1\u0240\4\260\1\u0241"+
    "\2\260\3\0\3\260\1\0\5\260\1\110\1\u01f8\70\260"+
    "\1\u0236\1\264\1\260\2\u0236\4\260\3\0\3\260\1\0"+
    "\5\260\1\110\1\u01f8\27\260\1\u0236\1\260\2\u0236\33\260"+
    "\3\u0242\1\264\1\260\2\u0242\4\260\3\0\3\260\1\0"+
    "\5\260\1\110\1\u01f8\6\260\1\u0242\1\260\1\u0242\1\260"+
    "\1\u0242\5\260\1\u0242\3\260\2\u0242\1\260\4\u0242\3\260"+
    "\1\u0242\1\260\1\u0242\21\260\1\u0242\2\260\4\110\1\u023a"+
    "\4\110\1\u023b\14\110\1\257\1\110\1\260\1\261\1\0"+
    "\1\110\1\0\63\110\3\u023c\2\110\2\u023c\16\110\1\257"+
    "\1\110\1\260\1\261\1\0\1\110\1\0\3\110\1\u023c"+
    "\1\110\1\u023c\1\110\1\u023c\5\110\1\u023c\3\110\2\u023c"+
    "\1\110\4\u023c\3\110\1\u023c\1\110\1\u023c\21\110\1\u023c"+
    "\3\110\3\u0243\2\110\2\u0243\16\110\1\257\1\110\1\260"+
    "\1\261\1\0\1\110\1\0\3\110\1\u0243\1\110\1\u0243"+
    "\1\110\1\u0243\5\110\1\u0243\3\110\2\u0243\1\110\4\u0243"+
    "\3\110\1\u0243\1\110\1\u0243\21\110\1\u0243\2\110\1\263"+
    "\3\u01d7\2\263\2\u01d7\17\263\1\373\10\263\1\u01d7\1\263"+
    "\1\u01d7\1\263\1\u01d7\5\263\1\u01d7\3\263\2\u01d7\1\263"+
    "\4\u01d7\3\263\1\u01d7\1\263\1\u01d7\21\263\1\u01d7\2\263"+
    "\4\260\1\u0244\4\260\1\u0241\2\260\3\0\3\260\1\0"+
    "\75\260\3\u0242\1\264\1\260\2\u0242\4\260\3\0\3\260"+
    "\1\0\5\260\1\110\7\260\1\u0242\1\260\1\u0242\1\260"+
    "\1\u0242\5\260\1\u0242\3\260\2\u0242\1\260\4\u0242\3\260"+
    "\1\u0242\1\260\1\u0242\21\260\1\u0242\3\260\3\u0245\1\264"+
    "\1\260\2\u0245\4\260\3\0\3\260\1\0\5\260\1\110"+
    "\7\260\1\u0245\1\260\1\u0245\1\260\1\u0245\5\260\1\u0245"+
    "\3\260\2\u0245\1\260\4\u0245\3\260\1\u0245\1\260\1\u0245"+
    "\21\260\1\u0245\2\260\1\110\3\u0246\2\110\2\u0246\16\110"+
    "\1\257\1\110\1\260\1\261\1\0\1\110\1\0\3\110"+
    "\1\u0246\1\110\1\u0246\1\110\1\u0246\5\110\1\u0246\3\110"+
    "\2\u0246\1\110\4\u0246\3\110\1\u0246\1\110\1\u0246\21\110"+
    "\1\u0246\2\110\4\260\1\u0240\4\260\1\u0241\2\260\3\0"+
    "\3\260\1\0\5\260\1\110\67\260\3\u0247\1\264\1\260"+
    "\2\u0247\4\260\3\0\3\260\1\0\5\260\1\110\7\260"+
    "\1\u0247\1\260\1\u0247\1\260\1\u0247\5\260\1\u0247\3\260"+
    "\2\u0247\1\260\4\u0247\3\260\1\u0247\1\260\1\u0247\21\260"+
    "\1\u0247\2\260\1\110\3\u0214\2\110\2\u0214\16\110\1\257"+
    "\1\110\1\260\1\261\1\0\1\110\1\0\3\110\1\u0214"+
    "\1\110\1\u0214\1\110\1\u0214\5\110\1\u0214\3\110\2\u0214"+
    "\1\110\4\u0214\3\110\1\u0214\1\110\1\u0214\21\110\1\u0214"+
    "\2\110\1\260\3\u0216\1\264\1\260\2\u0216\4\260\3\0"+
    "\3\260\1\0\5\260\1\110\7\260\1\u0216\1\260\1\u0216"+
    "\1\260\1\u0216\5\260\1\u0216\3\260\2\u0216\1\260\4\u0216"+
    "\3\260\1\u0216\1\260\1\u0216\21\260\1\u0216\2\260";

  private static int [] zzUnpackTrans() {
    int [] result = new int[36340];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\3\0\1\1\15\0\1\1\5\0\2\1\1\11"+
    "\2\1\1\11\3\1\1\11\5\1\2\11\3\1\1\11"+
    "\1\1\1\11\3\1\1\11\5\1\2\11\2\1\1\11"+
    "\1\1\10\11\5\1\2\11\2\1\1\11\1\1\1\11"+
    "\5\1\1\11\7\1\3\11\1\1\2\11\2\1\1\11"+
    "\2\1\1\11\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\2\1\1\0\1\11\1\0\2\11\2\0\1\11\2\0"+
    "\1\11\1\0\1\11\20\0\1\1\1\11\1\1\1\0"+
    "\1\11\3\0\1\11\3\0\5\1\1\11\1\1\1\11"+
    "\1\0\1\11\1\1\5\0\1\11\3\0\1\1\4\0"+
    "\7\1\1\11\1\0\2\11\1\1\1\11\1\1\1\11"+
    "\2\1\2\0\1\1\45\0\1\11\3\0\1\11\5\0"+
    "\1\1\7\0\1\11\1\0\1\11\1\0\2\11\2\1"+
    "\3\0\1\1\17\0\1\1\33\0\1\1\6\0\3\1"+
    "\10\0\1\11\1\0\1\11\4\0\1\11\3\0\1\11"+
    "\10\0\1\11\5\0\2\11\4\0\1\11\11\0\3\1"+
    "\2\0\2\1\1\0\1\11\14\0\1\11\2\0\1\11"+
    "\6\0\1\11\3\0\1\11\1\0\1\11\1\0\1\1"+
    "\1\11\13\0\1\1\4\0\1\11\20\0\1\11\2\0"+
    "\1\11\3\0\2\11\1\1\1\11\4\0\1\11\5\0"+
    "\1\1\6\0\1\11\1\0\3\11\2\0\2\11\1\0"+
    "\1\11\6\0\1\11\3\0\1\11\2\0\1\11\4\0"+
    "\2\1\10\0\1\1\2\11\1\0\1\11\1\0\2\11"+
    "\7\0\1\1\2\0\2\1\5\0\1\1\2\0\1\11"+
    "\3\0\1\11\1\0\1\11\3\0\4\1\2\0\4\11"+
    "\1\1\2\11\5\0\3\1\1\0\2\11\3\0\1\1"+
    "\2\0\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[583];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
  int nextState;
  boolean macroDefinition;

  int braceCount;
  int bracketCount;
  int commentCount;

  public _JFlexLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _JFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case COMMENT: {
              yybegin(REPORT_UNCLOSED); return FLEX_BLOCK_COMMENT;
            }
            case 584: break;
            case CODE: {
              yybegin(REPORT_UNCLOSED); return FLEX_RAW;
            }
            case 585: break;
            case STATES: {
              nextState=REGEXPSTART; yybegin(REPORT_UNCLOSED);
            }
            case 586: break;
            case ACTION_CODE: {
              nextState=REGEXPSTART; yybegin(REPORT_UNCLOSED); return FLEX_RAW;
            }
            case 587: break;
            case STRING_CONTENT: {
              yybegin(REPORT_UNCLOSED); return FLEX_STRING;
            }
            case 588: break;
            case CHARCLASS: {
              nextState=REGEXP; yybegin(REPORT_UNCLOSED); return FLEX_BRACK2;
            }
            case 589: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return FLEX_RAW;
            }
          case 133: break;
          case 2: 
            { return FLEX_LINE_COMMENT;
            }
          case 134: break;
          case 3: 
            { return BAD_CHARACTER;
            }
          case 135: break;
          case 4: 
            { 
            }
          case 136: break;
          case 5: 
            { return FLEX_NUMBER;
            }
          case 137: break;
          case 6: 
            { return FLEX_ID;
            }
          case 138: break;
          case 7: 
            { return FLEX_DOT;
            }
          case 139: break;
          case 8: 
            { return WHITE_SPACE;
            }
          case 140: break;
          case 9: 
            { return FLEX_NEWLINE;
            }
          case 141: break;
          case 10: 
            { return FLEX_COMMA;
            }
          case 142: break;
          case 11: 
            { yybegin(REGEXP); return FLEX_EQ;
            }
          case 143: break;
          case 12: 
            { yypushback(yylength()); yybegin(REGEXP);
            }
          case 144: break;
          case 13: 
            { return FLEX_BRACE2;
            }
          case 145: break;
          case 14: 
            { yybegin(STATES); return FLEX_ANGLE1;
            }
          case 146: break;
          case 15: 
            { return FLEX_CHAR;
            }
          case 147: break;
          case 16: 
            { yypushback(yylength()); if (macroDefinition) yybegin(MACROS); else yybegin(REGEXPSTART);
            }
          case 148: break;
          case 17: 
            { return FLEX_FSLASH;
            }
          case 149: break;
          case 18: 
            { return FLEX_STAR;
            }
          case 150: break;
          case 19: 
            { nextState=REGEXP; yybegin(STRING_CONTENT);
            }
          case 151: break;
          case 20: 
            { if (macroDefinition) return FLEX_CHAR; else yybegin(ACTION_CODE); return FLEX_BRACE1;
            }
          case 152: break;
          case 21: 
            { if (macroDefinition) yybegin(EXPRBAR); return FLEX_BAR;
            }
          case 153: break;
          case 22: 
            { yybegin(CHARCLASS); return FLEX_BRACK1;
            }
          case 154: break;
          case 23: 
            { return FLEX_DOLLAR;
            }
          case 155: break;
          case 24: 
            { return FLEX_BANG;
            }
          case 156: break;
          case 25: 
            { return FLEX_TILDE;
            }
          case 157: break;
          case 26: 
            { return FLEX_PAREN1;
            }
          case 158: break;
          case 27: 
            { return FLEX_PAREN2;
            }
          case 159: break;
          case 28: 
            { return FLEX_PLUS;
            }
          case 160: break;
          case 29: 
            { return FLEX_QUESTION;
            }
          case 161: break;
          case 30: 
            { return FLEX_HAT;
            }
          case 162: break;
          case 31: 
            { nextState=REGEXP; yybegin(SKIP_WSNL); return FLEX_ANGLE2;
            }
          case 163: break;
          case 32: 
            { if (braceCount > 0) braceCount--; else { yypushback(1); yybegin(REGEXPSTART); return FLEX_RAW; }
            }
          case 164: break;
          case 33: 
            { braceCount++;
            }
          case 165: break;
          case 34: 
            { yypushback(yylength()); yybegin(nextState); return FLEX_STRING;
            }
          case 166: break;
          case 35: 
            { yybegin(nextState); return FLEX_STRING;
            }
          case 167: break;
          case 36: 
            { yypushback(yylength()); yybegin(CLASSCHARS);
            }
          case 168: break;
          case 37: 
            { bracketCount=0; yypushback(yylength()); nextState=REGEXP; yybegin(REPORT_UNCLOSED);
            }
          case 169: break;
          case 38: 
            { nextState=CHARCLASS; yybegin(STRING_CONTENT);
            }
          case 170: break;
          case 39: 
            { bracketCount++; return FLEX_BRACK1;
            }
          case 171: break;
          case 40: 
            { if (bracketCount > 0) bracketCount--; else yybegin(REGEXP); return FLEX_BRACK2;
            }
          case 172: break;
          case 41: 
            { yypushback(yylength()); yybegin(nextState);
            }
          case 173: break;
          case 42: 
            { yybegin(nextState); return FLEX_BRACE2;
            }
          case 174: break;
          case 43: 
            { yypushback(yylength()); yybegin(CHARCLASS); return FLEX_CHAR;
            }
          case 175: break;
          case 44: 
            { yypushback(yylength()); yybegin(CHARCLASS);
            }
          case 176: break;
          case 45: 
            { yybegin(CHARCLASS); return FLEX_CHAR;
            }
          case 177: break;
          case 46: 
            { return FLEX_DASH;
            }
          case 178: break;
          case 47: 
            { yybegin(REGEXP); return FLEX_BRACE2;
            }
          case 179: break;
          case 48: 
            { yypushback(yylength()); yybegin(REPORT_UNCLOSED); return FLEX_STRING;
            }
          case 180: break;
          case 49: 
            { yybegin(STRING_CONTENT);
            }
          case 181: break;
          case 50: 
            { yybegin(nextState); return FLEX_NEWLINE;
            }
          case 182: break;
          case 51: 
            { yypushback(yylength()); yybegin(nextState); return FLEX_UNCLOSED;
            }
          case 183: break;
          case 52: 
            { yybegin(REGEXPSTART); return FLEX_BRACE1;
            }
          case 184: break;
          case 53: 
            { macroDefinition=true; nextState=MACROS; yybegin(SKIP_TOEOL); return FLEX_TWO_PERCS;
            }
          case 185: break;
          case 54: 
            { commentCount++;
            }
          case 186: break;
          case 55: 
            { if (commentCount > 0) commentCount--; else { yybegin(nextState); return FLEX_BLOCK_COMMENT; }
            }
          case 187: break;
          case 56: 
            { nextState=MACROS; yybegin(COMMENT);
            }
          case 188: break;
          case 57: 
            { return FLEX_STRING;
            }
          case 189: break;
          case 58: 
            { nextState=CODE; yybegin(SKIP_TOEOL); return FLEX_OPT_CODE1;
            }
          case 190: break;
          case 59: 
            { return FLEX_OPT_XSTATE;
            }
          case 191: break;
          case 60: 
            { macroDefinition=false; nextState=REGEXPSTART; yybegin(SKIP_TOEOL); return FLEX_TWO_PERCS;
            }
          case 192: break;
          case 61: 
            { return FLEX_OPT_STATE;
            }
          case 193: break;
          case 62: 
            { nextState=MACROS; yybegin(SKIP_TOEOL); return FLEX_OPT_CODE2;
            }
          case 194: break;
          case 63: 
            { nextState=REGEXPSTART; yybegin(COMMENT);
            }
          case 195: break;
          case 64: 
            { return FLEX_CHAR_CLASS;
            }
          case 196: break;
          case 65: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 22;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos/*, zzMarkedPos*/);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 23;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos/*, zzStartRead*/);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + ZZ_CMAP(zzInput) ];
              };
              zzMarkedPos = zzFPos;
            }
            { yypushback(yylength()); nextState=REGEXP; yybegin(SKIP_WSNL);
            }
          case 197: break;
          case 66: 
            { nextState=REGEXP; yybegin(COMMENT);
            }
          case 198: break;
          case 67: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { nextState=REGEXP; yybegin(REPEATEXP); return FLEX_BRACE1;
            }
          case 199: break;
          case 68: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { nextState=REGEXPSTART0; yybegin(SKIP_WSNL); return FLEX_ANGLE2;
            }
          case 200: break;
          case 69: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(CHARRANGE); return FLEX_CHAR;
            }
          case 201: break;
          case 70: 
            { return FLEX_BARBAR;
            }
          case 202: break;
          case 71: 
            { return FLEX_TILDETILDE;
            }
          case 203: break;
          case 72: 
            { return FLEX_DASHDASH;
            }
          case 204: break;
          case 73: 
            { return FLEX_AMPAMP;
            }
          case 205: break;
          case 74: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yypushback(yylength()); yybegin(CHARCLASS); return FLEX_CHAR;
            }
          case 206: break;
          case 75: 
            { yypushback(1); yybegin(CHARCLASS); return FLEX_CHAR;
            }
          case 207: break;
          case 76: 
            { return FLEX_VERSION;
            }
          case 208: break;
          case 77: 
            { yybegin(REGEXP_CODEPOINT);
            }
          case 209: break;
          case 78: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { nextState=REGEXP; yybegin(MACROUSE); return FLEX_BRACE1;
            }
          case 210: break;
          case 79: 
            { yybegin(STRING_CODEPOINT);
            }
          case 211: break;
          case 80: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return FLEX_CHAR;
            }
          case 212: break;
          case 81: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { nextState=CHARCLASS; yybegin(MACROUSE); return FLEX_BRACE1;
            }
          case 213: break;
          case 82: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(CHARCLASS); return FLEX_CHAR;
            }
          case 214: break;
          case 83: 
            { return FLEX_OPT_INT;
            }
          case 215: break;
          case 84: 
            { return FLEX_OPT_CUP;
            }
          case 216: break;
          case 85: 
            { return FLEX_OPT_TYPE;
            }
          case 217: break;
          case 86: 
            { nextState=CODE; yybegin(SKIP_TOEOL); return FLEX_OPT_EOF1;
            }
          case 218: break;
          case 87: 
            { return FLEX_OPT_FULL;
            }
          case 219: break;
          case 88: 
            { return FLEX_OPT_LINE;
            }
          case 220: break;
          case 89: 
            { return FLEX_OPT_CHAR;
            }
          case 221: break;
          case 90: 
            { return FLEX_OPT_7BIT;
            }
          case 222: break;
          case 91: 
            { return FLEX_OPT_8BIT;
            }
          case 223: break;
          case 92: 
            { nextState=MACROS; yybegin(SKIP_TOEOL); return FLEX_OPT_EOF2;
            }
          case 224: break;
          case 93: 
            { nextState=CODE; yybegin(SKIP_TOEOL); return FLEX_OPT_INIT1;
            }
          case 225: break;
          case 94: 
            { return FLEX_OPT_FINAL;
            }
          case 226: break;
          case 95: 
            { return FLEX_OPT_YYEOF;
            }
          case 227: break;
          case 96: 
            { return FLEX_OPT_CLASS;
            }
          case 228: break;
          case 97: 
            { return FLEX_OPT_DEBUG;
            }
          case 229: break;
          case 98: 
            { return FLEX_OPT16BIT;
            }
          case 230: break;
          case 99: 
            { nextState=MACROS; yybegin(SKIP_TOEOL); return FLEX_OPT_INIT2;
            }
          case 231: break;
          case 100: 
            { return FLEX_OPT_CUPSYM;
            }
          case 232: break;
          case 101: 
            { return FLEX_OPT_COLUMN;
            }
          case 233: break;
          case 102: 
            { return FLEX_OPT_PUBLIC;
            }
          case 234: break;
          case 103: 
            { return FLEX_OPT_BUFFER;
            }
          case 235: break;
          case 104: 
            { return FLEX_EOF;
            }
          case 236: break;
          case 105: 
            { return FLEX_OPT_UNICODE;
            }
          case 237: break;
          case 106: 
            { return FLEX_OPT_INTEGER;
            }
          case 238: break;
          case 107: 
            { return FLEX_OPT_INTWRAP;
            }
          case 239: break;
          case 108: 
            { return FLEX_OPT_INCLUDE;
            }
          case 240: break;
          case 109: 
            { return FLEX_OPT_NOTUNIX;
            }
          case 241: break;
          case 110: 
            { return FLEX_OPT_EXTENDS;
            }
          case 242: break;
          case 111: 
            { nextState=CODE; yybegin(SKIP_TOEOL); return FLEX_OPT_EOFVAL1;
            }
          case 243: break;
          case 112: 
            { return FLEX_OPT_CTORARG;
            }
          case 244: break;
          case 113: 
            { nextState=MACROS; yybegin(SKIP_TOEOL); return FLEX_OPT_EOFVAL2;
            }
          case 245: break;
          case 114: 
            { return FLEX_OPT_EOFTHROW;
            }
          case 246: break;
          case 115: 
            { return FLEX_OPT_EOFCLOSE;
            }
          case 247: break;
          case 116: 
            { return FLEX_OPT_FUNCTION;
            }
          case 248: break;
          case 117: 
            { return FLEX_OPT_ABSTRACT;
            }
          case 249: break;
          case 118: 
            { return FLEX_OPT_CUPDEBUG;
            }
          case 250: break;
          case 119: 
            { return FLEX_OPT_CASELESS;
            }
          case 251: break;
          case 120: 
            { return FLEX_OPT_INITTHROW;
            }
          case 252: break;
          case 121: 
            { nextState=CODE; yybegin(SKIP_TOEOL); return FLEX_OPT_EOFTHROW1;
            }
          case 253: break;
          case 122: 
            { return FLEX_OPT_SCANERROR;
            }
          case 254: break;
          case 123: 
            { nextState=MACROS; yybegin(SKIP_TOEOL); return FLEX_OPT_EOFTHROW2;
            }
          case 255: break;
          case 124: 
            { nextState=CODE; yybegin(SKIP_TOEOL); return FLEX_OPT_INITTHROW1;
            }
          case 256: break;
          case 125: 
            { return FLEX_OPT_IMPLEMENTS;
            }
          case 257: break;
          case 126: 
            { return FLEX_OPT_IGNORECASE;
            }
          case 258: break;
          case 127: 
            { return FLEX_OPT_APIPRIVATE;
            }
          case 259: break;
          case 128: 
            { return FLEX_OPT_YYLEXTHROW;
            }
          case 260: break;
          case 129: 
            { return FLEX_OPT_STANDALONE;
            }
          case 261: break;
          case 130: 
            { nextState=MACROS; yybegin(SKIP_TOEOL); return FLEX_OPT_INITTHROW2;
            }
          case 262: break;
          case 131: 
            { nextState=CODE; yybegin(SKIP_TOEOL); return FLEX_OPT_YYLEXTHROW1;
            }
          case 263: break;
          case 132: 
            { nextState=MACROS; yybegin(SKIP_TOEOL); return FLEX_OPT_YYLEXTHROW2;
            }
          case 264: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
