/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package org.intellij.jflex.parser;

import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.intellij.jflex.parser.JFlexParserDefinition.FLEX_NEWLINE;
import static org.intellij.jflex.psi.JFlexTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_JFlexLexer.flex</tt>
 */
public class _JFlexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int DECLARATIONS = 2;
  public static final int RULES = 4;
  public static final int CHAR_CLASS = 6;
  public static final int BLOCK = 8;
  public static final int BLOCK_0 = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13792 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\11\1\33\1\34\2\11\1\14\1\35\3\11\1\36\10\11\1\37\1\40\20\11\1\41\2\11"+
    "\1\42\5\11\1\43\4\11\1\44\1\45\4\11\51\14\1\46\3\14\1\47\1\50\4\14\1\51\12"+
    "\11\1\52\u0381\11");

  /* The ZZ_CMAP_Y table has 2752 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\53\1\25\1\54\1\55\1\56\1\57\1\60\1\61\1\53\1\16\1\62\1\55\1\56\1\63\1\1"+
    "\1\64\1\65\1\66\1\67\1\22\1\56\1\70\1\1\1\71\1\53\1\72\1\73\1\55\1\56\1\70"+
    "\1\1\1\61\1\53\1\41\1\74\1\75\1\76\1\77\1\1\1\71\1\65\1\1\1\100\1\36\1\56"+
    "\1\51\1\1\1\101\1\53\1\1\1\100\1\36\1\56\1\102\1\1\1\60\1\53\1\103\1\100\1"+
    "\36\1\13\1\104\1\60\1\105\1\53\1\106\1\107\1\110\1\13\1\111\1\112\1\1\1\65"+
    "\1\1\1\25\2\13\1\113\1\112\1\114\2\1\1\115\1\116\1\117\1\120\1\121\1\122\2"+
    "\1\1\71\1\1\1\114\1\1\1\123\1\13\1\124\1\1\1\125\7\1\2\13\1\30\1\105\1\114"+
    "\1\126\1\127\1\130\1\131\1\114\2\13\1\132\2\13\1\133\24\13\1\134\1\135\2\13"+
    "\1\134\2\13\1\136\1\137\1\14\3\13\1\137\3\13\1\30\2\1\1\13\1\1\5\13\1\140"+
    "\1\25\45\13\1\141\1\13\1\25\1\30\4\13\1\30\1\142\1\143\1\16\1\13\1\16\1\13"+
    "\1\16\1\143\1\71\3\13\1\144\1\1\1\145\1\114\2\1\1\114\5\13\1\27\2\13\1\146"+
    "\4\13\1\40\1\13\1\147\2\1\1\65\1\13\1\150\1\47\2\13\1\151\1\13\1\77\1\114"+
    "\2\1\1\13\1\112\3\13\1\47\2\1\2\114\1\152\5\1\1\107\2\13\1\144\1\153\1\114"+
    "\2\1\1\154\1\13\1\155\1\42\2\13\1\40\1\1\2\13\1\144\1\1\1\156\1\42\1\13\1"+
    "\150\6\1\1\157\1\160\14\13\4\1\21\13\1\140\2\13\1\140\1\161\1\13\1\150\3\13"+
    "\1\162\1\163\1\164\1\124\1\163\2\1\1\165\4\1\1\166\1\1\1\124\6\1\1\167\1\170"+
    "\1\171\1\172\1\173\3\1\1\174\147\1\2\13\1\147\2\13\1\147\10\13\1\175\1\176"+
    "\2\13\1\132\3\13\1\177\1\1\1\13\1\112\4\200\4\1\1\105\35\1\1\201\2\1\1\202"+
    "\1\25\4\13\1\203\1\25\4\13\1\133\1\107\1\13\1\150\1\25\4\13\1\147\1\1\1\13"+
    "\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1\124\4\1\2\13\1"+
    "\150\20\13\1\124\1\13\1\204\1\1\2\13\1\147\1\105\1\13\1\150\4\13\1\40\2\1"+
    "\1\205\1\206\5\13\1\207\1\13\1\150\1\27\3\1\1\205\1\210\1\13\1\31\1\1\3\13"+
    "\1\144\1\206\2\13\1\144\1\1\1\114\1\1\1\211\1\42\1\13\1\40\1\13\1\112\1\1"+
    "\1\13\1\124\1\50\2\13\1\31\1\105\1\114\1\212\1\213\2\13\1\46\1\1\1\214\1\114"+
    "\1\13\1\215\3\13\1\216\1\217\1\220\1\30\1\66\1\221\1\222\1\200\2\13\1\133"+
    "\1\40\7\13\1\31\1\114\72\13\1\144\1\13\1\223\2\13\1\151\20\1\26\13\1\150\6"+
    "\13\1\77\2\1\1\112\1\224\1\56\1\225\1\226\6\13\1\16\1\1\1\154\25\13\1\150"+
    "\1\1\4\13\1\206\2\13\1\27\2\1\1\151\7\1\1\212\7\13\1\124\1\1\1\114\1\25\1"+
    "\30\1\25\1\30\1\227\4\13\1\147\1\230\1\231\2\1\1\232\1\13\1\14\1\233\2\150"+
    "\2\1\7\13\1\30\30\1\1\13\1\124\3\13\1\71\2\1\2\13\1\1\1\13\1\234\2\13\1\40"+
    "\1\13\1\150\2\13\1\235\3\1\11\13\1\150\1\114\5\1\2\13\1\27\3\13\1\144\11\1"+
    "\23\13\1\112\1\13\1\40\1\27\11\1\1\236\2\13\1\237\1\13\1\40\1\13\1\112\1\13"+
    "\1\147\4\1\1\13\1\240\1\13\1\40\1\13\1\77\4\1\3\13\1\241\4\1\1\71\1\242\1"+
    "\13\1\144\2\1\1\13\1\124\1\13\1\124\2\1\1\123\1\13\1\47\1\1\3\13\1\40\1\13"+
    "\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1\46\3\1\3\13\1\31\3\13\1\31\60\1\1\154"+
    "\2\13\1\27\2\1\1\65\1\1\1\154\2\13\2\1\1\13\1\46\1\114\1\154\1\13\1\112\1"+
    "\65\1\1\2\13\1\243\1\154\2\13\1\31\1\244\1\245\2\1\1\13\1\22\1\151\5\1\1\246"+
    "\1\247\1\46\2\13\1\147\1\1\1\114\1\73\1\55\1\56\1\70\1\1\1\250\1\16\21\1\3"+
    "\13\1\1\1\251\1\114\12\1\2\13\1\147\2\1\1\252\2\1\3\13\1\1\1\253\1\114\2\1"+
    "\2\13\1\30\1\1\1\114\3\1\1\13\1\77\1\1\1\114\26\1\4\13\1\114\1\105\34\1\3"+
    "\13\1\46\20\1\71\13\1\77\16\1\14\13\1\144\53\1\2\13\1\147\75\1\44\13\1\112"+
    "\33\1\43\13\1\46\1\13\1\147\1\114\6\1\1\13\1\150\1\1\3\13\1\1\1\144\1\114"+
    "\1\154\1\254\1\13\67\1\4\13\1\47\1\71\3\1\1\154\6\1\1\16\77\1\6\13\1\30\1"+
    "\124\1\46\1\77\66\1\5\13\1\212\3\13\1\143\1\255\1\256\1\257\3\13\1\260\1\261"+
    "\1\13\1\262\1\263\1\36\24\13\1\264\1\13\1\36\1\133\1\13\1\133\1\13\1\212\1"+
    "\13\1\212\1\147\1\13\1\147\1\13\1\56\1\13\1\56\1\13\1\265\3\266\14\13\1\47"+
    "\123\1\1\257\1\13\1\267\1\270\1\271\1\272\1\273\1\274\1\275\1\151\1\276\1"+
    "\151\24\1\55\13\1\112\2\1\103\13\1\47\15\13\1\150\150\13\1\16\25\1\41\13\1"+
    "\150\36\1");

  /* The ZZ_CMAP_A table has 3056 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\16\1\5\2\10\1\7\22\0\1\42\1\76\1\4\1\0\1\75\1\41\1\0\1\15\1\65\1\66"+
    "\1\13\1\14\1\73\1\70\1\72\1\12\1\3\1\61\4\3\1\62\1\57\1\60\1\3\1\20\1\0\1"+
    "\63\1\43\1\64\1\67\1\0\4\1\1\100\1\102\10\1\1\101\13\1\1\17\1\6\1\26\1\71"+
    "\1\1\1\0\1\35\1\55\1\34\1\27\1\23\1\46\1\31\1\50\1\30\1\21\1\56\1\22\1\54"+
    "\1\45\1\37\1\33\1\1\1\25\1\36\1\24\1\32\1\47\1\40\1\52\1\51\1\1\1\44\1\74"+
    "\1\53\1\77\6\0\1\10\24\0\1\2\12\0\1\2\4\0\1\2\5\0\27\2\1\0\12\2\4\0\14\2\16"+
    "\0\5\2\7\0\1\2\1\0\1\2\1\0\5\2\1\0\2\2\2\0\4\2\1\0\1\2\6\0\1\2\1\0\3\2\1\0"+
    "\1\2\1\0\4\2\1\0\23\2\1\0\13\2\10\0\6\2\1\0\26\2\2\0\1\2\6\0\10\2\10\0\13"+
    "\2\5\0\3\2\15\0\12\11\4\0\6\2\1\0\1\2\17\0\2\2\7\0\2\2\12\11\3\2\2\0\2\2\1"+
    "\0\16\2\15\0\11\2\13\0\1\2\16\0\12\11\6\2\4\0\2\2\4\0\1\2\5\0\6\2\4\0\1\2"+
    "\11\0\1\2\3\0\1\2\7\0\11\2\7\0\5\2\17\0\26\2\3\0\1\2\2\0\1\2\7\0\12\2\4\0"+
    "\12\11\1\2\4\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0\1\2\3\0\4\2\3\0\1\2\20\0"+
    "\1\2\15\0\2\2\1\0\1\2\5\0\6\2\4\0\2\2\1\0\2\2\1\0\2\2\1\0\2\2\17\0\4\2\1\0"+
    "\1\2\7\0\12\11\2\0\3\2\20\0\11\2\1\0\2\2\1\0\2\2\1\0\5\2\3\0\1\2\2\0\1\2\30"+
    "\0\1\2\13\0\10\2\2\0\1\2\3\0\1\2\1\0\6\2\3\0\3\2\1\0\4\2\3\0\2\2\1\0\1\2\1"+
    "\0\2\2\3\0\2\2\3\0\3\2\3\0\14\2\13\0\10\2\1\0\2\2\10\0\3\2\5\0\4\2\1\0\5\2"+
    "\3\0\1\2\3\0\2\2\15\0\13\2\2\0\1\2\21\0\1\2\12\0\6\2\5\0\22\2\3\0\10\2\1\0"+
    "\11\2\1\0\1\2\2\0\7\2\11\0\1\2\1\0\2\2\14\0\12\11\7\0\2\2\1\0\1\2\2\0\2\2"+
    "\1\0\1\2\2\0\1\2\6\0\4\2\1\0\7\2\1\0\3\2\1\0\1\2\1\0\1\2\2\0\2\2\1\0\4\2\1"+
    "\0\2\2\11\0\1\2\2\0\5\2\1\0\1\2\11\0\12\11\2\0\14\2\1\0\24\2\13\0\5\2\3\0"+
    "\6\2\4\0\4\2\3\0\1\2\3\0\2\2\7\0\3\2\4\0\15\2\14\0\1\2\1\0\6\2\1\0\1\2\5\0"+
    "\1\2\2\0\13\2\1\0\15\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0\1\2\1\0\4\2\2\0"+
    "\7\2\1\0\1\2\1\0\4\2\2\0\16\2\2\0\6\2\2\0\15\2\2\0\1\2\1\0\10\2\7\0\15\2\1"+
    "\0\6\2\23\0\1\2\4\0\1\2\3\0\11\2\1\0\1\2\5\0\17\2\1\0\16\2\2\0\14\2\13\0\1"+
    "\2\15\0\7\2\7\0\16\2\15\0\2\2\12\11\3\0\3\2\11\0\4\2\1\0\4\2\3\0\2\2\11\0"+
    "\10\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0\6\2\1\0\7\2\1\0\1\2\3\0\3\2\1\0\7\2\3\0"+
    "\4\2\2\0\6\2\14\0\2\10\7\0\1\2\15\0\1\2\2\0\1\2\4\0\1\2\2\0\12\2\1\0\1\2\3"+
    "\0\5\2\6\0\1\2\1\0\1\2\1\0\1\2\1\0\4\2\1\0\13\2\2\0\4\2\5\0\5\2\4\0\1\2\4"+
    "\0\2\2\13\0\5\2\6\0\4\2\3\0\2\2\14\0\10\2\7\0\10\2\1\0\7\2\6\0\2\2\12\0\5"+
    "\2\5\0\2\2\3\0\7\2\6\0\3\2\12\11\2\2\13\0\11\2\2\0\27\2\2\0\7\2\1\0\3\2\1"+
    "\0\4\2\1\0\4\2\2\0\6\2\3\0\1\2\1\0\1\2\2\0\5\2\1\0\12\2\12\11\5\2\1\0\3\2"+
    "\1\0\10\2\4\0\7\2\3\0\1\2\3\0\2\2\1\0\1\2\3\0\2\2\2\0\5\2\2\0\1\2\1\0\1\2"+
    "\30\0\3\2\3\0\6\2\2\0\6\2\2\0\6\2\11\0\7\2\4\0\5\2\3\0\5\2\5\0\1\2\1\0\10"+
    "\2\1\0\5\2\1\0\1\2\1\0\2\2\1\0\2\2\1\0\12\2\6\0\12\2\2\0\6\2\2\0\6\2\2\0\6"+
    "\2\2\0\3\2\3\0\14\2\1\0\16\2\1\0\2\2\1\0\2\2\1\0\10\2\6\0\4\2\4\0\16\2\2\0"+
    "\1\2\1\0\14\2\1\0\2\2\3\0\1\2\2\0\4\2\1\0\2\2\12\0\10\2\6\0\6\2\1\0\3\2\1"+
    "\0\12\2\3\0\1\2\12\0\4\2\13\0\12\11\1\2\1\0\1\2\3\0\7\2\1\0\1\2\1\0\4\2\1"+
    "\0\17\2\1\0\2\2\14\0\3\2\4\0\2\2\1\0\1\2\20\0\4\2\10\0\1\2\13\0\10\2\5\0\3"+
    "\2\2\0\1\2\2\0\2\2\2\0\4\2\1\0\14\2\1\0\1\2\1\0\7\2\1\0\21\2\1\0\4\2\2\0\10"+
    "\2\1\0\7\2\1\0\14\2\1\0\4\2\1\0\5\2\1\0\1\2\3\0\14\2\2\0\13\2\1\0\10\2\2\0"+
    "\22\11\1\0\2\2\1\0\1\2\2\0\1\2\1\0\12\2\1\0\4\2\1\0\1\2\1\0\1\2\6\0\1\2\4"+
    "\0\1\2\1\0\1\2\1\0\1\2\1\0\3\2\1\0\2\2\1\0\1\2\2\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\2\2\1\0\1\2\2\0\4\2\1\0\7\2\1\0\4\2\1\0\4\2\1\0\1\2\1\0\12"+
    "\2\1\0\5\2\1\0\3\2\1\0\5\2\1\0\5\2");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\0\1\1\1\2\1\3\1\2\1\1"+
    "\1\3\1\4\1\3\1\5\1\6\1\7\1\4\1\10"+
    "\1\3\1\11\1\12\1\13\1\14\1\15\1\5\1\16"+
    "\1\17\1\20\1\5\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\2\5\1\34"+
    "\1\35\1\5\1\36\1\5\1\4\1\37\1\1\1\3"+
    "\1\2\2\1\1\3\1\4\1\40\1\41\1\40\1\42"+
    "\1\43\1\0\1\44\1\0\1\45\1\40\1\42\12\0"+
    "\1\46\1\47\1\50\3\0\1\51\10\0\1\40\1\42"+
    "\1\0\1\1\2\0\1\52\2\42\46\0\2\1\1\0"+
    "\1\40\2\42\2\0\2\42\14\0\1\53\10\0\1\54"+
    "\25\0\2\40\3\42\7\0\1\55\2\0\1\56\3\0"+
    "\1\57\11\0\1\60\6\0\1\61\10\0\1\62\6\0"+
    "\1\63\1\64\3\0\1\65\12\0\1\66\1\67\4\0"+
    "\1\70\4\0\1\71\7\0\1\72\4\0\1\73\2\0"+
    "\1\74\2\0\1\75\1\76\2\0\1\77\20\0\1\100"+
    "\2\0\1\101\1\0\1\102\4\0\1\103\3\0\1\104"+
    "\1\105\1\106\10\0\1\107\1\110\1\0\1\111\1\112"+
    "\1\0\1\113\1\0\1\114\1\115\6\0\1\116\2\0"+
    "\1\117\3\0\1\120\1\0\1\121\1\122\3\0\1\123"+
    "\1\124\1\0\1\125\2\0\1\126\3\0\1\127\2\0"+
    "\1\130\1\131\1\0\1\132\3\0\1\133\1\0\1\134"+
    "\3\0\1\135\1\136\1\137\1\140\1\141\1\142\1\143"+
    "\3\0\1\144\1\145\1\0\1\146\1\147\2\0\1\150";

  private static int [] zzUnpackAction() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u03aa\0\u03aa\0\u057f"+
    "\0\u03aa\0\u05c2\0\u03aa\0\u03aa\0\u03aa\0\u0605\0\u03aa\0\u03aa"+
    "\0\u03aa\0\u03aa\0\u03aa\0\u03aa\0\u03aa\0\u03aa\0\u03aa\0\u03aa"+
    "\0\u03aa\0\u0648\0\u068b\0\u0605\0\u03aa\0\u0473\0\u03aa\0\u04b6"+
    "\0\u057f\0\u03aa\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da\0\u081d"+
    "\0\u0860\0\u08a3\0\u03aa\0\u08e6\0\u0929\0\u03aa\0\u0473\0\u03aa"+
    "\0\u096c\0\u03aa\0\u09af\0\u09f2\0\u0a35\0\u0a78\0\u0abb\0\u0afe"+
    "\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u03aa"+
    "\0\u03aa\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8"+
    "\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u103a\0\u107d\0\u10c0"+
    "\0\u1103\0\u1146\0\u1189\0\u03aa\0\u11cc\0\u120f\0\u1252\0\u1295"+
    "\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u14ad"+
    "\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682\0\u16c5"+
    "\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857\0\u189a\0\u18dd"+
    "\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5"+
    "\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01\0\u03aa\0\u0f71\0\u1c44\0\u1c87"+
    "\0\u1cca\0\u1d0d\0\u1d50\0\u1d93\0\u0192\0\u03aa\0\u1dd6\0\u1e19"+
    "\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68\0\u1fab\0\u1fee\0\u2031"+
    "\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u2180\0\u21c3\0\u2206\0\u2249"+
    "\0\u228c\0\u22cf\0\u2312\0\u2355\0\u2398\0\u23db\0\u241e\0\u2461"+
    "\0\u24a4\0\u24e7\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679"+
    "\0\u26bc\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u280b\0\u284e\0\u2891"+
    "\0\u28d4\0\u2917\0\u295a\0\u06ce\0\u299d\0\u29e0\0\u2a23\0\u2a66"+
    "\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5\0\u03aa\0\u2bf8\0\u2c3b"+
    "\0\u03aa\0\u2c7e\0\u2cc1\0\u2d04\0\u03aa\0\u2d47\0\u2d8a\0\u2dcd"+
    "\0\u2e10\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c\0\u2f5f\0\u03aa\0\u2fa2"+
    "\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u30f1\0\u03aa\0\u3134\0\u3177"+
    "\0\u31ba\0\u31fd\0\u3240\0\u3283\0\u32c6\0\u3309\0\u03aa\0\u334c"+
    "\0\u338f\0\u33d2\0\u3415\0\u3458\0\u349b\0\u03aa\0\u03aa\0\u34de"+
    "\0\u3521\0\u3564\0\u03aa\0\u35a7\0\u35ea\0\u362d\0\u3670\0\u36b3"+
    "\0\u36f6\0\u3739\0\u377c\0\u37bf\0\u3802\0\u03aa\0\u03aa\0\u3845"+
    "\0\u3888\0\u38cb\0\u390e\0\u03aa\0\u3951\0\u3994\0\u39d7\0\u3a1a"+
    "\0\u03aa\0\u3a5d\0\u3aa0\0\u3ae3\0\u3b26\0\u3b69\0\u3bac\0\u3bef"+
    "\0\u03aa\0\u3c32\0\u3c75\0\u3cb8\0\u3cfb\0\u03aa\0\u3d3e\0\u3d81"+
    "\0\u03aa\0\u3dc4\0\u3e07\0\u03aa\0\u03aa\0\u3e4a\0\u3e8d\0\u03aa"+
    "\0\u3ed0\0\u3f13\0\u3f56\0\u3f99\0\u3fdc\0\u401f\0\u4062\0\u40a5"+
    "\0\u40e8\0\u412b\0\u416e\0\u41b1\0\u41f4\0\u4237\0\u427a\0\u42bd"+
    "\0\u03aa\0\u4300\0\u4343\0\u03aa\0\u4386\0\u03aa\0\u43c9\0\u440c"+
    "\0\u444f\0\u4492\0\u03aa\0\u44d5\0\u4518\0\u455b\0\u03aa\0\u03aa"+
    "\0\u03aa\0\u459e\0\u45e1\0\u4624\0\u4667\0\u46aa\0\u46ed\0\u4730"+
    "\0\u4773\0\u03aa\0\u03aa\0\u47b6\0\u03aa\0\u03aa\0\u47f9\0\u03aa"+
    "\0\u483c\0\u03aa\0\u03aa\0\u487f\0\u48c2\0\u4905\0\u4948\0\u498b"+
    "\0\u49ce\0\u03aa\0\u4a11\0\u4a54\0\u03aa\0\u4a97\0\u4ada\0\u4b1d"+
    "\0\u03aa\0\u4b60\0\u4ba3\0\u03aa\0\u4be6\0\u4c29\0\u4c6c\0\u03aa"+
    "\0\u03aa\0\u4caf\0\u03aa\0\u4cf2\0\u4d35\0\u03aa\0\u4d78\0\u4dbb"+
    "\0\u4dfe\0\u03aa\0\u4e41\0\u4e84\0\u03aa\0\u03aa\0\u4ec7\0\u4f0a"+
    "\0\u4f4d\0\u4f90\0\u4fd3\0\u03aa\0\u5016\0\u03aa\0\u5059\0\u509c"+
    "\0\u50df\0\u03aa\0\u03aa\0\u03aa\0\u03aa\0\u03aa\0\u03aa\0\u5122"+
    "\0\u5165\0\u51a8\0\u51eb\0\u03aa\0\u03aa\0\u522e\0\u03aa\0\u03aa"+
    "\0\u5271\0\u52b4\0\u03aa";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\5\7\1\10\1\7\1\11\1\12\1\7\1\13\3\7"+
    "\1\14\22\7\1\15\1\16\40\7\1\17\2\20\1\21"+
    "\1\22\1\10\1\23\1\24\1\10\1\21\1\25\1\26"+
    "\1\27\1\17\1\16\1\30\1\17\5\20\1\31\12\20"+
    "\1\32\1\16\1\33\1\34\6\20\1\35\3\20\4\21"+
    "\1\36\1\17\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\3\20\1\17\2\20"+
    "\1\21\1\22\1\10\1\23\1\24\1\10\1\21\1\25"+
    "\1\26\1\27\1\52\1\16\1\30\1\17\5\20\1\31"+
    "\12\20\1\53\1\16\1\17\1\34\6\20\1\35\3\20"+
    "\4\21\1\54\1\55\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\3\20\4\17"+
    "\1\56\1\57\1\60\10\17\1\61\6\17\1\62\41\17"+
    "\1\42\1\43\11\17\5\63\1\10\1\63\1\64\1\65"+
    "\1\63\1\66\2\63\1\67\1\70\22\63\1\71\1\16"+
    "\10\63\1\35\27\63\5\72\1\73\75\72\5\7\1\0"+
    "\33\7\2\0\40\7\5\0\1\10\1\0\2\10\72\0"+
    "\5\7\1\10\1\7\1\11\1\12\5\7\1\14\22\7"+
    "\1\0\1\16\45\7\1\10\1\7\2\12\30\7\2\0"+
    "\45\7\1\0\4\7\1\74\1\75\25\7\2\0\45\7"+
    "\1\0\1\7\1\14\6\7\1\14\22\7\1\0\1\16"+
    "\40\7\41\0\1\76\50\0\1\16\6\0\1\16\23\0"+
    "\1\16\144\0\1\20\1\0\1\20\15\0\5\20\1\0"+
    "\12\20\4\0\6\20\1\0\7\20\15\0\3\20\3\0"+
    "\1\21\5\0\1\21\45\0\4\21\20\0\4\77\1\100"+
    "\1\0\1\101\74\77\5\102\1\0\1\102\2\0\72\102"+
    "\5\0\1\10\1\0\1\24\1\10\5\0\1\16\23\0"+
    "\1\16\52\0\1\103\1\104\107\0\1\105\104\0\1\106"+
    "\1\107\1\110\2\0\1\111\1\112\1\0\1\113\1\114"+
    "\1\115\1\116\1\117\2\0\1\120\2\0\1\121\1\122"+
    "\1\123\2\0\1\124\1\125\2\0\1\126\1\0\1\127"+
    "\1\130\1\131\104\0\1\132\17\0\6\133\1\134\6\133"+
    "\1\0\65\133\30\0\1\135\10\0\1\120\41\0\5\63"+
    "\1\0\7\63\1\67\23\63\2\0\10\63\1\0\34\63"+
    "\1\10\1\63\1\64\1\65\4\63\1\67\1\70\22\63"+
    "\1\0\1\16\10\63\1\0\34\63\1\10\1\63\2\65"+
    "\4\63\1\67\23\63\2\0\10\63\1\0\34\63\1\0"+
    "\4\63\1\136\1\137\1\63\1\67\23\63\2\0\10\63"+
    "\1\0\34\63\1\140\1\141\6\63\1\67\23\63\2\140"+
    "\10\63\1\140\34\63\1\0\1\63\1\70\5\63\1\67"+
    "\1\70\22\63\1\0\1\16\10\63\1\0\27\63\23\0"+
    "\1\142\4\0\1\143\22\0\1\144\27\0\5\72\1\0"+
    "\75\72\5\74\1\0\1\74\2\7\30\74\2\103\40\74"+
    "\5\75\1\104\5\75\1\145\25\75\2\104\40\75\5\77"+
    "\1\0\1\77\2\0\72\77\5\103\1\0\1\103\2\0"+
    "\72\103\13\104\1\146\67\104\21\0\1\147\1\150\4\0"+
    "\1\151\2\0\1\152\100\0\1\153\111\0\1\154\12\0"+
    "\1\155\65\0\1\156\13\0\1\157\54\0\1\160\110\0"+
    "\1\161\13\0\1\162\6\0\1\163\73\0\1\164\67\0"+
    "\1\165\2\0\1\166\67\0\1\167\1\0\1\170\5\0"+
    "\1\171\2\0\1\172\1\0\1\173\10\0\1\174\65\0"+
    "\1\175\21\0\1\176\51\0\1\177\7\0\1\200\3\0"+
    "\1\201\101\0\1\202\73\0\1\203\1\0\1\204\121\0"+
    "\1\205\67\0\1\206\76\0\1\207\16\0\1\210\106\0"+
    "\1\211\102\0\1\212\107\0\1\213\120\0\1\214\17\0"+
    "\1\215\65\0\5\133\1\0\1\133\2\0\4\133\1\216"+
    "\65\133\45\0\1\217\35\0\5\136\1\0\1\136\2\63"+
    "\4\136\1\220\23\136\2\103\10\136\1\103\27\136\5\137"+
    "\1\104\5\137\1\221\1\137\1\222\23\137\2\104\10\137"+
    "\1\104\27\137\15\0\1\63\65\0\5\63\1\0\7\63"+
    "\1\67\23\63\2\140\10\63\1\140\27\63\37\0\1\223"+
    "\110\0\1\224\35\0\5\75\1\104\4\75\1\225\1\145"+
    "\25\75\2\104\40\75\12\104\1\226\1\146\67\104\22\0"+
    "\1\227\103\0\1\230\13\0\1\231\73\0\1\232\105\0"+
    "\1\233\114\0\1\234\103\0\1\235\60\0\1\236\133\0"+
    "\1\237\60\0\1\240\124\0\1\241\72\0\1\242\61\0"+
    "\1\243\3\0\1\244\3\0\1\245\101\0\1\246\77\0"+
    "\1\247\127\0\1\250\61\0\1\251\103\0\1\252\104\0"+
    "\1\253\76\0\1\254\105\0\1\255\66\0\1\256\115\0"+
    "\1\257\75\0\1\260\110\0\1\261\101\0\1\262\102\0"+
    "\1\263\75\0\1\264\76\0\1\265\123\0\1\266\57\0"+
    "\1\267\22\0\1\270\57\0\1\271\1\272\103\0\1\273"+
    "\124\0\1\274\71\0\1\275\75\0\1\276\102\0\1\277"+
    "\127\0\1\300\126\0\1\301\35\0\1\245\46\0\5\136"+
    "\1\140\1\302\2\63\4\136\1\220\23\136\2\303\10\136"+
    "\1\303\27\136\5\137\1\104\4\137\1\304\1\221\1\137"+
    "\1\222\23\137\2\104\10\137\1\104\34\137\1\305\1\306"+
    "\4\137\1\221\1\137\1\222\23\137\2\305\10\137\1\305"+
    "\27\137\46\0\1\307\64\0\1\310\75\0\1\311\103\0"+
    "\1\312\116\0\1\313\73\0\1\314\104\0\1\315\72\0"+
    "\1\316\103\0\1\317\7\0\1\320\7\0\1\321\2\0"+
    "\1\322\56\0\1\323\101\0\1\324\103\0\1\325\111\0"+
    "\1\326\107\0\1\327\66\0\1\330\14\0\1\331\66\0"+
    "\1\332\100\0\1\333\102\0\1\334\114\0\1\335\70\0"+
    "\1\336\136\0\1\337\62\0\1\340\71\0\1\341\104\0"+
    "\1\342\6\0\1\343\67\0\1\344\111\0\1\345\75\0"+
    "\1\346\110\0\1\347\73\0\1\350\102\0\1\351\20\0"+
    "\1\352\102\0\1\353\61\0\1\354\110\0\1\355\105\0"+
    "\1\356\67\0\1\357\114\0\1\360\71\0\1\361\116\0"+
    "\1\362\100\0\1\363\113\0\1\364\70\0\1\365\72\0"+
    "\1\366\102\0\1\367\106\0\1\370\154\0\1\371\5\136"+
    "\1\0\1\136\2\63\4\136\1\220\23\136\2\303\10\136"+
    "\1\303\27\136\5\103\1\0\1\103\2\0\4\103\1\136"+
    "\65\103\13\104\1\146\1\104\1\137\65\104\5\137\1\104"+
    "\5\137\1\221\1\137\1\222\23\137\2\305\10\137\1\305"+
    "\27\137\47\0\1\372\3\0\1\373\53\0\1\374\102\0"+
    "\1\375\102\0\1\376\101\0\1\377\107\0\1\u0100\75\0"+
    "\1\u0101\127\0\1\u0102\54\0\1\u0103\115\0\1\u0104\112\0"+
    "\1\u0105\60\0\1\u0106\110\0\1\u0107\76\0\1\u0108\106\0"+
    "\1\u0109\76\0\1\u010a\101\0\1\u010b\17\0\1\u010c\70\0"+
    "\1\u010d\73\0\1\u010e\116\0\1\u010f\73\0\1\u0110\110\0"+
    "\1\u0111\101\0\1\u0112\70\0\1\u0113\130\0\1\u0114\53\0"+
    "\1\u0115\134\0\1\u0116\53\0\1\u0117\102\0\1\u0118\100\0"+
    "\1\u0119\106\0\1\u011a\76\0\1\u011b\113\0\1\u011c\113\0"+
    "\1\u011d\57\0\1\u011e\104\0\1\u011f\130\0\1\u0120\76\0"+
    "\1\u0121\60\0\1\u0122\101\0\1\u0123\113\0\1\u0124\72\0"+
    "\1\u0125\142\0\1\u0126\53\0\1\u0127\120\0\1\u0128\53\0"+
    "\1\u0129\101\0\1\u012a\104\0\1\u012b\101\0\1\u012c\103\0"+
    "\1\u012d\102\0\1\u012e\114\0\1\u012f\65\0\1\u0130\107\0"+
    "\1\u0131\76\0\1\u0132\102\0\1\u0133\114\0\1\u0134\115\0"+
    "\1\u0135\61\0\1\u0136\127\0\1\u0137\55\0\1\u0138\107\0"+
    "\1\u0139\73\0\1\u013a\132\0\1\u013b\101\0\1\u013c\51\0"+
    "\1\u013d\124\0\1\u013e\65\0\1\u013f\107\0\1\u0140\102\0"+
    "\1\u0141\72\0\1\u0142\125\0\1\u0143\62\0\1\u0144\102\0"+
    "\1\u0145\76\0\1\u0146\101\0\1\u0147\104\0\1\u0148\141\0"+
    "\1\u0149\40\0\1\u014a\103\0\1\u014b\104\0\1\u014c\111\0"+
    "\1\u014d\66\0\1\u014e\116\0\1\u014f\105\0\1\u0150\101\0"+
    "\1\u0151\110\0\1\u0152\74\0\1\u0153\100\0\1\u0154\73\0"+
    "\1\u0155\110\0\1\u0156\74\0\1\u0157\100\0\1\u0158\102\0"+
    "\1\u0159\102\0\1\u015a\110\0\1\u015b\103\0\1\u015c\106\0"+
    "\1\u015d\113\0\1\u015e\67\0\1\u015f\70\0\1\u0160\105\0"+
    "\1\u0161\127\0\1\u0162\67\0\1\u0163\113\0\1\u0164\105\0"+
    "\1\u0165\54\0\1\u0166\75\0\1\u0167\117\0\1\u0168\73\0"+
    "\1\u0169\111\0\1\u016a\105\0\1\u016b\65\0\1\u016c\114\0"+
    "\1\u016d\104\0\1\u016e\110\0\1\u016f\66\0\1\u0170\107\0"+
    "\1\u0171\101\0\1\u0172\71\0\1\u0173\115\0\1\u0174\102\0"+
    "\1\u0175\110\0\1\u0176\62\0\1\u0177\75\0\1\u0178\6\0"+
    "\1\u0179\101\0\1\u017a\112\0\1\u017b\102\0\1\u017c\110\0"+
    "\1\u017d\6\0\1\u017e\65\0\1\u017f\104\0\1\u0180\66\0"+
    "\1\u0181\102\0\1\u0182\123\0\1\u0183\62\0\1\u0184\114\0"+
    "\1\u0185\71\0\1\u0186\104\0\1\u0187\75\0\1\u0188\102\0"+
    "\1\u0189\102\0\1\u018a\123\0\1\u018b\6\0\1\u018c\65\0"+
    "\1\u018d\67\0\1\u018e\102\0\1\u018f\117\0\1\u0190\73\0"+
    "\1\u0191\71\0\1\u0192\102\0\1\u0193\126\0\1\u0194\6\0"+
    "\1\u0195\57\0\1\u0196\100\0\1\u0197\102\0\1\u0198\100\0"+
    "\1\u0199\76\0\1\u019a\110\0\1\u019b\54\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21239];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\1\0\10\1\1\11\6\1\2\11\1\1"+
    "\1\11\1\1\3\11\1\1\13\11\3\1\1\11\1\1"+
    "\1\11\2\1\1\11\10\1\1\11\2\1\1\11\1\0"+
    "\1\11\1\0\1\11\2\1\12\0\1\1\2\11\3\0"+
    "\1\1\10\0\2\1\1\0\1\1\2\0\1\11\2\1"+
    "\46\0\1\11\1\1\1\0\3\1\2\0\1\1\1\11"+
    "\14\0\1\1\10\0\1\1\25\0\5\1\7\0\1\11"+
    "\2\0\1\11\3\0\1\11\11\0\1\11\6\0\1\11"+
    "\10\0\1\11\6\0\2\11\3\0\1\11\12\0\2\11"+
    "\4\0\1\11\4\0\1\11\7\0\1\11\4\0\1\11"+
    "\2\0\1\11\2\0\2\11\2\0\1\11\20\0\1\11"+
    "\2\0\1\11\1\0\1\11\4\0\1\11\3\0\3\11"+
    "\10\0\2\11\1\0\2\11\1\0\1\11\1\0\2\11"+
    "\6\0\1\11\2\0\1\11\3\0\1\11\1\0\1\1"+
    "\1\11\3\0\2\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\2\0\2\11\1\0\1\1\3\0\1\11\1\0"+
    "\1\11\3\0\6\11\1\1\3\0\2\11\1\0\2\11"+
    "\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private int prevState;
  private int parenCount;

  public _JFlexLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _JFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return FLEX_JAVA;
            }
          case 105: break;
          case 2: 
            { return FLEX_NEWLINE;
            }
          case 106: break;
          case 3: 
            { return WHITE_SPACE;
            }
          case 107: break;
          case 4: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 108: break;
          case 5: 
            { return FLEX_CHAR;
            }
          case 109: break;
          case 6: 
            { return FLEX_ID;
            }
          case 110: break;
          case 7: 
            { return FLEX_NUMBER;
            }
          case 111: break;
          case 8: 
            { return FLEX_SLASH;
            }
          case 112: break;
          case 9: 
            { return FLEX_SLASH2;
            }
          case 113: break;
          case 10: 
            { return FLEX_STAR;
            }
          case 114: break;
          case 11: 
            { return FLEX_PLUS;
            }
          case 115: break;
          case 12: 
            { prevState = yystate(); yybegin(CHAR_CLASS); return FLEX_BRACK1;
            }
          case 116: break;
          case 13: 
            { return FLEX_BRACK2;
            }
          case 117: break;
          case 14: 
            { return FLEX_EQ;
            }
          case 118: break;
          case 15: 
            { parenCount++; return FLEX_BRACE1;
            }
          case 119: break;
          case 16: 
            { --parenCount; return FLEX_BRACE2;
            }
          case 120: break;
          case 17: 
            { return FLEX_PAREN1;
            }
          case 121: break;
          case 18: 
            { return FLEX_PAREN2;
            }
          case 122: break;
          case 19: 
            { return FLEX_QUESTION;
            }
          case 123: break;
          case 20: 
            { return FLEX_DASH;
            }
          case 124: break;
          case 21: 
            { return FLEX_ROOF;
            }
          case 125: break;
          case 22: 
            { return FLEX_DOT;
            }
          case 126: break;
          case 23: 
            { return FLEX_COMMA;
            }
          case 127: break;
          case 24: 
            { return FLEX_OR;
            }
          case 128: break;
          case 25: 
            { return FLEX_DOLLAR;
            }
          case 129: break;
          case 26: 
            { return FLEX_NOT;
            }
          case 130: break;
          case 27: 
            { return FLEX_NOT2;
            }
          case 131: break;
          case 28: 
            { return FLEX_ANGLE1;
            }
          case 132: break;
          case 29: 
            { return FLEX_ANGLE2;
            }
          case 133: break;
          case 30: 
            { yybegin(prevState); return FLEX_NEWLINE;
            }
          case 134: break;
          case 31: 
            { yybegin(prevState); return FLEX_BRACK2;
            }
          case 135: break;
          case 32: 
            { return FLEX_LINE_COMMENT;
            }
          case 136: break;
          case 33: 
            { yybegin(BLOCK); return FLEX_NEWLINE;
            }
          case 137: break;
          case 34: 
            { return FLEX_BLOCK_COMMENT;
            }
          case 138: break;
          case 35: 
            { yybegin(DECLARATIONS); return FLEX_TWO_PERCS;
            }
          case 139: break;
          case 36: 
            { return FLEX_STRING;
            }
          case 140: break;
          case 37: 
            { return FLEX_ESCAPED_CHAR;
            }
          case 141: break;
          case 38: 
            { return FLEX_OPT_S;
            }
          case 142: break;
          case 39: 
            { yybegin(RULES); return FLEX_TWO_PERCS;
            }
          case 143: break;
          case 40: 
            { parenCount=1; yybegin(BLOCK_0); return FLEX_OPT_CODE1;
            }
          case 144: break;
          case 41: 
            { return FLEX_OPT_X;
            }
          case 145: break;
          case 42: 
            { parenCount=0; yybegin(DECLARATIONS); return FLEX_OPT_CODE2;
            }
          case 146: break;
          case 43: 
            { return FLEX_OPT_INT;
            }
          case 147: break;
          case 44: 
            { return FLEX_OPT_CUP;
            }
          case 148: break;
          case 45: 
            { return FLEX_OPT_LINE;
            }
          case 149: break;
          case 46: 
            { parenCount=1; yybegin(BLOCK_0); return FLEX_OPT_EOF1;
            }
          case 150: break;
          case 47: 
            { return FLEX_OPT_TYPE;
            }
          case 151: break;
          case 48: 
            { return FLEX_OPT_PACK;
            }
          case 152: break;
          case 49: 
            { return FLEX_OPT_CHAR;
            }
          case 153: break;
          case 50: 
            { return FLEX_OPT_FULL;
            }
          case 154: break;
          case 51: 
            { return FLEX_OPT_7BIT;
            }
          case 155: break;
          case 52: 
            { return FLEX_OPT_8BIT;
            }
          case 156: break;
          case 53: 
            { parenCount=0; yybegin(DECLARATIONS); return FLEX_OPT_EOF2;
            }
          case 157: break;
          case 54: 
            { return FLEX_OPT_TABLE;
            }
          case 158: break;
          case 55: 
            { return FLEX_OPT_DEBUG;
            }
          case 159: break;
          case 56: 
            { parenCount=1; yybegin(BLOCK_0); return FLEX_OPT_INIT1;
            }
          case 160: break;
          case 57: 
            { return FLEX_OPT_CLASS;
            }
          case 161: break;
          case 58: 
            { return FLEX_OPT_STATE;
            }
          case 162: break;
          case 59: 
            { return FLEX_OPT_FINAL;
            }
          case 163: break;
          case 60: 
            { return FLEX_OPT_YYEOF;
            }
          case 164: break;
          case 61: 
            { return FLEX_OPT_BYACC;
            }
          case 165: break;
          case 62: 
            { return FLEX_OPT16BIT;
            }
          case 166: break;
          case 63: 
            { parenCount=0; yybegin(DECLARATIONS); return FLEX_OPT_INIT2;
            }
          case 167: break;
          case 64: 
            { return FLEX_OPT_PUBLIC;
            }
          case 168: break;
          case 65: 
            { return FLEX_OPT_CUPSYM;
            }
          case 169: break;
          case 66: 
            { return FLEX_OPT_COLUMN;
            }
          case 170: break;
          case 67: 
            { return FLEX_OPT_SWITCH;
            }
          case 171: break;
          case 68: 
            { return FLEX_OPT_XSTATE;
            }
          case 172: break;
          case 69: 
            { return FLEX_OPT_BUFFER;
            }
          case 173: break;
          case 70: 
            { return FLEX_EOF;
            }
          case 174: break;
          case 71: 
            { parenCount=1; yybegin(BLOCK_0); return FLEX_OPT_EOFVAL1;
            }
          case 175: break;
          case 72: 
            { return FLEX_OPT_EXTENDS;
            }
          case 176: break;
          case 73: 
            { return FLEX_OPT_INTEGER;
            }
          case 177: break;
          case 74: 
            { return FLEX_OPT_INTWRAP;
            }
          case 178: break;
          case 75: 
            { return FLEX_OPT_INCLUDE;
            }
          case 179: break;
          case 76: 
            { return FLEX_OPT_UNICODE;
            }
          case 180: break;
          case 77: 
            { return FLEX_OPT_CTORARG;
            }
          case 181: break;
          case 78: 
            { return FLEX_OPT_NOTUNIX;
            }
          case 182: break;
          case 79: 
            { parenCount=0; yybegin(DECLARATIONS); return FLEX_OPT_EOFVAL2;
            }
          case 183: break;
          case 80: 
            { return FLEX_CLASS_D;
            }
          case 184: break;
          case 81: 
            { return FLEX_OPT_EOFTHROW;
            }
          case 185: break;
          case 82: 
            { return FLEX_OPT_EOFCLOSE;
            }
          case 186: break;
          case 83: 
            { return FLEX_OPT_CUPDEBUG;
            }
          case 187: break;
          case 84: 
            { return FLEX_OPT_CASELESS;
            }
          case 188: break;
          case 85: 
            { return FLEX_OPT_ABSTRACT;
            }
          case 189: break;
          case 86: 
            { return FLEX_OPT_FUNCTION;
            }
          case 190: break;
          case 87: 
            { return FLEX_CLASS_L;
            }
          case 191: break;
          case 88: 
            { return FLEX_OPT_EOFTHROW1;
            }
          case 192: break;
          case 89: 
            { return FLEX_OPT_EOFTHROW2;
            }
          case 193: break;
          case 90: 
            { return FLEX_OPT_INITTHROW;
            }
          case 194: break;
          case 91: 
            { return FLEX_OPT_SCANERROR;
            }
          case 195: break;
          case 92: 
            { return FLEX_CLASS_JL;
            }
          case 196: break;
          case 93: 
            { return FLEX_OPT_IGNORECASE;
            }
          case 197: break;
          case 94: 
            { return FLEX_OPT_INITTHROW1;
            }
          case 198: break;
          case 95: 
            { return FLEX_OPT_INITTHROW2;
            }
          case 199: break;
          case 96: 
            { return FLEX_OPT_IMPLEMENTS;
            }
          case 200: break;
          case 97: 
            { return FLEX_OPT_APIPRIVATE;
            }
          case 201: break;
          case 98: 
            { return FLEX_OPT_STANDALONE;
            }
          case 202: break;
          case 99: 
            { return FLEX_OPT_YYLEXTHROW;
            }
          case 203: break;
          case 100: 
            { return FLEX_OPT_YYLEXTHROW1;
            }
          case 204: break;
          case 101: 
            { return FLEX_OPT_YYLEXTHROW2;
            }
          case 205: break;
          case 102: 
            { return FLEX_CLASS_LL;
            }
          case 206: break;
          case 103: 
            { return FLEX_CLASS_LU;
            }
          case 207: break;
          case 104: 
            { return FLEX_CLASS_JLD;
            }
          case 208: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
