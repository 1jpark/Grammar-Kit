/* The following code was generated by JFlex 1.4.3 on 8/16/13 3:53 AM */

package org.intellij.jflex.parser;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static org.intellij.jflex.psi.JFlexTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/16/13 3:53 AM from the specification file
 * <tt>/Projects/grammar-kit/support/org/intellij/jflex/parser/_JFlexLexer.flex</tt>
 */
public class _JFlexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CHAR_CLASS = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\2\1\0\1\0\1\1\22\0\1\1\1\37\1\6"+
    "\1\0\1\34\1\14\2\0\1\15\1\16\1\12\1\13\1\30\1\24"+
    "\1\26\1\11\1\5\1\76\4\5\1\77\1\74\1\75\1\5\1\35"+
    "\1\27\1\31\1\36\1\32\1\23\1\0\4\3\1\41\1\43\10\3"+
    "\1\42\13\3\1\17\1\7\1\20\1\25\1\3\1\0\1\57\1\66"+
    "\1\56\1\51\1\46\1\67\1\53\1\71\1\52\1\44\1\73\1\45"+
    "\1\63\1\64\1\61\1\55\1\3\1\50\1\60\1\47\1\54\1\70"+
    "\1\62\1\65\1\72\1\3\1\21\1\33\1\22\1\40\53\0\1\4"+
    "\12\0\1\4\4\0\1\4\5\0\27\4\1\0\37\4\1\0\u013f\4"+
    "\31\0\162\4\4\0\14\4\16\0\5\4\11\0\1\4\213\0\1\4"+
    "\13\0\1\4\1\0\3\4\1\0\1\4\1\0\24\4\1\0\54\4"+
    "\1\0\46\4\1\0\5\4\4\0\202\4\10\0\105\4\1\0\46\4"+
    "\2\0\2\4\6\0\20\4\41\0\46\4\2\0\1\4\7\0\47\4"+
    "\110\0\33\4\5\0\3\4\56\0\32\4\5\0\13\4\25\0\12\10"+
    "\4\0\2\4\1\0\143\4\1\0\1\4\17\0\2\4\7\0\2\4"+
    "\12\10\3\4\2\0\1\4\20\0\1\4\1\0\36\4\35\0\3\4"+
    "\60\0\46\4\13\0\1\4\u0152\0\66\4\3\0\1\4\22\0\1\4"+
    "\7\0\12\4\4\0\12\10\25\0\10\4\2\0\2\4\2\0\26\4"+
    "\1\0\7\4\1\0\1\4\3\0\4\4\3\0\1\4\36\0\2\4"+
    "\1\0\3\4\4\0\12\10\2\4\23\0\6\4\4\0\2\4\2\0"+
    "\26\4\1\0\7\4\1\0\2\4\1\0\2\4\1\0\2\4\37\0"+
    "\4\4\1\0\1\4\7\0\12\10\2\0\3\4\20\0\11\4\1\0"+
    "\3\4\1\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\3\0"+
    "\1\4\22\0\1\4\17\0\2\4\4\0\12\10\25\0\10\4\2\0"+
    "\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\3\0"+
    "\1\4\36\0\2\4\1\0\3\4\4\0\12\10\1\0\1\4\21\0"+
    "\1\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2\4\1\0"+
    "\1\4\1\0\2\4\3\0\2\4\3\0\3\4\3\0\10\4\1\0"+
    "\3\4\55\0\11\10\25\0\10\4\1\0\3\4\1\0\27\4\1\0"+
    "\12\4\1\0\5\4\46\0\2\4\4\0\12\10\25\0\10\4\1\0"+
    "\3\4\1\0\27\4\1\0\12\4\1\0\5\4\3\0\1\4\40\0"+
    "\1\4\1\0\2\4\4\0\12\10\25\0\10\4\1\0\3\4\1\0"+
    "\27\4\1\0\20\4\46\0\2\4\4\0\12\10\25\0\22\4\3\0"+
    "\30\4\1\0\11\4\1\0\1\4\2\0\7\4\72\0\60\4\1\0"+
    "\2\4\14\0\7\4\11\0\12\10\47\0\2\4\1\0\1\4\2\0"+
    "\2\4\1\0\1\4\2\0\1\4\6\0\4\4\1\0\7\4\1\0"+
    "\3\4\1\0\1\4\1\0\1\4\2\0\2\4\1\0\4\4\1\0"+
    "\2\4\11\0\1\4\2\0\5\4\1\0\1\4\11\0\12\10\2\0"+
    "\2\4\42\0\1\4\37\0\12\10\26\0\10\4\1\0\42\4\35\0"+
    "\4\4\164\0\42\4\1\0\5\4\1\0\2\4\25\0\12\10\6\0"+
    "\6\4\112\0\46\4\12\0\51\4\7\0\132\4\5\0\104\4\5\0"+
    "\122\4\6\0\7\4\1\0\77\4\1\0\1\4\1\0\4\4\2\0"+
    "\7\4\1\0\1\4\1\0\4\4\2\0\47\4\1\0\1\4\1\0"+
    "\4\4\2\0\37\4\1\0\1\4\1\0\4\4\2\0\7\4\1\0"+
    "\1\4\1\0\4\4\2\0\7\4\1\0\7\4\1\0\27\4\1\0"+
    "\37\4\1\0\1\4\1\0\4\4\2\0\7\4\1\0\47\4\1\0"+
    "\23\4\16\0\11\10\56\0\125\4\14\0\u026c\4\2\0\10\4\12\0"+
    "\32\4\5\0\113\4\25\0\15\4\1\0\4\4\16\0\22\4\16\0"+
    "\22\4\16\0\15\4\1\0\3\4\17\0\64\4\43\0\1\4\4\0"+
    "\1\4\3\0\12\10\46\0\12\10\6\0\130\4\10\0\51\4\127\0"+
    "\35\4\51\0\12\10\36\4\2\0\5\4\u038b\0\154\4\224\0\234\4"+
    "\4\0\132\4\6\0\26\4\2\0\6\4\2\0\46\4\2\0\6\4"+
    "\2\0\10\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\37\4"+
    "\2\0\65\4\1\0\7\4\1\0\1\4\3\0\3\4\1\0\7\4"+
    "\3\0\4\4\2\0\6\4\4\0\15\4\5\0\3\4\1\0\7\4"+
    "\164\0\1\4\15\0\1\4\202\0\1\4\4\0\1\4\2\0\12\4"+
    "\1\0\1\4\3\0\5\4\6\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\0\4\4\1\0\3\4\1\0\7\4\3\0\3\4\5\0\5\4"+
    "\u0ebb\0\2\4\52\0\5\4\5\0\2\4\4\0\126\4\6\0\3\4"+
    "\1\0\132\4\1\0\4\4\5\0\50\4\4\0\136\4\21\0\30\4"+
    "\70\0\20\4\u0200\0\u19b6\4\112\0\u51a6\4\132\0\u048d\4\u0773\0\u2ba4\4"+
    "\u215c\0\u012e\4\2\0\73\4\225\0\7\4\14\0\5\4\5\0\1\4"+
    "\1\0\12\4\1\0\15\4\1\0\5\4\1\0\1\4\1\0\2\4"+
    "\1\0\2\4\1\0\154\4\41\0\u016b\4\22\0\100\4\2\0\66\4"+
    "\50\0\14\4\164\0\5\4\1\0\207\4\23\0\12\10\7\0\32\4"+
    "\6\0\32\4\13\0\131\4\3\0\6\4\2\0\6\4\2\0\6\4"+
    "\2\0\3\4\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\4\3"+
    "\1\36\1\1\1\37\1\0\1\40\1\0\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\11\0\1\47\1\0\1\50"+
    "\10\0\4\3\1\43\46\0\4\3\1\43\10\0\1\51"+
    "\7\0\1\52\32\0\4\3\1\53\1\54\1\55\5\0"+
    "\1\56\11\0\1\57\6\0\1\60\13\0\1\61\3\0"+
    "\1\62\1\63\7\0\3\3\1\64\4\0\1\65\1\66"+
    "\4\0\1\67\1\70\4\0\1\71\7\0\1\72\6\0"+
    "\1\73\1\74\2\0\1\75\1\76\6\0\1\77\1\3"+
    "\1\100\13\0\1\101\2\0\1\102\1\0\1\103\4\0"+
    "\1\104\1\0\1\105\1\106\7\0\1\107\1\110\2\0"+
    "\1\111\1\112\1\113\2\0\1\114\1\115\1\0\1\116"+
    "\1\117\1\120\6\0\1\121\7\0\1\122\1\123\3\0"+
    "\1\124\1\125\1\0\1\126\2\0\1\127\4\0\1\130"+
    "\1\0\1\131\1\132\2\0\1\133\2\0\1\134\3\0"+
    "\1\135\2\0\1\136\1\137\1\140\1\141\1\142\1\143"+
    "\1\144\1\145\3\0\1\146\1\147\4\0\1\150\1\151"+
    "\2\0\1\152";

  private static int [] zzUnpackAction() {
    int [] result = new int[378];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\200\0\200\0\u0240\0\200\0\200\0\u0280\0\200"+
    "\0\200\0\200\0\200\0\200\0\200\0\200\0\200\0\200"+
    "\0\u02c0\0\200\0\200\0\200\0\200\0\200\0\200\0\200"+
    "\0\u0300\0\u0340\0\u0380\0\u03c0\0\200\0\u01c0\0\200\0\u0180"+
    "\0\200\0\u0400\0\200\0\u0440\0\u0480\0\200\0\200\0\200"+
    "\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680"+
    "\0\u06c0\0\u0700\0\u0740\0\u0780\0\u07c0\0\u0800\0\u0840\0\u0880"+
    "\0\u08c0\0\u0900\0\u0940\0\u0980\0\u09c0\0\u0a00\0\u0a40\0\u0a80"+
    "\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\u0c80"+
    "\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80"+
    "\0\u0ec0\0\u0f00\0\u0f40\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080"+
    "\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280"+
    "\0\u12c0\0\u1300\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480"+
    "\0\u14c0\0\u1500\0\u1540\0\200\0\u1580\0\u15c0\0\u1600\0\u1640"+
    "\0\u1680\0\u16c0\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840"+
    "\0\u1880\0\u18c0\0\u1900\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40"+
    "\0\u1a80\0\u1ac0\0\u1b00\0\u1b40\0\u1b80\0\u1bc0\0\u1c00\0\u1c40"+
    "\0\u1c80\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40"+
    "\0\u1e80\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u1fc0\0\u2000\0\u2040"+
    "\0\u2080\0\u20c0\0\u2100\0\200\0\200\0\200\0\u2140\0\u2180"+
    "\0\u21c0\0\u2200\0\u2240\0\200\0\u2280\0\u22c0\0\u2300\0\u2340"+
    "\0\u2380\0\u23c0\0\u2400\0\u2440\0\u2480\0\200\0\u24c0\0\u2500"+
    "\0\u2540\0\u2580\0\u25c0\0\u2600\0\200\0\u2640\0\u2680\0\u26c0"+
    "\0\u2700\0\u2740\0\u2780\0\u27c0\0\u2800\0\u2840\0\u2880\0\u28c0"+
    "\0\200\0\u2900\0\u2940\0\u2980\0\200\0\200\0\u29c0\0\u2a00"+
    "\0\u2a40\0\u2a80\0\u2ac0\0\u2b00\0\u2b40\0\u2b80\0\u2bc0\0\u2c00"+
    "\0\u0100\0\u2c40\0\u2c80\0\u2cc0\0\u2d00\0\200\0\200\0\u2d40"+
    "\0\u2d80\0\u2dc0\0\u2e00\0\200\0\200\0\u2e40\0\u2e80\0\u2ec0"+
    "\0\u2f00\0\200\0\u2f40\0\u2f80\0\u2fc0\0\u3000\0\u3040\0\u3080"+
    "\0\u30c0\0\200\0\u3100\0\u3140\0\u3180\0\u31c0\0\u3200\0\u3240"+
    "\0\200\0\200\0\u3280\0\u32c0\0\200\0\200\0\u3300\0\u3340"+
    "\0\u3380\0\u33c0\0\u3400\0\u3440\0\u0100\0\u3480\0\u0100\0\u34c0"+
    "\0\u3500\0\u3540\0\u3580\0\u35c0\0\u3600\0\u3640\0\u3680\0\u36c0"+
    "\0\u3700\0\u3740\0\200\0\u3780\0\u37c0\0\200\0\u3800\0\200"+
    "\0\u3840\0\u3880\0\u38c0\0\u3900\0\200\0\u3940\0\200\0\200"+
    "\0\u3980\0\u39c0\0\u3a00\0\u3a40\0\u3a80\0\u3ac0\0\u3b00\0\200"+
    "\0\u0100\0\u3b40\0\u3b80\0\200\0\200\0\200\0\u3bc0\0\u3c00"+
    "\0\200\0\200\0\u3c40\0\200\0\200\0\200\0\u3c80\0\u3cc0"+
    "\0\u3d00\0\u3d40\0\u3d80\0\u3dc0\0\200\0\u3e00\0\u3e40\0\u3e80"+
    "\0\u3ec0\0\u3f00\0\u3f40\0\u3f80\0\u3fc0\0\200\0\u4000\0\u4040"+
    "\0\u4080\0\200\0\200\0\u40c0\0\200\0\u4100\0\u4140\0\200"+
    "\0\u4180\0\u41c0\0\u4200\0\u4240\0\200\0\u4280\0\200\0\200"+
    "\0\u42c0\0\u4300\0\u4340\0\u4380\0\u43c0\0\200\0\u4400\0\u4440"+
    "\0\u4480\0\200\0\u44c0\0\u4500\0\200\0\200\0\200\0\200"+
    "\0\200\0\200\0\u4540\0\200\0\u4580\0\u45c0\0\u4600\0\200"+
    "\0\200\0\u4640\0\u4680\0\u46c0\0\u4700\0\200\0\200\0\u4740"+
    "\0\u4780\0\200";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[378];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\2\5\1\6\1\7\1\10\1\6\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\11\5"+
    "\1\41\2\5\1\42\2\5\1\43\6\5\1\44\4\5"+
    "\4\6\2\3\1\45\4\3\1\46\10\3\1\47\3\3"+
    "\1\24\1\25\52\3\101\0\2\4\100\0\1\5\1\0"+
    "\1\5\33\0\37\5\5\0\1\6\2\0\1\6\63\0"+
    "\4\6\6\50\1\51\1\52\70\50\2\53\1\0\75\53"+
    "\11\0\1\54\1\55\101\0\1\56\4\0\1\57\1\60"+
    "\22\0\1\61\1\62\1\63\1\0\1\64\1\65\1\0"+
    "\1\66\1\67\1\70\1\71\1\72\3\0\1\73\1\74"+
    "\1\75\1\76\2\0\1\77\1\0\1\100\1\101\1\102"+
    "\36\0\1\103\73\0\1\104\51\0\1\5\1\0\1\5"+
    "\33\0\22\5\1\105\14\5\3\0\1\5\1\0\1\5"+
    "\33\0\16\5\1\106\20\5\3\0\1\5\1\0\1\5"+
    "\33\0\6\5\1\107\30\5\3\0\1\5\1\0\1\5"+
    "\33\0\16\5\1\110\20\5\2\50\1\0\75\50\2\54"+
    "\1\0\75\54\12\55\1\111\65\55\52\0\1\112\106\0"+
    "\1\113\3\0\1\114\71\0\1\115\12\0\1\116\53\0"+
    "\1\117\104\0\1\120\7\0\1\121\1\122\77\0\1\123"+
    "\67\0\1\124\2\0\1\125\65\0\1\126\1\0\1\127"+
    "\4\0\1\130\2\0\1\131\1\0\1\132\7\0\1\133"+
    "\63\0\1\134\10\0\1\135\60\0\1\136\6\0\1\137"+
    "\3\0\1\140\76\0\1\141\76\0\1\142\73\0\1\143"+
    "\15\0\1\144\57\0\1\145\1\0\1\146\115\0\1\147"+
    "\73\0\1\150\77\0\1\151\110\0\1\152\44\0\1\153"+
    "\1\154\3\0\1\155\2\0\1\156\64\0\1\157\41\0"+
    "\1\5\1\0\1\5\33\0\14\5\1\160\22\5\3\0"+
    "\1\5\1\0\1\5\33\0\15\5\1\161\21\5\3\0"+
    "\1\5\1\0\1\5\33\0\16\5\1\162\20\5\3\0"+
    "\1\5\1\0\1\5\33\0\4\5\1\163\32\5\11\55"+
    "\1\164\1\111\65\55\64\0\1\165\102\0\1\166\57\0"+
    "\1\167\116\0\1\170\66\0\1\171\110\0\1\172\75\0"+
    "\1\173\70\0\1\174\71\0\1\175\2\0\1\176\3\0"+
    "\1\177\73\0\1\200\113\0\1\201\67\0\1\202\100\0"+
    "\1\203\101\0\1\204\73\0\1\205\102\0\1\206\64\0"+
    "\1\207\111\0\1\210\72\0\1\211\105\0\1\212\76\0"+
    "\1\213\77\0\1\214\72\0\1\215\74\0\1\216\77\0"+
    "\1\217\117\0\1\220\67\0\1\221\104\0\1\222\60\0"+
    "\1\223\16\0\1\224\60\0\1\225\1\226\103\0\1\227"+
    "\77\0\1\230\113\0\1\231\56\0\1\232\100\0\1\233"+
    "\12\0\1\234\70\0\1\235\102\0\1\236\64\0\1\237"+
    "\40\0\1\5\1\0\1\5\33\0\20\5\1\240\16\5"+
    "\3\0\1\5\1\0\1\5\33\0\32\5\1\241\4\5"+
    "\3\0\1\5\1\0\1\5\33\0\6\5\1\242\30\5"+
    "\3\0\1\5\1\0\1\5\33\0\17\5\1\243\17\5"+
    "\46\0\1\244\52\0\1\245\1\246\24\0\1\247\6\0"+
    "\1\250\11\0\1\251\55\0\1\252\76\0\1\253\100\0"+
    "\1\254\105\0\1\255\104\0\1\256\63\0\1\257\100\0"+
    "\1\260\13\0\1\261\64\0\1\262\75\0\1\263\110\0"+
    "\1\264\66\0\1\265\125\0\1\266\64\0\1\267\67\0"+
    "\1\270\100\0\1\271\6\0\1\272\65\0\1\273\105\0"+
    "\1\274\73\0\1\275\104\0\1\276\71\0\1\277\77\0"+
    "\1\300\14\0\1\301\77\0\1\302\62\0\1\303\104\0"+
    "\1\304\102\0\1\305\107\0\1\306\66\0\1\307\100\0"+
    "\1\310\65\0\1\311\110\0\1\312\67\0\1\313\112\0"+
    "\1\314\65\0\1\315\77\0\1\316\102\0\1\317\73\0"+
    "\1\320\100\0\1\321\112\0\1\322\70\0\1\323\101\0"+
    "\1\324\65\0\1\325\37\0\1\5\1\0\1\5\33\0"+
    "\7\5\1\326\27\5\3\0\1\5\1\0\1\5\33\0"+
    "\16\5\1\327\20\5\3\0\1\5\1\0\1\5\33\0"+
    "\11\5\1\330\25\5\3\0\1\5\1\0\1\5\33\0"+
    "\5\5\1\331\31\5\71\0\1\332\53\0\1\333\111\0"+
    "\1\334\104\0\1\335\61\0\1\336\104\0\1\337\74\0"+
    "\1\340\75\0\1\341\104\0\1\342\74\0\1\343\50\0"+
    "\1\344\1\345\24\0\1\346\104\0\1\347\104\0\1\350"+
    "\70\0\1\351\105\0\1\352\76\0\1\353\66\0\1\354"+
    "\123\0\1\355\52\0\1\356\115\0\1\357\64\0\1\360"+
    "\77\0\1\361\75\0\1\362\102\0\1\363\74\0\1\364"+
    "\107\0\1\365\105\0\1\366\62\0\1\367\76\0\1\370"+
    "\107\0\1\371\66\0\1\372\101\0\1\373\115\0\1\374"+
    "\101\0\1\375\57\0\1\376\77\0\1\377\77\0\1\u0100"+
    "\76\0\1\u0101\103\0\1\u0102\73\0\1\u0103\63\0\1\u0104"+
    "\50\0\1\5\1\0\1\5\33\0\6\5\1\u0105\30\5"+
    "\3\0\1\5\1\0\1\5\33\0\12\5\1\u0106\24\5"+
    "\3\0\1\5\1\0\1\5\33\0\15\5\1\u0107\21\5"+
    "\50\0\1\u0108\110\0\1\u0109\63\0\1\u010a\103\0\1\u010b"+
    "\74\0\1\u010c\114\0\1\u010d\62\0\1\u010e\110\0\1\u010f"+
    "\111\0\1\u0110\57\0\1\u0111\77\0\1\u0112\104\0\1\u0113"+
    "\71\0\1\u0114\115\0\1\u0115\74\0\1\u0116\62\0\1\u0117"+
    "\115\0\1\u0118\65\0\1\u0119\104\0\1\u011a\77\0\1\u011b"+
    "\70\0\1\u011c\120\0\1\u011d\60\0\1\u011e\73\0\1\u011f"+
    "\101\0\1\u0120\101\0\1\u0121\74\0\1\u0122\77\0\1\u0123"+
    "\76\0\1\u0124\101\0\1\u0125\76\0\1\u0126\100\0\1\u0127"+
    "\61\0\1\u0128\50\0\1\5\1\0\1\5\33\0\5\5"+
    "\1\u0129\31\5\61\0\1\u012a\76\0\1\u012b\40\0\1\u012c"+
    "\1\u012d\135\0\1\u012e\75\0\1\u012f\67\0\1\u0130\101\0"+
    "\1\u0131\104\0\1\u0132\72\0\1\u0133\75\0\1\u0134\77\0"+
    "\1\u0135\104\0\1\u0136\100\0\1\u0137\103\0\1\u0138\107\0"+
    "\1\u0139\65\0\1\u013a\66\0\1\u013b\102\0\1\u013c\114\0"+
    "\1\u013d\73\0\1\u013e\107\0\1\u013f\54\0\1\u0140\101\0"+
    "\1\u0141\105\0\1\u0142\56\0\1\u0143\120\0\1\u0144\103\0"+
    "\1\u0145\63\0\1\u0146\110\0\1\u0147\104\0\1\u0148\74\0"+
    "\1\u0149\71\0\1\u014a\104\0\1\u014b\76\0\1\u014c\67\0"+
    "\1\u014d\111\0\1\u014e\77\0\1\u014f\102\0\1\u0150\63\0"+
    "\1\u0151\77\0\1\u0152\64\0\1\u0153\121\0\1\u0154\40\0"+
    "\1\u0155\136\0\1\u0156\41\0\1\u0157\1\u0158\135\0\1\u0159"+
    "\66\0\1\u015a\112\0\1\u015b\64\0\1\u015c\114\0\1\u015d"+
    "\63\0\1\u015e\110\0\1\u015f\53\0\1\u0160\13\0\1\u0161"+
    "\46\0\1\u0162\137\0\1\u0163\77\0\1\u0164\65\0\1\u0165"+
    "\111\0\1\u0166\40\0\1\u0167\1\u0168\123\0\1\u0169\77\0"+
    "\1\u016a\113\0\1\u016b\35\0\1\u016c\131\0\1\u016d\73\0"+
    "\1\u016e\77\0\1\u016f\52\0\1\u0170\1\u0171\130\0\1\u0172"+
    "\61\0\1\u0173\77\0\1\u0174\114\0\1\u0175\45\0\1\u0176"+
    "\77\0\1\u0177\126\0\1\u0178\65\0\1\u0179\62\0\1\u017a"+
    "\57\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18368];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\6\1\2\11\1\1\2\11\1\1\11\11"+
    "\1\1\7\11\4\1\1\11\1\1\1\11\1\0\1\11"+
    "\1\0\1\11\2\1\3\11\11\0\1\1\1\0\1\1"+
    "\10\0\5\1\46\0\4\1\1\11\10\0\1\1\7\0"+
    "\1\1\32\0\4\1\3\11\5\0\1\11\11\0\1\11"+
    "\6\0\1\11\13\0\1\11\3\0\2\11\7\0\4\1"+
    "\4\0\2\11\4\0\2\11\4\0\1\11\7\0\1\11"+
    "\6\0\2\11\2\0\2\11\6\0\3\1\13\0\1\11"+
    "\2\0\1\11\1\0\1\11\4\0\1\11\1\0\2\11"+
    "\7\0\1\11\1\1\2\0\3\11\2\0\2\11\1\0"+
    "\3\11\6\0\1\11\7\0\1\1\1\11\3\0\2\11"+
    "\1\0\1\11\2\0\1\11\4\0\1\11\1\0\2\11"+
    "\2\0\1\1\2\0\1\11\3\0\1\11\2\0\6\11"+
    "\1\1\1\11\3\0\2\11\4\0\2\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[378];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _JFlexLexer() {
    this((java.io.Reader)null);
  }


  public _JFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _JFlexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1326) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 74: 
          { return FLEX_PERC_28;
          }
        case 107: break;
        case 91: 
          { return FLEX_PERC_12;
          }
        case 108: break;
        case 78: 
          { return FLEX_PERC_18;
          }
        case 109: break;
        case 33: 
          { return FLEX_ESCAPED_CHAR;
          }
        case 110: break;
        case 94: 
          { return FLEX_PERC_51;
          }
        case 111: break;
        case 15: 
          { return FLEX_BRACE2;
          }
        case 112: break;
        case 58: 
          { return FLEX_PERC_57;
          }
        case 113: break;
        case 59: 
          { return FLEX_PERC_41;
          }
        case 114: break;
        case 5: 
          { return FLEX_SLASH;
          }
        case 115: break;
        case 16: 
          { return FLEX_QUESTION;
          }
        case 116: break;
        case 51: 
          { return FLEX_PERC_47;
          }
        case 117: break;
        case 82: 
          { return FLEX_PERC_31;
          }
        case 118: break;
        case 60: 
          { return FLEX_PERC_5;
          }
        case 119: break;
        case 24: 
          { return FLEX_OR;
          }
        case 120: break;
        case 101: 
          { return FLEX_CLASS1;
          }
        case 121: break;
        case 99: 
          { return FLEX_PERC_37;
          }
        case 122: break;
        case 41: 
          { return FLEX_PERC_21;
          }
        case 123: break;
        case 73: 
          { return FLEX_PERC_27;
          }
        case 124: break;
        case 56: 
          { return FLEX_PERC_11;
          }
        case 125: break;
        case 70: 
          { return FLEX_PERC_17;
          }
        case 126: break;
        case 17: 
          { return FLEX_DASH;
          }
        case 127: break;
        case 85: 
          { return FLEX_PERC_50;
          }
        case 128: break;
        case 72: 
          { return FLEX_PACKAGE;
          }
        case 129: break;
        case 29: 
          { return FLEX_NOT2;
          }
        case 130: break;
        case 14: 
          { return FLEX_BRACE1;
          }
        case 131: break;
        case 61: 
          { return FLEX_PERC_56;
          }
        case 132: break;
        case 84: 
          { return FLEX_PERC_40;
          }
        case 133: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 134: break;
        case 49: 
          { return FLEX_PERC_46;
          }
        case 135: break;
        case 45: 
          { return FLEX_PERC_30;
          }
        case 136: break;
        case 65: 
          { return FLEX_PERC_4;
          }
        case 137: break;
        case 30: 
          { yybegin(YYINITIAL); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 138: break;
        case 19: 
          { return FLEX_DOT;
          }
        case 139: break;
        case 54: 
          { return FLEX_PERC_36;
          }
        case 140: break;
        case 76: 
          { return FLEX_PERC_20;
          }
        case 141: break;
        case 104: 
          { return FLEX_CLASS6;
          }
        case 142: break;
        case 103: 
          { return FLEX_PERC_26;
          }
        case 143: break;
        case 55: 
          { return FLEX_PERC_10;
          }
        case 144: break;
        case 92: 
          { return FLEX_PERC_16;
          }
        case 145: break;
        case 8: 
          { return FLEX_PLUS;
          }
        case 146: break;
        case 18: 
          { return FLEX_ROOF;
          }
        case 147: break;
        case 81: 
          { return FLEX_PERC_55;
          }
        case 148: break;
        case 25: 
          { return FLEX_DOLLAR;
          }
        case 149: break;
        case 50: 
          { return FLEX_PERC_45;
          }
        case 150: break;
        case 75: 
          { return FLEX_PERC_3;
          }
        case 151: break;
        case 26: 
          { return FLEX_COLON;
          }
        case 152: break;
        case 36: 
          { return FLEX_PERC2;
          }
        case 153: break;
        case 52: 
          { return FLEX_PERC_35;
          }
        case 154: break;
        case 38: 
          { return FLEX_PERC_9;
          }
        case 155: break;
        case 105: 
          { return FLEX_CLASS5;
          }
        case 156: break;
        case 102: 
          { return FLEX_PERC_25;
          }
        case 157: break;
        case 20: 
          { return FLEX_SEMI;
          }
        case 158: break;
        case 1: 
          { return FLEX_CHAR;
          }
        case 159: break;
        case 80: 
          { return FLEX_PERC_15;
          }
        case 160: break;
        case 6: 
          { return FLEX_SLASH2;
          }
        case 161: break;
        case 28: 
          { return FLEX_NOT;
          }
        case 162: break;
        case 11: 
          { return FLEX_PAREN2;
          }
        case 163: break;
        case 67: 
          { return FLEX_PERC_54;
          }
        case 164: break;
        case 71: 
          { return FLEX_EOF;
          }
        case 165: break;
        case 3: 
          { return FLEX_ID;
          }
        case 166: break;
        case 47: 
          { return FLEX_PERC_44;
          }
        case 167: break;
        case 95: 
          { return FLEX_PERC_2;
          }
        case 168: break;
        case 27: 
          { return FLEX_EQ;
          }
        case 169: break;
        case 32: 
          { return FLEX_STRING;
          }
        case 170: break;
        case 83: 
          { return FLEX_PERC_34;
          }
        case 171: break;
        case 37: 
          { return FLEX_PERC_8;
          }
        case 172: break;
        case 34: 
          { return FLEX_LINE_COMMENT;
          }
        case 173: break;
        case 21: 
          { return FLEX_COMMA;
          }
        case 174: break;
        case 88: 
          { return FLEX_CLASS4;
          }
        case 175: break;
        case 100: 
          { return FLEX_PERC_24;
          }
        case 176: break;
        case 31: 
          { yybegin(YYINITIAL); return FLEX_BRACK2;
          }
        case 177: break;
        case 97: 
          { return FLEX_PERC_14;
          }
        case 178: break;
        case 63: 
          { return FLEX_IMPORT;
          }
        case 179: break;
        case 40: 
          { return FLEX_PERC_69;
          }
        case 180: break;
        case 10: 
          { return FLEX_PAREN1;
          }
        case 181: break;
        case 12: 
          { yybegin(CHAR_CLASS); return FLEX_BRACK1;
          }
        case 182: break;
        case 43: 
          { return FLEX_PERC_53;
          }
        case 183: break;
        case 35: 
          { return FLEX_BLOCK_COMMENT;
          }
        case 184: break;
        case 69: 
          { return FLEX_PERC_59;
          }
        case 185: break;
        case 53: 
          { return FLEX_PERC_43;
          }
        case 186: break;
        case 57: 
          { return FLEX_PERC_1;
          }
        case 187: break;
        case 62: 
          { return FLEX_PERC_49;
          }
        case 188: break;
        case 98: 
          { return FLEX_PERC_7;
          }
        case 189: break;
        case 90: 
          { return FLEX_PERC_33;
          }
        case 190: break;
        case 23: 
          { return FLEX_ANGLE2;
          }
        case 191: break;
        case 93: 
          { return FLEX_CLASS3;
          }
        case 192: break;
        case 66: 
          { return FLEX_PERC_39;
          }
        case 193: break;
        case 7: 
          { return FLEX_STAR;
          }
        case 194: break;
        case 46: 
          { return FLEX_PERC_23;
          }
        case 195: break;
        case 44: 
          { return FLEX_PERC_29;
          }
        case 196: break;
        case 96: 
          { return FLEX_PERC_13;
          }
        case 197: break;
        case 87: 
          { return FLEX_PERC_19;
          }
        case 198: break;
        case 13: 
          { return FLEX_BRACK2;
          }
        case 199: break;
        case 48: 
          { return FLEX_PERC_52;
          }
        case 200: break;
        case 9: 
          { return FLEX_PERC;
          }
        case 201: break;
        case 64: 
          { return FLEX_STATIC;
          }
        case 202: break;
        case 4: 
          { return FLEX_NUMBER;
          }
        case 203: break;
        case 39: 
          { return FLEX_PERC_58;
          }
        case 204: break;
        case 68: 
          { return FLEX_PERC_42;
          }
        case 205: break;
        case 79: 
          { return FLEX_PERC_48;
          }
        case 206: break;
        case 89: 
          { return FLEX_PERC_32;
          }
        case 207: break;
        case 86: 
          { return FLEX_PERC_6;
          }
        case 208: break;
        case 22: 
          { return FLEX_ANGLE1;
          }
        case 209: break;
        case 106: 
          { return FLEX_CLASS2;
          }
        case 210: break;
        case 42: 
          { return FLEX_PERC_38;
          }
        case 211: break;
        case 77: 
          { return FLEX_PERC_22;
          }
        case 212: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
