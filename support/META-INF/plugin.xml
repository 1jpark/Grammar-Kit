<idea-plugin url="https://github.com/JetBrains/Grammar-Kit" version="2">
  <id>org.jetbrains.idea.grammar</id>
  <version>1.0.1</version>
  <vendor email="gregory.shrago@jetbrains.com" logo="">Gregory Shrago</vendor>
  <idea-version since-build="111.14" until-build=""/>

  <name>Grammar-Kit</name>
  <description>Edit, manipulate, analyze BNF grammars and generate readable parser/PSI code</description>
  <change-notes>
    <![CDATA[
    <p>1.0.1</p>
    <ul>
        <li>Left-recursion detection</li>
        <li>Recursive meta rules handling fixes</li>
    </ul>
    <p>1.0:</p>
    <ul>
        <li>Simple unused rules highlighting</li>
        <li>Rename refactoring, find usages of rules & attributes</li>
        <li>PsiBuilder-based PEG parser & PSI class hierarchy generation</li>
        <li>BNF files editing, highlighting, navigation and completion</li>
        <li>Quick structure view, go to related file action</li>
        <li>Refactorings: inline rule, introduce rule</li>
        <li>Intentions: flip choice branches</li>
        <li>FIRST and NEXT token sets calculation (avail. in Quick Documentation)</li>
    </ul>
    ]]>
  </change-notes>

  <depends optional="true" config-file="plugin-java.xml">com.intellij.modules.java</depends>
  <extensions defaultExtensionNs="com.intellij">
    <errorHandler implementation="com.intellij.diagnostic.ITNReporter"/>

    <fileTypeFactory implementation="org.intellij.grammar.BnfFileTypeFactory"/>
    <lang.parserDefinition language="BNF" implementationClass="org.intellij.grammar.BnfParserDefinition"/>
    <annotator language="BNF" implementationClass="org.intellij.grammar.editor.BnfAnnotator"/>
    <lang.syntaxHighlighterFactory key="BNF" implementationClass="org.intellij.grammar.editor.BnfSyntaxHighlighterFactory"/>
    <elementDescriptionProvider implementation="org.intellij.grammar.BnfDescriptionProvider"/>
    <lang.findUsagesProvider language="BNF" implementationClass="org.intellij.grammar.BnfFindUsagesProvider"/>
    <lang.braceMatcher language="BNF" implementationClass="org.intellij.grammar.BnfBraceMatcher"/>
    <lang.psiStructureViewFactory language="BNF" implementationClass="org.intellij.grammar.BnfStructureViewFactory"/>
    <codeInsight.lineMarkerProvider language="BNF" implementationClass="org.intellij.grammar.BnfRuleLineMarkerProvider"/>
    <lang.commenter language="BNF" implementationClass="org.intellij.grammar.BnfCommenter"/>
    <completion.contributor language="BNF" implementationClass="org.intellij.grammar.BnfCompletionContributor" order="before javaClassName"/>

    <lang.refactoringSupport language="BNF" implementationClass="org.intellij.grammar.refactor.BnfRefactoringSupportProvider"/>
    <inlineActionHandler implementation="org.intellij.grammar.refactor.BnfInlineRuleActionHandler"/>

    <lang.unwrapDescriptor language="BNF" implementationClass="org.intellij.grammar.refactor.BnfUnwrapDescriptor"/>

    <documentationProvider implementation="org.intellij.grammar.BnfDocumentationProvider"/>

    <localInspection language="BNF" shortName="BnfSuspiciousTokenInspection" displayName="Suspicious token" groupName="Grammar Inspections"
                     enabledByDefault="true" level="WARNING" implementationClass="org.intellij.grammar.inspection.BnfSuspiciousTokenInspection"/>
    <localInspection language="BNF" shortName="BnfLeftRecursionInspection" displayName="Left recursion" groupName="Grammar Inspections"
                     enabledByDefault="true" level="WARNING" implementationClass="org.intellij.grammar.inspection.BnfLeftRecursionInspection"/>
    <localInspection language="BNF" shortName="BnfDuplicateRuleInspection" displayName="Duplicate rule" groupName="Grammar Inspections"
                     enabledByDefault="true" level="WARNING" implementationClass="org.intellij.grammar.inspection.BnfDuplicateRuleInspection"/>
    <localInspection language="BNF" shortName="BnfIdenticalChoiceBranchesInspection" displayName="Identical choice branches"
                     groupName="Grammar Inspections" enabledByDefault="true" level="WARNING"
                     implementationClass="org.intellij.grammar.inspection.BnfIdenticalChoiceBranchesInspection"/>
    <localInspection language="BNF" shortName="BnfUnreachableChoiceBranchInspection" displayName="Unreachable choice branch"
                     groupName="Grammar Inspections" enabledByDefault="true" level="WARNING"
                     implementationClass="org.intellij.grammar.inspection.BnfUnreachableChoiceBranchInspection"/>

    <colorSettingsPage implementation="org.intellij.grammar.editor.BnfColorSettingsPage"/>
    <quoteHandler fileType="Grammar" className="org.intellij.grammar.editor.BnfQuoteHandler"/>

    <intentionAction>
      <className>org.intellij.grammar.intention.BnfFlipChoiceIntention</className>
      <category>Grammar</category>
    </intentionAction>
  </extensions>
  <project-components>
    <component>
      <implementation-class>org.intellij.grammar.BnfUnusedRulePassFactory</implementation-class>
      <skipForDefaultProject/>
    </component>
  </project-components>
  <actions>
    <action id="grammar.Generate" class="org.intellij.grammar.actions.GenerateAction" text="Generate Parser Code">
      <add-to-group group-id="ToolsMenu" anchor="before" relative-to-action="com.intellij.tools.ExternalToolsGroup"/>
      <add-to-group group-id="EditorPopupMenu" anchor="last"/>
      <add-to-group group-id="ProjectViewPopupMenu" anchor="last"/>
      <keyboard-shortcut keymap="$default" first-keystroke="control shift G"/>
    </action>
    <action id="grammars.IntroduceRule" class="org.intellij.grammar.refactor.BnfIntroduceRuleAction" text="Introduce Rule"
            description="Introduce Rule">
      <add-to-group group-id="RefactoringMenu" anchor="first"/>
      <keyboard-shortcut keymap="$default" first-keystroke="control alt R"/>
    </action>
  </actions>
</idea-plugin>
