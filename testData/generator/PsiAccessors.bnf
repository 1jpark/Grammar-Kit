{
  classHeader="//header.txt"
  parserClass="PsiAccessors"
  psiClassPrefix="X"
  implements="XComposite"
  stubParserClass="PsiGenUtil"
  generateTokenAccessors("some_.*")=true

  tokens=[
    MY_SOMETHING="something"
    id="regexp:"
  ]
}
root ::= binary

binary ::= expression operator expression {
    methods = [
        alias = "/expression"
        left = "/expression[0]"
        right = "/expression[1]"
        op = "/operator"
        left_left = "/expression[0]/value[0]"
        right_right = "/expression[1]/value[1]"
        last = "/expression[last]"
        first = "/expression[first]"
        right_left = "/expression[1]/value[0]" // total nullable test
        left_right = "/expression[0]/value[1]"
        bad_index = "/expression[bad_index]/value[wrong_turn]"
    ]
    pin = "operator"
}

operator ::= '+' | '-'

expression ::= value '*' value
value ::= id

some_root ::= some_child value {
  methods=[
    childSomething="some_child/MY_SOMETHING" // ok
    childSomething2="some_child/something2" // ok
    grandChild="some_child/some_grand_child" // ok
    grandChildSomethin="some_child/some_grand_child/MY_SOMETHING" // ok
    grandChildSomethin2="some_child/some_grand_child/something2" // incorrect
    value="" // disable value accessor
  ]
}
some_child ::= some_grand_child "something" something2 {
  methods=[smth1="MY_SOMETHING" smth2="MY_SOMETHING"]
}
some_grand_child ::= MY_SOMETHING something2 {pin=1}
