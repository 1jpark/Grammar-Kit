{
  parserClass="ExternalRules"
  generatePsi=false
  parserUtilClass="org.intellij.grammar.parser.GeneratedParserUtilBase"
  tokens=[
    perc='%'
    perc_re='regexp:\%'
  ]
}

// external parsing
root ::= <<listOf statement>>
external unique_list_of ::= uniqueListOf
external unique_list_of_params ::= uniqueListOf <<p1>> "1+1" <<p2>> '1+1'

one ::= 'one'
two ::= 'two'
statement ::= one | two

private perc_list ::= <<listOf '%'>>
private perc_re_list1 ::= <<listOf perc_re>>
private perc_re_list2 ::= <<listOf (perc_re)>>

private param_seq ::= '{' <<uniqueListOf "1+1" '1+1' one two 10 some>> '}'
private param_choice ::= '{' <<uniqueListOf (one | two | 10 | some)>> '}'
private param_opt ::= '{' <<uniqueListOf [one | two | 10 | some]>> '}'
private param_choice_alt ::= '{' <<uniqueListOf {one | two | 10 | some}>> '}'
private param_seq_alt ::= '{' <<uniqueListOf {one | two} [10 | some]>> '}'
private param_seq_alt_ext ::= '{' <<unique_list_of one two>> '}'
private param_seq_alt_params_ext ::= '{' <<unique_list_of_params one !two>> '}'

// meta rules
meta comma_list ::= <<param>> (',' <<param>>) *
meta comma_list_pinned ::= <<head>> <<param>> (<<comma_list_tail <<param>>>>) *
meta comma_list_tail ::= ',' <<param>> {pin=1}
meta list_of_lists ::= <<head>> <<comma_list <<param>>>> (<<comma_list_tail <<comma_list <<param>>>>>>) *
meta meta_multi_level ::= <<comma_list <<comma_list <<comma_list <<comma_list <<comma_list <<param>>>>>>>>>>>>
meta meta_multi_level_pinned ::= <<comma_list <<comma_list_pinned <<head>> <<comma_list <<comma_list <<comma_list <<param>>>>>>>>>>>>
meta meta_multi_level_pinned_paren ::= <<comma_list <<comma_list_pinned <<head>> (<<comma_list <<comma_list <<comma_list <<param>>>>>>>>)>>>>

private meta_simple ::= <<comma_list one>>
private meta_seq ::= <<comma_list_pinned one (one | two)>>
private meta_seq_of_lists ::= <<list_of_lists one (one | two)>>
private multi_level ::= <<meta_multi_level one>>
private meta_seq_of_lists_opt ::= (<<list_of_lists one (one | two)>>)?

// mixed
private meta meta_mixed ::= <<listOf "1+2" '1+2' <<param>>>>
private meta_mixed_simple ::= <<meta_mixed statement>>
private meta_mixed_list ::= <<meta_mixed <<comma_list one>>>>
private meta_mixed_list_paren ::= <<meta_mixed (<<comma_list one>>)>>

private meta recoverable_item ::= <<param>> {recoverWhile="item_recover"}
private item_recover ::= !(',' | ';' | ')')

private meta recoverable_item2 ::= <<param>> {recoverWhile="<<recover_arg>>"}

// use _COLLAPSE_ flag due unknown external rule
collapse_one ::= <<uniqueListOf one>>
collapse_two ::= {extends=collapse_one}