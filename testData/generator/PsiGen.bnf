{
  classHeader="//header.txt"
  parserClass="PsiGen"
  stubParserClass="PsiGenUtil"
  extends(".*expr")="expr"
  extends("root_.")="root"
}
root ::= root_a | root_b | root_c | root_d
external root_a ::= parseGrammar grammar_element
root_b ::= <<parseGrammar grammar_element>>
root_c ::= <<blockOf grammar_element>>
root_d ::= <<listOf grammar_element>>

meta blockOf ::= <<p>> +
private meta listOf ::= <<p>> +
grammar_element ::= expr
expr ::= a_expr
private a_expr ::= b_expr plus_expr *
left plus_expr ::= '+' expr {extends="expr"}
private b_expr ::= id_expr mul_expr *
left mul_expr ::= '*' expr {extends="expr"}
private id_expr ::= specialRef | reference | literal | external_type | external_type2
external_type ::= number {elementType="missing_external_type" extends="expr"}
external_type2 ::= id {elementType="id_expr" extends="expr"}

;{
  parserClass="PsiGen2"
}

private reference ::= ref_expr qref_expr *
ref_expr ::= identifier  {extends="expr" mixin="MyRefImpl"}
left qref_expr ::= '.' identifier {extends="ref_expr" elementType="ref_expr"}
identifier ::= id

literal ::= number {extends="expr"}
specialRef ::= identifier OF reference {extends="qref_expr"} // test this kind of 'casing'