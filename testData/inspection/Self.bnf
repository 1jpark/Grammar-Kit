{
  parserClass="<warning>org.intellij.grammar.parser.GrammarParser</warning>"
  <warning>stubParserClass</warning>="<warning>org.intellij.grammar.parser.GeneratedParserUtilBase</warning>"

  implements="<warning>org.intellij.grammar.psi.BnfCompositeElement</warning>"
  extends="<warning>org.intellij.grammar.psi.impl.BnfCompositeElementImpl</warning>"

  psiClassPrefix="Bnf"
  psiImplClassSuffix="Impl"
  psiPackage="<warning>org.intellij.grammar.psi</warning>"
  psiImplPackage="<warning>org.intellij.grammar.psi.impl</warning>"

  elementTypeHolderClass="<warning>org.intellij.grammar.psi.BnfTypes</warning>"
  elementTypePrefix="BNF_"
  elementTypeClass="<warning>org.intellij.grammar.psi.BnfCompositeElementType</warning>"
  tokenTypeClass="<warning>org.intellij.grammar.psi.BnfTokenType</warning>"

  // tokens
  OP_EQ="="
  OP_IS="::="
  OP_OR="|"
  OP_OPT="?"
  OP_ONEMORE="+"
  OP_ZEROMORE="*"
  OP_AND="&"
  OP_NOT="!"
  SEMICOLON=";"
  LEFT_BRACE="{"
  RIGHT_BRACE="}"
  LEFT_BRACKET="["
  RIGHT_BRACKET="]"
  LEFT_PAREN="("
  RIGHT_PAREN=")"

  <warning>named</warning>="org.intellij.grammar.psi.BnfNamedElement"
  <warning>namedImpl</warning>="org.intellij.grammar.psi.impl.BnfNamedElementImpl"

}

grammar ::= (attrs | rule) *

rule ::= modifier* id '::=' expression attrs? ';'? {pin=3 <warning>recoverUntil</warning>="rule_recover_until" extends=<warning>namedImpl</warning> implements=<warning>named</warning>}
private rule_recover_until::=!'{'

expression ::= choice?

modifier ::= 'private' | 'external' | 'wrapped';

attrs ::= '{' attr* '}' {pin=1}

attr ::= id attr_pattern? '=' attr_value ';'? {pin=1 <warning>recoverUntil</warning>="attr_recover_until" extends=<warning>namedImpl</warning> implements=<warning>named</warning>}
private attr_recover_until::=!'}'
attr_value ::= (reference_or_token | literal_expression) !'=';
attr_pattern ::= '(' string ')'

choice ::= '{' sequence ('|' sequence)* '}' | sequence choice_tail* { extends="expression" }
private choice_tail ::= '|' sequence {pin=1}

sequence ::= option + { extends="expression" }

private option ::= quantified | predicate;
predicate ::=  predicate_sign  simple { extends="expression" }
predicate_sign ::= ('&' | '!')
quantified ::= '[' expression ']' | simple quantifier? { extends="expression" }
quantifier ::= '?' | '+' | '*'

private simple ::= !(modifier* id '::=' ) reference_or_token | literal_expression | paren_expression;
reference_or_token ::= id  { extends="expression" mixin="<warning>org.intellij.grammar.psi.impl.BnfRefOrTokenImpl</warning>"}
literal_expression ::= string_literal_expression | number { extends="expression" }
string_literal_expression ::= string { extends="literal_expression" mixin="<warning>org.intellij.grammar.psi.impl.BnfStringImpl</warning>"}
paren_expression ::= '(' expression ')' { pin=1 extends="expression" }



